[{"D:\\main1\\Typescript-Frontend\\ki-app\\src\\index.tsx":"1","D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\MainController.tsx":"2","D:\\main1\\Typescript-Frontend\\ki-app\\src\\reportWebVitals.ts":"3","D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\ReferringController.tsx":"4","D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\StartController.tsx":"5","D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\AIController.tsx":"6","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Facade.tsx":"7","D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\DeliveryController.tsx":"8","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\index.tsx":"9","D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\VisualizationController.tsx":"10","D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\SensorManager.tsx":"11","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\State.tsx":"12","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\index.tsx":"13","D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\DataCollectionController.tsx":"14","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\index.tsx":"15","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ResultPage\\Result.tsx":"16","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\DeliveryFormat.tsx":"17","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\AIDistributor.tsx":"18","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\AIBuilder.tsx":"19","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\DatabaseConnector.tsx":"20","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Language.tsx":"21","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\SensorData.tsx":"22","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\User.tsx":"23","D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\ModelCreationController.tsx":"24","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\State.tsx":"25","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\State.tsx":"26","D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\FinishController.tsx":"27","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\index.tsx":"28","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\index.tsx":"29","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\State.tsx":"30","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ResultPage\\State.tsx":"31","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Title\\index.tsx":"32","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Project.tsx":"33","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\DeviceData.tsx":"34","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ConstantsText\\index.tsx":"35","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Input\\index.tsx":"36","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoadModelButton\\index.tsx":"37","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\NewProjectButton\\index.tsx":"38","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoginWindow\\index.tsx":"39","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\index.tsx":"40","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\State.tsx":"41","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\State.tsx":"42","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Title\\index.tsx":"43","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Diagram\\index.tsx":"44","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Countdown\\index.tsx":"45","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\AIModel.tsx":"46","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\FinishPage\\index.tsx":"47","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Session.tsx":"48","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\DataSet.tsx":"49","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\State.tsx":"50","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\DiagramList\\index.tsx":"51","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\EmailList\\index.tsx":"52","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\DownloadButton\\index.tsx":"53","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\FinishButton\\index.tsx":"54","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ProjectList\\index.tsx":"55","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\QRImage\\index.tsx":"56","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ChangeToVisuBtn\\index.tsx":"57","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LinkText\\index.tsx":"58","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\FinishPage\\State.tsx":"59","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Label.tsx":"60","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\Train\\index.tsx":"61","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\DataRow.tsx":"62","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Diagram\\index.tsx":"63","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Title\\index.tsx":"64","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Input\\Labelling\\index.tsx":"65","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\DataPoint.tsx":"66","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\TimeSpan.tsx":"67","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ModelList\\index.tsx":"68"},{"size":419,"mtime":1614549621124,"results":"69","hashOfConfig":"70"},{"size":3674,"mtime":1617882274426,"results":"71","hashOfConfig":"70"},{"size":440,"mtime":1613136674313,"results":"72","hashOfConfig":"70"},{"size":10095,"mtime":1617805860105,"results":"73","hashOfConfig":"70"},{"size":3568,"mtime":1617889528175,"results":"74","hashOfConfig":"70"},{"size":6191,"mtime":1617921732218,"results":"75","hashOfConfig":"70"},{"size":22730,"mtime":1617921732571,"results":"76","hashOfConfig":"70"},{"size":2666,"mtime":1617745091779,"results":"77","hashOfConfig":"70"},{"size":3556,"mtime":1616540456688,"results":"78","hashOfConfig":"70"},{"size":6842,"mtime":1617927268199,"results":"79","hashOfConfig":"70"},{"size":9796,"mtime":1617882277352,"results":"80","hashOfConfig":"70"},{"size":5142,"mtime":1617927268171,"results":"81","hashOfConfig":"70"},{"size":7702,"mtime":1617895071331,"results":"82","hashOfConfig":"70"},{"size":2851,"mtime":1617882277307,"results":"83","hashOfConfig":"70"},{"size":3338,"mtime":1617740188163,"results":"84","hashOfConfig":"70"},{"size":2846,"mtime":1617889528765,"results":"85","hashOfConfig":"70"},{"size":214,"mtime":1613141165634,"results":"86","hashOfConfig":"70"},{"size":4830,"mtime":1617740185849,"results":"87","hashOfConfig":"70"},{"size":4979,"mtime":1617805860204,"results":"88","hashOfConfig":"70"},{"size":13990,"mtime":1617921732437,"results":"89","hashOfConfig":"70"},{"size":1654,"mtime":1617921732630,"results":"90","hashOfConfig":"70"},{"size":1609,"mtime":1617921732839,"results":"91","hashOfConfig":"70"},{"size":15621,"mtime":1617921733062,"results":"92","hashOfConfig":"70"},{"size":3388,"mtime":1617805859984,"results":"93","hashOfConfig":"70"},{"size":586,"mtime":1617710167860,"results":"94","hashOfConfig":"70"},{"size":846,"mtime":1617740188452,"results":"95","hashOfConfig":"70"},{"size":4061,"mtime":1617740184961,"results":"96","hashOfConfig":"70"},{"size":2973,"mtime":1617885014104,"results":"97","hashOfConfig":"70"},{"size":3197,"mtime":1617927268037,"results":"98","hashOfConfig":"70"},{"size":967,"mtime":1616540455891,"results":"99","hashOfConfig":"70"},{"size":669,"mtime":1617921733169,"results":"100","hashOfConfig":"70"},{"size":371,"mtime":1617895260307,"results":"101","hashOfConfig":"70"},{"size":9844,"mtime":1617921732718,"results":"102","hashOfConfig":"70"},{"size":2809,"mtime":1617921732496,"results":"103","hashOfConfig":"70"},{"size":858,"mtime":1617895071331,"results":"104","hashOfConfig":"70"},{"size":5105,"mtime":1617895260198,"results":"105","hashOfConfig":"70"},{"size":1727,"mtime":1617889488229,"results":"106","hashOfConfig":"70"},{"size":1750,"mtime":1617889488229,"results":"107","hashOfConfig":"70"},{"size":3136,"mtime":1617889488229,"results":"108","hashOfConfig":"70"},{"size":3749,"mtime":1617885014189,"results":"109","hashOfConfig":"70"},{"size":276,"mtime":1613603444888,"results":"110","hashOfConfig":"70"},{"size":600,"mtime":1617927268004,"results":"111","hashOfConfig":"70"},{"size":373,"mtime":1617895259919,"results":"112","hashOfConfig":"70"},{"size":4995,"mtime":1617895259809,"results":"113","hashOfConfig":"70"},{"size":1535,"mtime":1617895259742,"results":"114","hashOfConfig":"70"},{"size":485,"mtime":1613141165378,"results":"115","hashOfConfig":"70"},{"size":3393,"mtime":1617895260364,"results":"116","hashOfConfig":"70"},{"size":1818,"mtime":1617895259553,"results":"117","hashOfConfig":"70"},{"size":6211,"mtime":1617921732380,"results":"118","hashOfConfig":"70"},{"size":698,"mtime":1616540456202,"results":"119","hashOfConfig":"70"},{"size":7186,"mtime":1617927268081,"results":"120","hashOfConfig":"70"},{"size":7165,"mtime":1617889488096,"results":"121","hashOfConfig":"70"},{"size":735,"mtime":1617889488229,"results":"122","hashOfConfig":"70"},{"size":724,"mtime":1617889488617,"results":"123","hashOfConfig":"70"},{"size":4512,"mtime":1617889488229,"results":"124","hashOfConfig":"70"},{"size":537,"mtime":1617889488437,"results":"125","hashOfConfig":"70"},{"size":743,"mtime":1617885014415,"results":"126","hashOfConfig":"70"},{"size":727,"mtime":1617889488483,"results":"127","hashOfConfig":"70"},{"size":581,"mtime":1616605183589,"results":"128","hashOfConfig":"70"},{"size":1816,"mtime":1616940132286,"results":"129","hashOfConfig":"70"},{"size":13933,"mtime":1617894562881,"results":"130","hashOfConfig":"70"},{"size":3283,"mtime":1617921732297,"results":"131","hashOfConfig":"70"},{"size":5007,"mtime":1617895259964,"results":"132","hashOfConfig":"70"},{"size":369,"mtime":1617895260142,"results":"133","hashOfConfig":"70"},{"size":4536,"mtime":1617895260031,"results":"134","hashOfConfig":"70"},{"size":931,"mtime":1616241869437,"results":"135","hashOfConfig":"70"},{"size":1362,"mtime":1617921732963,"results":"136","hashOfConfig":"70"},{"size":1906,"mtime":1617889488229,"results":"137","hashOfConfig":"70"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"m76rte",{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"225","messages":"226","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"260","messages":"261","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\main1\\Typescript-Frontend\\ki-app\\src\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\MainController.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\reportWebVitals.ts",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\ReferringController.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\StartController.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\AIController.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Facade.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\DeliveryController.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\VisualizationController.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\SensorManager.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\State.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\DataCollectionController.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ResultPage\\Result.tsx",["277","278","279"],"import { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from 'react-dom';\r\nimport { States } from '../State';\r\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\r\nimport 'react-notifications/lib/notifications.css';\r\nimport Title from \"../../components/DataCollectionComponents/Title\";\r\n\r\n\r\n/**\r\n * Die Darstellungsseite für die Startseite der Datenerfasser\r\n */\r\nexport class ResultPage implements Page {\r\n    state: State;\r\n    observers: PageController[] = [];\r\n\r\n    /**\r\n     * Konstruktor der Darstellungseite\r\n     * @param admin Name der Person für den aufgenommen wird\r\n     */\r\n    constructor () {\r\n        this.state = new State();\r\n        this.update();\r\n    }\r\n\r\n    /**\r\n    * Update Methode der Darstellungsseite. Diese Methode wird nach jeder Änderung, die kein Seitenwechsel ist, aufgerufen. \r\n    * Die Methode enthält den Aufbau der Seite und wird von ihr gerendert.\r\n    * Es werden durch notify() alle controller über ein Update informiert und alle Seiten Elemente werden aktualisiert und erneut gerendert. \r\n    */\r\n    private update () {\r\n        this.notify();\r\n        const VDOM = (\r\n            <div>\r\n                <h1>Klassifiziere, bitte warten</h1>\r\n                <h1>{ this.state.aiUserData!.result }</h1>\r\n                <NotificationContainer />\r\n            </div>\r\n        );\r\n        if ( document.getElementById( 'root' ) !== null ) {\r\n            ReactDOM.render( VDOM, document.getElementById( 'root' ) );\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Durch diese Methode kann sich ein Controller als Beobachter anmelden.\r\n    * @param oberver neuer Beobachter\r\n    */\r\n    attach ( observer: PageController ) {\r\n        this.observers.push( observer );\r\n    }\r\n\r\n    /**\r\n    * Durch diese Methode kann sich ein Controller als Beobachter abmelden.\r\n    * @param oberver Beobachter der zu entfernen ist\r\n    */\r\n    detach ( observer: PageController ) {\r\n        const index = this.observers.indexOf( observer, 0 );\r\n        if ( index > -1 ) {\r\n            this.observers.splice( index, 1 );\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Durch diese Methode werden alle Beobachter über eine Änderung auf der Seite informiert.\r\n    */\r\n    notify () {\r\n        for ( let index = 0; index < this.observers.length; index++ ) {\r\n            const element = this.observers[ index ];\r\n            element.update();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Gibt den Status der Seite zurück\r\n    */\r\n    getState () {\r\n        return this.state;\r\n    }\r\n\r\n    /**\r\n     * Setzt einen neuen Zustand für die Seite und aktualisiert sie\r\n     * @param state neuer Zustand für die Seite\r\n     */\r\n    setState ( state: any ) {\r\n        this.state = state;\r\n        this.update();\r\n    }\r\n}","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\DeliveryFormat.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\AIDistributor.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\AIBuilder.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\DatabaseConnector.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Language.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\SensorData.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\User.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\ModelCreationController.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\State.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\State.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\FinishController.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\State.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ResultPage\\State.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Title\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Project.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\DeviceData.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ConstantsText\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Input\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoadModelButton\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\NewProjectButton\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoginWindow\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\State.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\State.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Title\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Diagram\\index.tsx",["280"],"import { Component, CSSProperties } from 'react';\r\n\r\nexport default class Diagram extends Component {\r\n\r\n    /**\r\n     * der Datensatz für Linie-Diagramm und die Funktion für Seitewechsel, durch props übermittelt\r\n     */\r\n    props = {\r\n        dataRows: [{ sensorType: 1, datapoint: [{ value: [5], relativeTime: 5 }] }],\r\n        pageChangeToFinish: function () { }\r\n    };\r\n\r\n    /**\r\n     * der Datensatz in chart-js form\r\n     */\r\n    state = {\r\n        diagrammData: {\r\n            lineLabels: [] as any[],\r\n            sensorRow: [] as any[],\r\n            datavalue: [] as any[],\r\n            time: [] as any[],\r\n            showDiagram: false,\r\n            diagram: {},\r\n            diagramLineLabels: {},\r\n            diagramData: {},\r\n            diagramOptions: {},\r\n            color: ['rgba(46,190,87,1)', 'rgba(68,24,232,1)', 'rgba(238,173,14,1)', 'rgba(178,34,34,1)', 'rgba(238, 130, 238,1)', 'rgba(0, 0, 0,1)',\r\n                'rgba(106, 90, 205,1)', 'rgba(238, 118, 0,1)', 'rgba(105, 105, 105,1)'],\r\n            csscolor: ['#2EBE57', '#CC00FF', '#EEAD0E', '#B22222', '#EE82EE', '#000000',\r\n                '#6A5ACD', '#EE7600', '#696969'],\r\n        }\r\n    };\r\n\r\n    /**\r\n     * aktualisiert das Diagramm mit dem neuen Datensatz\r\n     */\r\n    updateDiagramm() {\r\n        let diagrammData = this.state.diagrammData;\r\n        diagrammData.lineLabels = [];\r\n        diagrammData.sensorRow = [];\r\n        diagrammData.datavalue = [];\r\n        diagrammData.time = [];\r\n        diagrammData.showDiagram = true;\r\n\r\n        var datavalues = [];\r\n        for (var z = 0; z < this.props.dataRows.length; z++) {\r\n            this.state.diagrammData.sensorRow.push(this.props.dataRows[z].sensorType);\r\n            for (var dataCoordinate = 0; dataCoordinate < 3; dataCoordinate++) {\r\n                for (var j = 0; j < this.props.dataRows[z].datapoint.length; j++) {\r\n                    datavalues.push(this.props.dataRows[z].datapoint[j].value[dataCoordinate]);\r\n                }\r\n                this.state.diagrammData.datavalue.push(datavalues);\r\n                datavalues = [];\r\n            }\r\n        }\r\n        for (var j = 0; j < this.props.dataRows[0].datapoint.length; j++) {\r\n            this.state.diagrammData.time.push(this.props.dataRows[0].datapoint[j].relativeTime);\r\n        }\r\n\r\n        var newDatasets = [];\r\n        var lineLabels = [];\r\n        for (var i = 0; i < this.state.diagrammData.sensorRow.length * 3; i++) {\r\n            var coordinate = \".X\";\r\n            var sensor = this.state.diagrammData.sensorRow[(i / 3) | 0];\r\n            var sensorName = '';\r\n            /**\r\n                 * unterscheidet, welche Sensor es ist\r\n                 */\r\n            switch (sensor) {\r\n                case 2:\r\n                    sensorName = 'Accelerometer';\r\n                    break;\r\n                case 3:\r\n                    sensorName = 'Gyroscope';\r\n                    break;\r\n                case 4:\r\n                    sensorName = 'Magnetometer';\r\n                    break;\r\n            }\r\n            /**\r\n                 * unterscheidet, von welchem Koordinate dieser Datenpunkt ist\r\n                 */\r\n            if (i % 3 === 1) {\r\n                coordinate = \".Y\";\r\n            }\r\n            if (i % 3 === 2) {\r\n                coordinate = \".Z\";\r\n            }\r\n\r\n            let color: CSSProperties = { \"color\": this.state.diagrammData.csscolor[i] };\r\n            lineLabels.push(<span style={color}>■{sensorName + coordinate}<br /></span>);\r\n            newDatasets.push(\r\n                {\r\n                    label: sensor + coordinate,\r\n                    strokeColor: this.state.diagrammData.color[i],\r\n                    borderWidth: 1,\r\n                    data: this.state.diagrammData.datavalue[i],\r\n                }\r\n            );\r\n        }\r\n        const data = {\r\n            labels: this.state.diagrammData.time,\r\n            datasets: newDatasets\r\n        };\r\n        const options = {\r\n            datasetFill: false,\r\n            pointDotRadius: 2,\r\n            pointHitDetectionRadius: 1,\r\n            offsetGridLines: false,\r\n            pointDot: false\r\n        };\r\n        diagrammData = this.state.diagrammData;\r\n        diagrammData.diagramData = data;\r\n        diagrammData.lineLabels = lineLabels;\r\n        diagrammData.diagramOptions = options;\r\n    }\r\n\r\n    submit = () => {\r\n        this.props.pageChangeToFinish();\r\n    };\r\n\r\n    /**\r\n     * Rendert diese Diagram-Komponente\r\n     * @returns Diagramm-Teil\r\n     */\r\n    render() {\r\n        var LineChart = require(\"react-chartjs\").Line;\r\n        this.updateDiagramm();\r\n        return (\r\n            <div>\r\n                {this.state.diagrammData.lineLabels}\r\n                <LineChart data={this.state.diagrammData.diagramData} options={this.state.diagrammData.diagramOptions} width=\"400\" height=\"200\" redraw />\r\n                <button type=\"button\" onClick={this.submit}>ChangeToFinish</button>\r\n            </div>\r\n        );\r\n    }\r\n}","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Countdown\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\AIModel.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\FinishPage\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Session.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\DataSet.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\State.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\DiagramList\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\EmailList\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\DownloadButton\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\FinishButton\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ProjectList\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\QRImage\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ChangeToVisuBtn\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LinkText\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\FinishPage\\State.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Label.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\Train\\index.tsx",["281"],"import React, { Component } from 'react';\r\nimport NewWindow from 'react-new-window';\r\nimport { NotificationManager } from 'react-notifications';\r\nimport 'react-notifications/lib/notifications.css';\r\nimport './Train.css';\r\nexport default class Train extends Component {\r\n\r\n\t/**\r\n\t * Variablen und Methoden welche der Klasse zur verfügung gestellt werden müssen\r\n\t */\r\n\tprops = {\r\n\t\tdataSetMetas: [] as { dataSetID: number, dataSetName: string; }[],\r\n\t\ttrain: function (dataSets: number[], imputator: string, classifier: string, scaler: string, features: string[]) { },\r\n\t\tchangeToReferring: function () { }\r\n\t};\r\n\r\n\t/**\r\n\t * Status für diese Komponente\r\n\t */\r\n\tstate = {\r\n\t\tmouse: false,\r\n\t\topenNewWindow: false,\r\n\t\tvalue: '' as string,\r\n\t\tdatabaseList: [] as { dataSetID: number, dataSetName: string, chosen: boolean; }[],\r\n\t\tdatasets: [] as { dataSetID: number, dataSetName: string, chosen: boolean; }[],\r\n\t\timputators: [\r\n\t\t\t{ name: \"Mittel\", checked: true, tag: 'MEAN' },\r\n\t\t\t/*\t\t\tNOT IMPLEMENTED\r\n\t\t\t\t\t\t{ name: \"Letzer Wert fortgeführt\", checked: false, tag: 'FORWARD' },\r\n\t\t\t\t\t\t{ name: \"Bewegter Durchschnitt\", checked: false, tag: 'MOVING' },\r\n\t\t\t\t\t\t{ name: \"Lineare Interpolation\", checked: false, tag: 'LINEAR' },\r\n\t\t\t\t\t\t{ name: \"Spline Interpolation\", checked: false, tag: 'SPLINE' }*/\r\n\t\t],\r\n\t\tscalers: [\r\n\t\t\t{ name: \"Standard Scaler\", checked: false, tag: 'STANDARD' },\r\n\t\t\t{ name: \"Robust Scaler\", checked: false, tag: 'ROBUST' },\r\n\t\t\t{ name: \"Min-Max Scaler\", checked: false, tag: 'MIN_MAX' },\r\n\t\t\t{ name: \"Normalizer\", checked: false, tag: 'NORMALIZER' },\r\n\t\t\t{ name: \"Anteilstransformator\", checked: false, tag: 'SHARE' }\r\n\t\t],\r\n\t\tmyfeatures: [\r\n\t\t\t{ name: \"Minimum\", checked: false, tag: 'MIN' },\r\n\t\t\t{ name: \"Maximum\", checked: false, tag: 'MAX' },\r\n\t\t\t{ name: \"Varianz\", checked: false, tag: 'VARIANCE' },\r\n\t\t\t{ name: \"Energie\", checked: false, tag: 'ENERGY' },\r\n\t\t\t{ name: \"Fourier-Transformation\", checked: false, tag: 'FOURIER_TRANSFORM' },\r\n\t\t\t{ name: \"Mittelwert\", checked: false, tag: 'MEAN' },\r\n\t\t\t{ name: \"Autoregressiv\", checked: false, tag: 'AUTOREGRESSIVE' },\r\n\t\t\t{ name: \"Abweichung\", checked: false, tag: 'SKEWNESS' },\r\n\t\t\t{ name: \"Wölbung\", checked: false, tag: 'KURTOSIS' },\r\n\t\t],\r\n\t\tclassifiers: [\r\n\t\t\t{ name: \"MLPClassifier\", checked: false, tag: 'MLP' },\r\n\t\t\t{ name: \"RandomForestClassifier\", checked: false, tag: 'RANDOM_FOREST' },\r\n\t\t\t{ name: \"KNeighborsClassifier\", checked: false, tag: 'K_NEIGHOBORS' },\r\n\t\t\t{ name: \"Support Vector Machine\", checked: false, tag: 'SVM' }\r\n\t\t],\r\n\t\tchosenScaler: 0,\r\n\t\tchosenclassifier: 0,\r\n\t\tchosenImputator: 0\r\n\t};\r\n\r\n\t/**\r\n\t * Befüllt die beiden state-Variablen, die so aussehen, als müssten da die Datensätze des aktuellen Projekts rein, \r\n\t * mit den Daten aus der props-Variable dataSetMetas.\r\n\t */\r\n\tcomponentWillReceiveProps(): void {\r\n\t\tthis.setState({ databaseList: [] })\r\n\t\tfor (const x of this.props.dataSetMetas) {\r\n\t\t\tthis.state.databaseList.push({ dataSetName: x.dataSetName, dataSetID: x.dataSetID, chosen: false });\r\n\t\t}\r\n\t}\r\n\r\n\t/** \r\n\t\tcomponentDidMount() {\r\n\t\t\tlet newDatabaseList: { dataSetID: number, dataSetName: string, chosen: boolean; }[] = [];\r\n\t\t\tthis.props.dataSetMetas?.map((dataset) => {\r\n\t\t\t\tnewDatabaseList.push({ dataSetID: dataset.dataSetID, dataSetName: dataset.dataSetName, chosen: false });\r\n\t\t\t\treturn dataset;\r\n\t\t\t});\r\n\t\t\tthis.setState({ databaseList: newDatabaseList });\r\n\t\t}*/\r\n\r\n\t/**\r\n\t * Wechseln Mausstatus\r\n\t * @param flag Maus darauf\r\n\t * @returns \r\n\t */\r\n\thandleMouse = (flag: boolean) => {\r\n\t\treturn () => {\r\n\t\t\tthis.setState({ mouse: flag });\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * Klicken für checkbox von Datensätze\r\n\t * @param id Gewählte ID\r\n\t * @param chosen checked oder nicht\r\n\t */\r\n\thandleCheck = (id: number, chosen: boolean) => {\r\n\t\tconst { datasets } = this.state;\r\n\t\tconst newDatasets = datasets.map((dataset) => {\r\n\t\t\t// eslint-disable-next-line\r\n\t\t\tif (dataset.dataSetID === id) return { ...dataset, chosen };\r\n\t\t\telse return dataset;\r\n\t\t});\r\n\t\tthis.setState({ datasets: newDatasets });\r\n\t};\r\n\r\n\t/**\r\n\t * Löschen Methode\r\n\t * @param id löscht DatasetID\r\n\t */\r\n\thandleDelete = (id: number) => {\r\n\t\tif (window.confirm('Sind Sie sicher, den gewählten Datensatz löschen zu wollen?')) {\r\n\t\t\tconst { datasets } = this.state;\r\n\t\t\tconst newDatasets = datasets.filter((dataset) => {\r\n\t\t\t\treturn dataset.dataSetID !== id;\r\n\t\t\t});\r\n\t\t\t//update emailList\r\n\t\t\tthis.setState({ datasets: newDatasets });\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Erstellung neue Fenster für Datensätze wählen\r\n\t */\r\n\thandleCreate = () => {\r\n\t\t//if (this.state.databaseList == []) {\r\n\t\t//\t}\r\n\t\tconst flag = !this.state.openNewWindow;\r\n\t\tthis.setState({ openNewWindow: flag });\r\n\t};\r\n\r\n\t/**\r\n\t * Selektieren von DatabaseList\r\n\t * @param e ChangeEventSelect\r\n\t */\r\n\thandleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n\t\tthis.setState({\r\n\t\t\tvalue: e.target.value\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Diese Methode verarbeitet die Events, die ausgelöst werden, wenn im Datensatz-Auswahlfenster ein Datensatz\r\n\t * ausgewählt wird und diese Auswahl durch Drücken des zugehörigen Knopfes bestätigt wird.\r\n\t */\r\n\thandleChoose = (): void => {\r\n\t\tif (this.state.value === '') {\r\n\t\t\tNotificationManager.error(\"Keine Option ausgewählt!\", \"\", 3000);\r\n\t\t\tthis.setState({ \"openNewWindow\": false });\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet dataSets = this.state.datasets;\r\n\t\tthis.props.dataSetMetas.map((entry): boolean => {\r\n\t\t\tif (entry.dataSetName == this.state.value) {\r\n\t\t\t\tdataSets.push({ dataSetID: entry.dataSetID, dataSetName: entry.dataSetName, chosen: true });\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t});\r\n\t\tthis.setState({ \"datasets\": dataSets, \"openNewWindow\": false, \"value\": undefined });\r\n\t};\r\n\r\n\t/**\r\n\t * Erzeugt die Dropdown-Liste im Datensatz-Auswahlfenster.\r\n\t * Bereits ausgewählte Datensätze werden zwar angezeigt, sind aber ausgegraut.\r\n\t * \r\n\t * @returns Ein Array aus JSX-DOM-Elementen\r\n\t */\r\n\toptions = (): JSX.Element[] => {\r\n\t\treturn this.props.dataSetMetas.map(dataset => {\r\n\t\t\tif (this.state.datasets.map(entry => entry.dataSetID).includes(dataset.dataSetID)) {\r\n\t\t\t\treturn <option key={dataset.dataSetID} value={dataset.dataSetName} disabled={true}>{dataset.dataSetName}</option>;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn <option key={dataset.dataSetID} value={dataset.dataSetName}>{dataset.dataSetName}</option>;\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Check Imputation\r\n\t * @param index Imputationindex\r\n\t * @returns \r\n\t */\r\n\thandleImputation = (index: number) => {\r\n\t\tvar newList = [...this.state.imputators];\r\n\t\tvar newChosen = this.state.chosenImputator;\r\n\t\tif (newList[index].checked) { newChosen--; }\r\n\t\telse { newChosen++; }\r\n\t\tif (newChosen <= 1) {\r\n\t\t\tnewList[index].checked = !newList[index].checked;\r\n\t\t\tthis.setState({ chosenImputator: newChosen, imputators: newList });\r\n\t\t} else {\r\n\t\t\tNotificationManager.error(\"Es darf nur ein Imputer ausgewählt werden.\", \"\", 3000);\r\n\t\t\treturn;\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Check Scaler\r\n\t * @param index Scalerindex \r\n\t * @returns \r\n\t */\r\n\thandleScaler = (index: number) => {\r\n\t\tvar newList = [...this.state.scalers];\r\n\t\tvar newChosen = this.state.chosenScaler;\r\n\t\tif (newList[index].checked) { newChosen--; }\r\n\t\telse { newChosen++; }\r\n\t\tif (newChosen <= 1) {\r\n\t\t\tnewList[index].checked = !newList[index].checked;\r\n\t\t\tthis.setState({ chosenScaler: newChosen });\r\n\t\t\tthis.setState({ scalers: newList });\r\n\t\t} else {\r\n\t\t\tNotificationManager.error(\"Es darf nur ein Scaler ausgewählt werden.\", \"\", 3000);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Check Extraction\r\n\t * @param index Extractionindex\r\n\t */\r\n\thandleExtraction = (index: number) => {\r\n\t\tvar newList = [...this.state.myfeatures];\r\n\t\tnewList[index].checked = !newList[index].checked;\r\n\t\tthis.setState({ features: newList });\r\n\t};\r\n\r\n\t/**\r\n\t * Check Classifier\r\n\t * @param index Classifierindex\r\n\t * @returns \r\n\t */\r\n\thandleClassifier = (index: number) => {\r\n\t\tvar newList = [...this.state.classifiers];\r\n\t\tvar newChosen = this.state.chosenclassifier;\r\n\t\tif (newList[index].checked) { newChosen--; }\r\n\t\telse { newChosen++; }\r\n\t\tif (newChosen <= 1) {\r\n\t\t\tnewList[index].checked = !newList[index].checked;\r\n\t\t\tthis.setState({ chosenclassifier: newChosen });\r\n\t\t\tthis.setState({ classifiers: newList });\r\n\t\t} else {\r\n\t\t\tNotificationManager.error(\"Es darf nur ein Klassifizierer ausgewählt werden\", \"\", 3000);\r\n\t\t\treturn;\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Trainieren Methode\r\n\t * @returns \r\n\t */\r\n\thandleTrain = () => {\r\n\t\tvar dataSets: number[] = [], imputator = \"\", classifier = '', scaler = '', features: string[] = [];\r\n\t\tconst { datasets, imputators, classifiers, scalers, myfeatures } = this.state;\r\n\t\tlet datasetsflag = true, imputatorsflag = true, classifiersflag = true, scalersflag = true, featuresflag = true, nochoice = false;\r\n\t\tdatasets.map((datasetObj) => {\r\n\t\t\tif (datasetObj.chosen) {\r\n\t\t\t\tdatasetsflag = false;\r\n\t\t\t\tdataSets.push(datasetObj.dataSetID);\r\n\t\t\t}\r\n\t\t\treturn datasetObj;\r\n\t\t});\r\n\t\timputators.map((imputatorObj) => {\r\n\t\t\tif (imputatorObj.checked) {\r\n\t\t\t\timputatorsflag = false;\r\n\t\t\t\timputator = imputatorObj.tag;\r\n\t\t\t}\r\n\t\t\treturn imputatorObj;\r\n\t\t});\r\n\t\tclassifiers.map((classifierObj) => {\r\n\t\t\tif (classifierObj.checked) {\r\n\t\t\t\tclassifiersflag = false;\r\n\t\t\t\tclassifier = classifierObj.tag;\r\n\t\t\t}\r\n\t\t\treturn classifierObj;\r\n\t\t});\r\n\t\tscalers.map((scalerObj) => {\r\n\t\t\tif (scalerObj.checked) {\r\n\t\t\t\tscalersflag = false;\r\n\t\t\t\tscaler = scalerObj.tag;\r\n\t\t\t}\r\n\t\t\treturn scalerObj;\r\n\t\t});\r\n\t\tmyfeatures.map((featureObj) => {\r\n\t\t\tif (featureObj.checked) {\r\n\t\t\t\tfeaturesflag = false;\r\n\t\t\t\tfeatures.push(featureObj.tag);\r\n\t\t\t}\r\n\t\t\treturn featureObj;\r\n\t\t});\r\n\t\tif (datasetsflag) {\r\n\t\t\tNotificationManager.error(\"Kein Datensatz ausgewählt!\", \"\", 3000);\r\n\t\t\tnochoice = true;\r\n\t\t}\r\n\t\tif (imputatorsflag) {\r\n\t\t\tNotificationManager.error(\"Kein Imputer ausgewählt!\", \"\", 3000);\r\n\t\t\tnochoice = true;\r\n\t\t}\r\n\t\tif (classifiersflag) {\r\n\t\t\tNotificationManager.error(\"Kein Klassifizierer ausgewählt!\", \"\", 3000);\r\n\t\t\tnochoice = true;\r\n\t\t}\r\n\t\tif (scalersflag) {\r\n\t\t\tNotificationManager.error(\"Kein Scaler ausgewählt!\", \"\", 3000);\r\n\t\t\tnochoice = true;\r\n\t\t}\r\n\t\tif (featuresflag) {\r\n\t\t\tNotificationManager.error(\"Keine Merkmale zur Extraktion ausgewählt!\", \"\", 3000);\r\n\t\t\tnochoice = true;\r\n\t\t}\r\n\t\tif (nochoice) return;\r\n\t\t//console.log(chosendataSets, chosenImputator, chosenclassifier, chosenscaler, chosenFeatures)\r\n\t\tthis.props.train(dataSets, imputator, classifier, scaler, features);\r\n\t};\r\n\r\n\t/**\r\n\t * Wechseln zu Darstellungsseite\r\n\t */\r\n\thandleChangePage() {\r\n\t\tthis.props.changeToReferring();\r\n\t}\r\n\r\n\t/**\r\n\t * Render Methode des Komponenten\r\n\t * @returns Aufbau des Komponenten\r\n\t */\r\n\trender() {\r\n\t\tconst { mouse, datasets, imputators, scalers, myfeatures, classifiers } = this.state;\r\n\t\treturn (\r\n\t\t\t<div className=\"train\">\r\n\t\t\t\t<h3>Datasets</h3>\r\n\t\t\t\t{datasets.map(dataset => {\r\n\t\t\t\t\treturn (\r\n\r\n\t\t\t\t\t\t<li style={{ backgroundColor: mouse ? '#ddd' : 'white' }} onMouseEnter={this.handleMouse(true)} onMouseLeave={this.handleMouse(false)} className='list' >\r\n\t\t\t\t\t\t\t<label>\r\n\t\t\t\t\t\t\t\t<input type=\"checkbox\" checked={dataset.chosen} onChange={(e: React.ChangeEvent<HTMLInputElement>): void => this.handleCheck(dataset.dataSetID, e.target.checked)} />\r\n\t\t\t\t\t\t\t\t<span>{dataset.dataSetName}</span>\r\n\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t\t<button onClick={() => this.handleDelete(dataset.dataSetID)} type='button' className=\"btn-item\" style={{ display: mouse ? 'block' : 'none' }}>Löschen</button>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\r\n\t\t\t\t<div className=\"adddatasetbutton\">\r\n\t\t\t\t\t{this.state.openNewWindow && (\r\n\t\t\t\t\t\t<NewWindow>\r\n\t\t\t\t\t\t\t<div className=\"login-window\">\r\n\t\t\t\t\t\t\t\t<h1>DatabaseList</h1>\r\n\t\t\t\t\t\t\t\t<select onChange={this.handleChange}>\r\n\t\t\t\t\t\t\t\t\t<option value=\"\">choose dataset</option>\r\n\t\t\t\t\t\t\t\t\t{this.options()}\r\n\t\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t\t\t<button onClick={this.handleChoose} className=\"choose-btn\" type='button' >Add!</button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</NewWindow>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t<button onClick={() => this.handleCreate()} className=\"create-btn\" type='button' >Add new Dataset</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"list\">\r\n\t\t\t\t\t<div className=\"imputationlist\">\r\n\t\t\t\t\t\t<h3>Imputation</h3>\r\n\t\t\t\t\t\t{imputators.map((imputator, index) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<div key={index}>\r\n\t\t\t\t\t\t\t\t\t<input className='imputationcheck' type=\"checkbox\" value={index} checked={imputator.checked} onChange={() => this.handleImputation(index)} /><span>{imputator.name}</span>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"scalerlist\">\r\n\t\t\t\t\t\t<h3>Normalisierung</h3>\r\n\t\t\t\t\t\t{scalers.map((scaler, index) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<div key={index}>\r\n\t\t\t\t\t\t\t\t\t<input className='scalercheck' type=\"checkbox\" value={index} checked={scaler.checked} onChange={() => this.handleScaler(index)} /><span>{scaler.name}</span>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"list\">\r\n\t\t\t\t\t<div className=\"extractionlist\">\r\n\t\t\t\t\t\t<h3>Merkmalextraktion</h3>\r\n\t\t\t\t\t\t{myfeatures.map((extraction, index) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<div key={index}>\r\n\t\t\t\t\t\t\t\t\t<input className='featurecheck' type=\"checkbox\" value={index} checked={extraction.checked} onChange={() => this.handleExtraction(index)} /><span>{extraction.name}</span>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"classifierlist\">\r\n\t\t\t\t\t\t<h3>Modell</h3>\r\n\t\t\t\t\t\t{classifiers.map((classifier, index) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<div key={index}>\r\n\t\t\t\t\t\t\t\t\t<input className='classifiercheck' type=\"checkbox\" value={index} checked={classifier.checked} onChange={() => this.handleClassifier(index)} /><span>{classifier.name}</span>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<br></br>\r\n\r\n\t\t\t\t<div className=\"clearfloat\">\r\n\t\t\t\t\t<button onClick={() => this.handleTrain()} className=\"train-btn\" type='button' >Train Start!</button>\r\n\t\t\t\t\t<button onClick={() => this.handleChangePage()} className=\"changepage-btn\" type='button' >Zur Verweisseite zurück</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\r\n\t\t);\r\n\t}\r\n\r\n\r\n}\r\n","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\DataRow.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Diagram\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Title\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Input\\Labelling\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\DataPoint.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\TimeSpan.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ModelList\\index.tsx",[],{"ruleId":"282","severity":1,"message":"283","line":5,"column":10,"nodeType":"284","messageId":"285","endLine":5,"endColumn":16},{"ruleId":"282","severity":1,"message":"286","line":6,"column":33,"nodeType":"284","messageId":"285","endLine":6,"endColumn":52},{"ruleId":"282","severity":1,"message":"287","line":8,"column":8,"nodeType":"284","messageId":"285","endLine":8,"endColumn":13},{"ruleId":"288","severity":1,"message":"289","line":56,"column":18,"nodeType":"284","messageId":"290","endLine":56,"endColumn":19},{"ruleId":"291","severity":1,"message":"292","line":157,"column":26,"nodeType":"293","messageId":"294","endLine":157,"endColumn":28},"@typescript-eslint/no-unused-vars","'States' is defined but never used.","Identifier","unusedVar","'NotificationManager' is defined but never used.","'Title' is defined but never used.","@typescript-eslint/no-redeclare","'j' is already defined.","redeclared","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]