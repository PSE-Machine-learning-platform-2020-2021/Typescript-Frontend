[{"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\index.tsx":"1","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\reportWebVitals.ts":"2","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\controller\\MainController.tsx":"3","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\controller\\ReferringController.tsx":"4","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Facade.tsx":"5","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\State.tsx":"6","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\index.tsx":"7","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Language.tsx":"8","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\User.tsx":"9","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\ExplorerConnector.tsx":"10","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Device.tsx":"11","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Project.tsx":"12","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\NewProjectButton\\index.tsx":"13","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ConstantsText\\index.tsx":"14","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoadModelButton\\index.tsx":"15","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoginButton\\index.tsx":"16","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Sensor.tsx":"17","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\AIModel.tsx":"18","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\DataSet.tsx":"19","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Session.tsx":"20","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Label.tsx":"21","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\DataRow.tsx":"22","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LinkText\\index.tsx":"23","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\QRImage\\index.tsx":"24","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ProjectList\\index.tsx":"25","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\DataPoint.tsx":"26","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\TimeSpan.tsx":"27","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ModelList\\index.tsx":"28","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\State.tsx":"29","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\FinishPage\\index.tsx":"30","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\FinishPage\\State.tsx":"31","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Body\\index.tsx":"32","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Title\\index.tsx":"33","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Input\\index.tsx":"34","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Input\\Label\\Labelling.tsx":"35","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Input\\Label\\LabelList\\LabelList.tsx":"36","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Input\\Label\\AddLabel\\AddLabelForm.tsx":"37","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Input\\Label\\LabelItem\\LabelItem.tsx":"38","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Input\\Label\\LabelItem\\types.ts":"39","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\index.tsx":"40","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Title\\index.tsx":"41","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Input\\index.tsx":"42","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\State.tsx":"43"},{"size":480,"mtime":1613137427588,"results":"44","hashOfConfig":"45"},{"size":440,"mtime":1613137427601,"results":"46","hashOfConfig":"45"},{"size":3063,"mtime":1613245441551,"results":"47","hashOfConfig":"45"},{"size":4760,"mtime":1613253726292,"results":"48","hashOfConfig":"45"},{"size":12406,"mtime":1613215241436,"results":"49","hashOfConfig":"45"},{"size":1815,"mtime":1613215241447,"results":"50","hashOfConfig":"45"},{"size":2205,"mtime":1613245212550,"results":"51","hashOfConfig":"45"},{"size":1682,"mtime":1613137897376,"results":"52","hashOfConfig":"45"},{"size":12459,"mtime":1613215241443,"results":"53","hashOfConfig":"45"},{"size":4991,"mtime":1613215241433,"results":"54","hashOfConfig":"45"},{"size":1891,"mtime":1613215241430,"results":"55","hashOfConfig":"45"},{"size":8261,"mtime":1613215241439,"results":"56","hashOfConfig":"45"},{"size":597,"mtime":1613245212541,"results":"57","hashOfConfig":"45"},{"size":229,"mtime":1613137427648,"results":"58","hashOfConfig":"45"},{"size":518,"mtime":1613137427650,"results":"59","hashOfConfig":"45"},{"size":1821,"mtime":1613137427651,"results":"60","hashOfConfig":"45"},{"size":5887,"mtime":1613215241441,"results":"61","hashOfConfig":"45"},{"size":485,"mtime":1613137897360,"results":"62","hashOfConfig":"45"},{"size":6424,"mtime":1613215241429,"results":"63","hashOfConfig":"45"},{"size":1710,"mtime":1613137897382,"results":"64","hashOfConfig":"45"},{"size":1787,"mtime":1613137897374,"results":"65","hashOfConfig":"45"},{"size":3376,"mtime":1613215241427,"results":"66","hashOfConfig":"45"},{"size":557,"mtime":1613137427649,"results":"67","hashOfConfig":"45"},{"size":305,"mtime":1613137427656,"results":"68","hashOfConfig":"45"},{"size":1275,"mtime":1613137427655,"results":"69","hashOfConfig":"45"},{"size":927,"mtime":1613137897362,"results":"70","hashOfConfig":"45"},{"size":1370,"mtime":1613137897385,"results":"71","hashOfConfig":"45"},{"size":1188,"mtime":1613137427653,"results":"72","hashOfConfig":"45"},{"size":1081,"mtime":1613137897388,"results":"73","hashOfConfig":"45"},{"size":1998,"mtime":1613253885685,"results":"74","hashOfConfig":"45"},{"size":350,"mtime":1613137427677,"results":"75","hashOfConfig":"45"},{"size":376,"mtime":1613137427632,"results":"76","hashOfConfig":"45"},{"size":1000,"mtime":1613137427636,"results":"77","hashOfConfig":"45"},{"size":538,"mtime":1613244493222,"results":"78","hashOfConfig":"45"},{"size":900,"mtime":1613253404063,"results":"79","hashOfConfig":"45"},{"size":432,"mtime":1613253367666,"results":"80","hashOfConfig":"45"},{"size":1441,"mtime":1613253667726,"results":"81","hashOfConfig":"45"},{"size":364,"mtime":1613253356164,"results":"82","hashOfConfig":"45"},{"size":170,"mtime":1613253400966,"results":"83","hashOfConfig":"45"},{"size":1473,"mtime":1613253904559,"results":"84","hashOfConfig":"45"},{"size":1002,"mtime":1613137427662,"results":"85","hashOfConfig":"45"},{"size":1858,"mtime":1613137427659,"results":"86","hashOfConfig":"45"},{"size":288,"mtime":1613137427685,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"91"},"14qbaph",{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"91"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"101","usedDeprecatedRules":"91"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"91"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"108"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"111","usedDeprecatedRules":"91"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"114","usedDeprecatedRules":"91"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"91"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":3,"source":"122","usedDeprecatedRules":"91"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"91"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":5,"source":"138","usedDeprecatedRules":"91"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"141","usedDeprecatedRules":"91"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":3,"source":"146","usedDeprecatedRules":"91"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"108"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"164","usedDeprecatedRules":"91"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"91"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\index.tsx",["192","193"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { MainController } from './controller/MainController';\r\n\r\nMainController.getInstance().startApp();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n",["194","195"],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\reportWebVitals.ts",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\controller\\MainController.tsx",["196"],"import { PageController } from \"./PageController\";\r\n//import { StartController } from \"./StartController\";\r\nimport { RefferingController } from \"./ReferringController\";\r\nimport { MainControllerInterface } from \"./MainControllerInterface\";\r\nimport { IState, States } from \"../view/pages/State\";\r\nimport { Facade } from \"../model/Facade\";\r\n\r\nexport class MainController implements MainControllerInterface {\r\n  private facade: Facade;\r\n\r\n  private static mainController: MainController;\r\n\r\n  private currentPageController: PageController | undefined;\r\n\r\n  /**\r\n   * Konstruktor des MainControllers. Holt sich die Fassade.\r\n   */\r\n  constructor() {\r\n    this.facade = new Facade(\"de\");\r\n  }\r\n\r\n  /**\r\n   * Gibt sich selber zurück und sorgt dafür das nur ein MainController besteht.\r\n   * @returns MainController\r\n   */\r\n  static getInstance() {\r\n    if (this.mainController === undefined) {\r\n      this.mainController = new MainController();\r\n      return this.mainController;\r\n    }\r\n    return this.mainController;\r\n  }\r\n\r\n  /**\r\n   * Prüft ob das Gerät auf das Internet zugreifen kann.\r\n   * @returns Gibt true zurück falls eine Internetverbindung besteht, sonst wird false zurück gegeben.\r\n   */\r\n  checkConnection() {\r\n    return window.navigator.onLine;\r\n  }\r\n\r\n  /**\r\n   * Prüft ob der Benutzer angemeldet ist.\r\n   * @returns Gibt true zurück falls der Benutzer angemeldet ist, sonst wird false zurück gegeben.\r\n   */\r\n  checkLoginStatus() {\r\n    return false;//this.facade.checkLogin();\r\n  }\r\n\r\n  // static getSession() {\r\n  //    return false\r\n  //}\r\n\r\n  /**\r\n   * Setzt den momentanen Seitenverwalter neu\r\n   * @param destinationPageController Der neue Seitenverwalter\r\n   */\r\n  changeTo(destinationPageController: PageController) {\r\n    this.currentPageController = destinationPageController;\r\n  }\r\n\r\n  /**\r\n   * Andwendungstart für einen Desktop\r\n   */\r\n  startApp() {\r\n    let refferingController: RefferingController = new RefferingController();\r\n    this.changeTo(refferingController);\r\n  }\r\n\r\n\r\n  /**\r\n   * @returns Gibt die Fassade zurück\r\n   */\r\n  getFacade() {\r\n    return this.facade;\r\n  }\r\n\r\n  /**\r\n   * @param ids Alle ids, zu denen man die Texte möchte.\r\n   * @returns Gibt alle texte zu den übergebenen ids zurück.\r\n   */\r\n  getMessage(messages: { text: string, id: number; }[]) {\r\n    let messageIDs: number[] = [];\r\n    for (let index = 0; index < messages.length; index++) {\r\n      messageIDs.push(messages[index].id);\r\n    }\r\n    let texts: string[] = [];\r\n    for (let index = 0; index < messages.length; index++) {\r\n      messages[index].text = texts[index];\r\n      return messages;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param languageCode Das Sprachkürzel als string.\r\n   * @returns Gibt true zurück falls der wechsel erfolgt ist, sonst false.\r\n   */\r\n  setLanguage(languageCode: string) {\r\n    let nextState: States;\r\n    let success = this.getFacade().setLanguage(languageCode);\r\n    if (success) {\r\n      nextState = States.NeedMessage;\r\n    } else {\r\n      nextState = States.LoadError;\r\n    }\r\n    return nextState;\r\n  }\r\n}\r\n","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\controller\\ReferringController.tsx",["197","198","199","200","201"],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Facade.tsx",["202","203","204"],"import { DeliveryFormat } from \"./DeliveryFormat\";\r\nimport { ExplorerConnector } from \"./ExplorerConnector\";\r\nimport { Language } from \"./Language\";\r\nimport { SensorData } from \"./Sensor\";\r\nimport { Admin, Dataminer, User } from \"./User\";\r\n\r\ninterface FacadeInterface {\r\n  createDataSet(sensorTypes: string[], dataSetName: string): boolean;\r\n  sendDataPoint(dataRowID: number, value: number[]): boolean;\r\n  readDataPoint(dataRowID: number): object;\r\n  loadProject(projectID: number): boolean;\r\n  getProjectMetas(): string[];\r\n  getDataSetMeta(): string[];\r\n  getSessionID(): number;\r\n  getDataRows(dataSetID: number): number[][][];\r\n  getCurrentDataRows(): { value: number, relativeTime: number; }[];\r\n  getMessage(messageID: number): string;\r\n  setLanguage(languageCode: string): boolean;\r\n  getLanguageMetas(): object[];\r\n  getEmail(): string;\r\n  deleteDataSet(dataSetID: number): boolean;\r\n  registerAdmin(adminName: string, email: string, password: string): boolean;\r\n  registerDataminer(dataminerName: string, sessionID: number): boolean;\r\n  registerAIModelUser(aiModelUserName: string): boolean;\r\n  loginAdmin(email: string, password: string): boolean;\r\n  logoutAdmin(): boolean;\r\n  createProject(projectName: string): boolean;\r\n  setLabel(labelID: number, start: number, end: number): boolean;\r\n  createLabel(): number; //labelid von datenbank\r\n  getLabels(): object[];\r\n  checkLogin(): boolean;\r\n  classify(aiId: number, dataSetId: number, callBack: Function): void;\r\n  getAIModel(format: DeliveryFormat): object;\r\n  applyModel(modeldata: object): void;\r\n} export type { FacadeInterface };\r\n\r\n/**\r\n * Die Facade stellt alle interaktionen mit dem Model zur Verfügung\r\n */\r\nexport class Facade {\r\n  private language: Language; //Alle Nachrichten, in der geladenen Sprache\r\n  private explorerConnector: ExplorerConnector; //Die Verbindung zur Datenbank\r\n  private admin?: Admin; //Falls ein Admin angemeldet ist der Admin, oder die Daten von einem Admin für den Datenerfasser\r\n  private user?: User; //Der Benutzer, entweder Datenerfasser oder AIModelUser\r\n\r\n\r\n  /**\r\n   * Erstellt die Facade\r\n   * @param languageCode der Sprachcode von der Sprache, die geladen werden soll\r\n   */\r\n  constructor(languageCode: string) {\r\n    this.explorerConnector = new ExplorerConnector();\r\n    this.language = new Language(this.explorerConnector.loadLanguage(languageCode));\r\n  }\r\n\r\n  /**\r\n   * Erstellt ein Datensatz\r\n   * @param sensorTypeID muss der Sensor Typ ID von einem Sensor des Gerätes übereinstimmen\r\n   * @param dataSetName Name des Datensatzes\r\n   * @returns true, wenn der Datensatz erstellt wurde. Dies ist der Fall, wenn ein Benutzer existiert welcher in einer Session ist und alle Sensortypen existieren.\r\n   */\r\n  createDataSet(sensorTypeID: number[], dataSetName: string): boolean {\r\n    if (this.user != null && this.user instanceof Dataminer && this.admin != null) {\r\n      let dataminerName: string = this.user.getName();\r\n      let sessionID: number = this.getSessionID();\r\n      let dataRowSensors: SensorData[] = this.user.getDeviceSensors(sensorTypeID);\r\n      if (dataRowSensors.length > 0 && dataRowSensors.length == sensorTypeID.length) {\r\n        let dataSetID: number = this.explorerConnector.createDataSet(sessionID, sensorTypeID, dataminerName, dataSetName);\r\n        return this.admin.createDataSet(dataRowSensors, dataSetID, dataSetName);\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Sendet den Datenpunkt an die Datenbank\r\n   * @param dataRowID die ID der aktuellen Datenreihe des eingelesenen Datenpunkts\r\n   * @param value der SensorWert\r\n   * @param relativeTime die relative Zeit zum Aufnahmestart in Millisekunden\r\n   * @return true, wenn der Datenpunkt erfolgreich an die Datenbank gesendet wurde\r\n   */\r\n  sendDataPoint(dataRowID: number, value: number, relativeTime: number): boolean {\r\n    if (this.admin != null) {\r\n      let sessionID: number = this.getSessionID();\r\n      let dataSetID: number = this.admin.getCurrentDataSetID();\r\n      return this.explorerConnector.sendDataPoint(sessionID, dataSetID, dataRowID, value, relativeTime);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Liest für den aktuellen Datensatz den Sensor aus von der Datenreihe mit der übergebenen ID\r\n   * @param dataRowID die DatenreihenID\r\n   */\r\n  readDataPoint(dataRowID: number): { dataPoint?: { value: number, relativeTime: number; }; } {\r\n    if (this.admin != null) {\r\n      return this.admin.readDataPoint(dataRowID);\r\n    }\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Lädt aus der Datenbank das Projekt mit der übergebenen ID, hierfür muss der Admin angemeldet sein\r\n   * @param projectID die Projekt ID\r\n   * @returns true, wenn das Projekt erfolgreich geladen wurde dies tritt nur ein, wenn eine Verbindung zur Datenbank besteht,\r\n   *          die Projekt ID existiert und der Admin dafür angemeldet ist\r\n   */\r\n  loadProject(projectID: number): boolean {\r\n    if (this.admin != null && !this.admin.existProject(projectID)) {\r\n      let adminEmail: string = this.admin.getEmail();\r\n      return this.admin.loadProject(this.explorerConnector.loadProject(adminEmail, projectID));\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Lädt vom aktuell angemeldeten Admin von seinen Projekten den Namen und die die Projekt ID\r\n   * @returns Von allen Projekten des Admins Projekt ID und Projektname\r\n   */\r\n  getProjectMetas(): { projectID: number, projectName: string, AIModelExist: boolean; }[] {\r\n    return this.explorerConnector.getProjectMetas(this.getAdminEmail());\r\n  }\r\n\r\n  /**\r\n   * Gibt vom aktuellen Projekt von allen Datensätzen die Datensatz ID und der Datensatz Name zurück\r\n   */\r\n  getDataSetMetas(): { dataSetID: number, dataSetName: string; }[] {\r\n    if (this.admin != null) {\r\n      return this.admin.getDataSetMetas();\r\n    }\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Gibt die Session ID des aktuellen Projekts zurück, -1 falls kein aktuelles Projekt existiert\r\n   */\r\n  getSessionID(): number {\r\n    if (this.admin != null) {\r\n      return this.admin?.getSessionID();\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Gibt vom aktuellen Projekt die Datenreihen der Datensatz ID zurück und setzt diesen Datensatz als aktuellen Datensatz\r\n   * @param dataSetID die Datensatz ID von der die Datenreihen gelesen werden sollen\r\n   * @returns die Sensordaten von der Datenreihe\r\n   */\r\n  getDataRows(dataSetID: number): { dataRows?: { value: number, relativeTime: number; }[][]; } {\r\n    if (this.admin != null) {\r\n      return this.admin.getDataRows(dataSetID);\r\n    }\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Gibt aus der geladenen Sprache die Nachrichten die über die IDs angegeben werden\r\n   * @param messageID alle IDs, von denen die Sprachnachricht geladen werden soll\r\n   * @returns alle Nachrichten, in der gleichen Reihenfolge wie angefordert\r\n   */\r\n  getMessage(messageID: number[]): { messageID: number, message: string; }[] {\r\n    return this.language.getMessage(messageID);\r\n  }\r\n\r\n  /**\r\n   * Gibt die auswählbaren Sensoren als ID mit ihrer Art in der Passenden Sprache zurück\r\n   */\r\n  getAvailableSensors(): { sensorTypID: number, sensorType: string; }[] {\r\n    if (this.user instanceof Dataminer) {\r\n      var sensors: { sensorTypID: number, sensorType: string; }[] = new Array();\r\n      let message: { messageID: number, message: string; }[] = this.language.getMessage(this.user.getAvailableSensors());\r\n      for (let i = 0; i < message.length; i++) {\r\n        sensors.push({ sensorTypID: message[i].messageID, sensorType: message[i].message });\r\n      }\r\n      return sensors;\r\n    }\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Lädt die Sprache aus der Datenbank mit dem übergebenen Sprachcode\r\n   * @param languageCode Sprachcode\r\n   * @returns true, falls die Sprache erfolgreich geladen wurde\r\n   */\r\n  setLanguage(languageCode: string): boolean {\r\n    if (languageCode != this.language.getLanguageCode()) {\r\n      let language: string[] = this.explorerConnector.loadLanguage(languageCode);\r\n      return this.language.setLanguage(language);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Gibt von allen in der Datenbank verfügbaren Sprachen den Sprachcode sowie den Sprachennamen zurück\r\n   */\r\n  getLanguageMetas(): { languageCode: number, languageName: string; }[] {\r\n    return this.explorerConnector.getLanguageMetas();\r\n  }\r\n\r\n  /**\r\n   * Gibt die Email vom Admin zurück, diese kann leer sein falls kein Admin angemeldet ist\r\n   */\r\n  getAdminEmail(): string {\r\n    if (this.admin != null) {\r\n      return this.admin.getEmail();\r\n    }\r\n    return \"\";\r\n  }\r\n\r\n  /**\r\n   * Löscht den Datensatz mit der übergebenen Datensatz ID\r\n   * @param dataSetID die Datensatz ID\r\n   * @returns true, wenn das löschen erfolgreich ist\r\n   */\r\n  deleteDataSet(dataSetID: number): boolean {\r\n    if (this.admin != null) {\r\n      let projectID: number = this.admin.deleteDataSet(dataSetID);\r\n      if (projectID >= 0) {\r\n        let adminEmail: string = this.getAdminEmail();\r\n        this.explorerConnector.deleteDataSet(adminEmail, projectID, dataSetID);\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  registerAdmin(adminName: string, email: string, password: string): boolean {\r\n    let IDs: { adminID: number, deviceID: number; } = this.explorerConnector.registerAdmin(adminName, email, password);\r\n    if (IDs.adminID >= 0) {\r\n      this.admin = new Admin(IDs.adminID, IDs.deviceID, adminName, email);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  registerDataminer(dataminerName: string, sessionID: number): boolean {\r\n    let dataminer: {\r\n      dataminerID: number, deviceID: number, project:\r\n      { projectID: number, projectName: string, sessionID: number; };\r\n    } = this.explorerConnector.registerDataminer(dataminerName, sessionID);\r\n    if (dataminer.dataminerID >= 0 && dataminer.deviceID >= 0) {\r\n      this.admin = new Admin(-1, -1, \"\", \"\");\r\n      this.admin.loadProject(dataminer.project);\r\n      this.user = new Dataminer(dataminer.dataminerID, dataminer.deviceID, dataminerName);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  loginAdmin(email: string, password: string): boolean {\r\n    if (this.admin == null) {\r\n      let adminData: {\r\n        admin?: {\r\n          adminID: number, deviceID: number, adminName: string, email: string,\r\n          device: { MACADRESS: string, deviceName: string, firmware: string, generation: string, deviceType: string; };\r\n        };\r\n      } = this.explorerConnector.loginAdmin(email, password);\r\n      if (adminData.admin != null) {\r\n        //Nur umbenennen von adminData.admin zu admin\r\n        let admin: { adminID: number, deviceID: number, adminName: string, email: string, device: { MACADRESS: string, deviceName: string, firmware: string, generation: string, deviceType: string; }; } = adminData.admin;\r\n\r\n        this.admin = new Admin(admin.adminID, admin.deviceID, admin.adminName, admin.email, admin.device);\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  logoutAdmin(): boolean {\r\n    if (this.admin != null) {\r\n      let logout = this.explorerConnector.logoutAdmin(this.getAdminEmail());\r\n      if (logout) {\r\n        delete this.admin;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  createProject(projectName: string): boolean {\r\n    if (this.admin != null) {\r\n      let project: { projectID: number, sessionID: number; } = this.explorerConnector.createProject(this.getAdminEmail(), projectName);\r\n      return this.admin.createProject(project.projectID, project.sessionID, projectName);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  setLabel(labelID: number, span: { start: number, end: number; }, labelName?: string): boolean {\r\n    if (this.admin != null) {\r\n      return this.admin.setLabel(labelID, span, labelName);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  getLabels(): { labels?: { name: string, id: number, start: number, end: number; }[]; } {\r\n    if (this.admin != null) {\r\n      return this.admin.getLabels();\r\n    }\r\n    return {};\r\n  }\r\n\r\n  classify(aiId: number, dataSetId: number, callBack: Function): void {\r\n    throw new Error(\"Not implemented\");\r\n  }\r\n\r\n  getAIModel(id: number, format: DeliveryFormat): object {\r\n    throw new Error(\"Not implemented\");\r\n  }\r\n\r\n  applyModel(modeldata: object): void {\r\n    throw new Error(\"Not implemented\");\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n  // wird aktuell nicht benutzt\r\n  // registerAIModelUser(aiModelUserName: string): boolean { }\r\n  // checkLogin(): boolean { }\r\n","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\State.tsx",["205","206","207","208","209"],"import { QRCode, ErrorCorrectLevel, QRNumber, QRAlphaNum, QR8BitByte, QRKanji } from 'qrcode-generator-ts/js';\r\n\r\nexport interface IState {\r\n  currentState: States;\r\n  languageCode: string;\r\n  messages: { text: string, id: number; }[];\r\n  //Anzeige aller Projekte eines nutzers\r\n  projectData?: { projectID: number, projectName: string, AIModelExist: boolean; }[];\r\n  // Das Projekt welches in der view ausgewählt wurde\r\n  currentProject?: { projectID: number, projectName: string, AIModels: string[]; };\r\n  adminData?: { name: string, email: string, password: string; };\r\n  //minerData?:\r\n  aiUserData?: { name: string, result: string; };\r\n  labels?: { labelID: number, start: number, end: number; }[];\r\n  sessionID?: string;\r\n  //aiParameter?: \r\n  dataPoints?: { dataRowID: number, value: number; }[];\r\n  dataRows?: { dataSetID: number, data: number[][][]; };\r\n  dataSets?: { sensorTypes: string[], dataSetName: string; }[];\r\n  qr?: QRCode;\r\n  recordingSettings?: { newDataSetName: string, usedSensorTypes: string[], readTime: number, waitTime: number; };\r\n}\r\n\r\nexport enum States {\r\n  NeedMessage,\r\n  /**\r\n   * Wechsel zur Startseite\r\n   */\r\n  ChangeToStart,\r\n  ChangeToFinish,\r\n  NeedQR,\r\n  SetLanguage,\r\n  /**\r\n   * Fehler für alle zu ladenen sachen\r\n   */\r\n  LoadError,\r\n  Login,\r\n  /**\r\n     * Update aller Daten welche auf der Seite angezeigt werden, zum Beispiel Projekt Daten für die Projekt liste.\r\n     */\r\n  updateData,\r\n  NewProjekt,\r\n  LoadModel,\r\n  LoginFail,\r\n  StartDataRead,\r\n  ChangeToRefferring,\r\n  ClassifyResult,\r\n  NeedDataRows,\r\n  ChangeLabel,\r\n  DeleteDataLabel,\r\n  NewLabel\r\n}\r\n\r\n/**  BEISPIEL\r\nexport class test implements IState {\r\n  currentState: States = States.ChangePage;\r\n  languageCode: string = \"de\";\r\n  messageIDs: number[] = [0, 1];\r\n  messages: string[] = [];\r\n  ...\r\n}\r\n*/","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\index.tsx",["210","211","212"],"import React, { Component } from 'react';\r\nimport PubSub from 'pubsub-js'\r\nimport ConstantsText from '../../components/ReferringComponents/ConstantsText';\r\nimport NewProjectButton from '../../components/ReferringComponents/NewProjectButton';\r\nimport LoginButton from '../../components/ReferringComponents/LoginButton';\r\nimport LoadModelButton from '../../components/ReferringComponents/LoadModelButton';\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport { MainController } from '../../../controller/MainController';\r\nimport ReactDOM from 'react-dom';\r\nimport { States } from '../State';\r\n\r\ntype Props = {\r\n\r\n};\r\n\r\nexport class ReferringPage extends React.Component<Props, State> implements Page {\r\n\r\n    //change status\r\n    //state: State;\r\n\r\n    //this.state.currentState = States.NewProjekt;\r\n    state = new State();\r\n    observers: PageController[] = [];\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.needqr()\r\n        const VDOM = (\r\n            <div>\r\n                <ConstantsText />\r\n                <NewProjectButton />\r\n                <LoginButton />\r\n                <LoadModelButton />\r\n            </div>\r\n        );\r\n        ReactDOM.render(VDOM, document.getElementById('root'));\r\n    }\r\n\r\n    attach(observer: PageController) {\r\n        this.observers.push(observer);\r\n    }\r\n\r\n    detach(observer: PageController) {\r\n        const index = this.observers.indexOf(observer, 0);\r\n        if (index > -1) {\r\n            this.observers.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    notify() {\r\n        for (let index = 0; index < this.observers.length; index++) {\r\n            const element = this.observers[index];\r\n            element.update();\r\n        }\r\n    }\r\n\r\n    getState() {\r\n        return this.state;\r\n    }\r\n\r\n    needqr() {\r\n        PubSub.subscribe('needqr', (msg: any, data: any) => {\r\n            // console.log(this.state.currentState)\r\n            this.state.currentState = States.NeedQR\r\n            //console.log(this.state.currentState)\r\n            this.notify()\r\n            //console.log(this.state.currentState)\r\n        })\r\n\r\n    }\r\n}\r\n",["213","214"],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Language.tsx",["215"],"/**\r\n * In dieser Klasse wird die aktuell geladene Sprache sowie alle Nachrichten auf dieser Sprache gespeichert.\r\n */\r\nexport class Language {\r\n  private language: string[]; //Alle Nachrichten auf der geladenen Sprache\r\n\r\n  /**\r\n   * \r\n   * @param language Alle Nachrichten auf der zu ladenden Sprache, Stelle 0 ist der Sprachencode und Stelle 1 ist der Sprachenname\r\n   */\r\n  constructor(language: string[]) {\r\n    this.language = language;\r\n  }\r\n\r\n  /**\r\n   * Gibt den Sprachen Code zurück\r\n   */\r\n  getLanguageCode(): string {\r\n    if (this.language.length > 0) {\r\n      return this.language[0];\r\n    }\r\n    return \"\";\r\n  }\r\n\r\n  /**\r\n   * Gibt aus der geladenen Sprache die Nachrichten die über die IDs angegeben werden.\r\n   * @param id Array von den IDs, von denen die Nachricht geladen werden soll\r\n   * @returns id mit der Nachricht in der gleichen Reihenfolge, wie angefordert.\r\n   */\r\n  getMessage(id: number[]): { messageID: number, message: string; }[] {\r\n    var messages: { messageID: number, message: string; }[] = new Array();\r\n    for (let i = 0; i < id.length; i++) {\r\n      if (this.language.length > id[i]) {\r\n        messages.push({ messageID: id[i], message: this.language[id[i]] });\r\n      } else {\r\n        messages.push({ messageID: id[i], message: \"\" });\r\n      }\r\n    }\r\n    return messages;\r\n  }\r\n\r\n  /**\r\n   * Setzt eine neue Sprache\r\n   * @param language die neue Sprache die geladen werden soll, Stelle 0 ist der Sprachencode und Stelle 1 ist der Sprachenname\r\n   */\r\n  setLanguage(language: string[]): boolean {\r\n    if (language.length >= 2) {\r\n      this.language = language;\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n\r\n  }\r\n}","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\User.tsx",["216","217","218","219"],"import { Device, Smartphone } from \"./Device\";\r\nimport { Project } from \"./Project\";\r\nimport { SensorData } from \"./Sensor\";\r\n\r\n/**\r\n * Die Vorlage für alle existierenden Benutzer\r\n */\r\nexport abstract class User {\r\n  protected id: number; //Die eindeutige User ID\r\n  protected name: string; //Der Name des Users\r\n  protected abstract device?: Device; //Das Benutzergerät des Benutzers\r\n\r\n  /**\r\n   * Erstellt einen Benutzer\r\n   * @param id eindeutige Benutzer ID\r\n   * @param name Name des Benutzer\r\n   */\r\n  constructor(id: number, name: string) {\r\n    this.id = id;\r\n    this.name = name;\r\n  }\r\n\r\n  /**\r\n   * Setzt einen neuen Benutzernamen\r\n   * @param name der neue Benutzername\r\n   */\r\n  setName(name: string): void {\r\n    this.name = name;\r\n  }\r\n\r\n  /**\r\n   * Gibt den Benutzernamen zurück\r\n   */\r\n  getName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  /**\r\n   * Setzt ein neues Benutzergerät\r\n   * @param device das Benutzergerät\r\n   */\r\n  setDevice(device: Device) {\r\n    this.device = device;\r\n  }\r\n\r\n  /**\r\n   * Gibt falls ein Benutzergerät verfügbar ist dieses zurück\r\n   */\r\n  getDevice(): { device?: Device; } {\r\n    return { device: this.device };\r\n  }\r\n\r\n  /**\r\n   * Gibt die Benutzer ID zurück\r\n   */\r\n  getID(): number {\r\n    return this.id;\r\n  }\r\n}\r\n\r\n/**\r\n * Die Klasse Admin dient für einen Benutzer mit einem Account\r\n */\r\nexport class Admin extends User {\r\n  protected device: Device; //Das Benutzergeräts des Admins\r\n  private email: string; //Die eindeutige Admin Email\r\n  private project: Project[] = new Array(); //Alle Projekte, die zu dem Admin gehören\r\n  private currentProject?: Project;\r\n\r\n  /**\r\n   * Zum erstellen eines Admins\r\n   * @param adminID die Admin ID\r\n   * @param deviceID die Geräte ID des Admins\r\n   * @param adminName der Name des Admins\r\n   * @param email die Emailadresse des Admins\r\n   */\r\n  constructor(adminID: number, deviceID: number, adminName: string, email: string);\r\n\r\n  /**\r\n   * Für die Implementierung eines Bestehenden Admins\r\n   * @param adminID die Admin ID\r\n   * @param deviceID die Geräte ID\r\n   * @param adminName der Admin Name\r\n   * @param email die Emailadresse des Admins\r\n   * @param device das Gerät des Admins\r\n   */\r\n  constructor(adminID: number, deviceID: number, adminName: string, email: string,\r\n    device: { MACADRESS: string, deviceName: string, firmware: string, generation: string, deviceType: string; });\r\n\r\n  constructor(adminID: number, deviceID: number, adminName: string, email: string,\r\n    device?: { MACADRESS: string, deviceName: string, firmware: string, generation: string, deviceType: string; }) {\r\n    super(adminID, adminName);\r\n    this.email = email;\r\n    this.device = Device.loadDevice(deviceID, device);\r\n  }\r\n\r\n  /**\r\n   * Lädt ein bestehendes Projekt in das Model\r\n   * @param project das Projekt des Admins\r\n   * @returns false, falls die Projekt ID schon existiert\r\n   */\r\n  loadProject(project: {\r\n    projectID: number, sessionID: number, projectName: string, projectData?: {\r\n      aiModelID: number[],\r\n      dataSet: {\r\n        dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate: number,\r\n        dataRows: {\r\n          dataRowID: number, recordingStart: number,\r\n          dataRow: { value: number, relativeTime: number; }[];\r\n        }[],\r\n        label: { name: string, labelID: number, start: number, end: number; }[];\r\n      }[];\r\n    };\r\n  }): boolean {\r\n    if (!this.existProject(project.projectID)) {\r\n      if (project.projectData != null) {\r\n        this.project.push(new Project(project.projectID, project.sessionID, project.projectName, this, project.projectData.aiModelID, project.projectData.dataSet));\r\n      } else {\r\n        this.project.push(new Project(project.projectID, project.sessionID, project.projectName, this));\r\n      }\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gibt vom aktuellen Projekt die aktuelle Datensatz ID zurück, falls diese nicht existiert wird -1 zurück gegeben.\r\n   */\r\n  getCurrentDataSetID(): number {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.getCurrentDataSetID();\r\n    } else {\r\n      return -1;\r\n    }\r\n  }\r\n\r\n  getCurrentProjectID(): number {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.getID();\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Liest vom aktuellen Project und Datensatz die aktuellen Sensordaten von dem Sensor mit der Datenreihen ID\r\n   * @param dataRowID die Datenreihen ID\r\n   */\r\n  readDataPoint(dataRowID: number): { dataPoint?: { value: number, relativeTime: number; }; } {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.readDataPoint(dataRowID);\r\n    }\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Fügt ein neues Projekt mit den übergebenen Parametern hinzu und setzt dieses Projekt als aktuelles Projekt\r\n   * @param projectID die Projekt ID, diese muss für den Admin eindeutig sein\r\n   * @param sessionID die Session ID, diese muss global eindeutig sein\r\n   * @param projectName der Name des Projektes\r\n   * @returns Bei angabe einer Project ID, die schon existiert wird false zurück gegeben\r\n   */\r\n  createProject(projectID: number, sessionID: number, projectName: string): boolean {\r\n    if (!this.existProject(projectID)) {\r\n      var newproject: Project = new Project(projectID, sessionID, projectName, this);\r\n      this.project.push(newproject);\r\n      this.currentProject = newproject;\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gibt von allen Datensätzen vom aktuellen Projekt Informationen zurück\r\n   * @returns dataSetID ist die DatensatzID und dataSetName ist der Datensatzname\r\n   */\r\n  getDataSetMetas(): { dataSetID: number, dataSetName: string; }[] {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.getDataSetMetas();\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gibt vom aktuellen Projekt die Datenreihen der Datensatz ID zurück und setzt diesen Datensatz als aktuellen Datensatz\r\n   * @param dataSetID die Datensatz ID von der die Datenreihen gelesen werden sollen\r\n   * @returns die Sensordaten von der Datenreihe\r\n   */\r\n  getDataRows(dataSetID: number): { dataRows?: { value: number, relativeTime: number; }[][]; } {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.getDataRows(dataSetID);\r\n    } else {\r\n      return {};\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gibt vom aktuellen Projekt die Datenreihen des aktuellen Datensatzes zurück\r\n   * @param dataSetID die Datensatz ID von der die Datenreihen gelesen werden sollen\r\n   * @returns die Sensordaten von der Datenreihe\r\n   */\r\n  getCurrentDataRows(): { dataRows?: { value: number, relativeTime: number; }[][]; } {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.getCurrentDataRows();\r\n    } else {\r\n      return {};\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gibt die Session ID des aktuellen Projekts zurück, -1 falls kein aktuelles Projekt existiert\r\n   */\r\n  getSessionID(): number {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.getSessionID();\r\n    } else {\r\n      return -1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gibt die Admin Emailadresse zurück\r\n   */\r\n  getEmail(): string {\r\n    return this.email;\r\n  }\r\n\r\n  /**\r\n     * Erstellt für das aktuelle Projekt einen neuen Datensatz und setzt diesen als aktuellen Datensatz.\r\n     * @param dataRowSensors die Sensoren, von denen die Daten ausgelesen werden\r\n     * @param dataSetID die eindeutige Datensatz ID\r\n     * @param dataSetName der Datensatznamen\r\n     * @param generateDate die Erstellungszeit von dem Datensatz\r\n     * @returns false, falls kein aktuelles Prokekt existiert\r\n     */\r\n  createDataSet(dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate?: number): boolean {\r\n    if (this.currentProject != null) {\r\n      this.currentProject.createDataSet(dataRowSensors, dataSetID, dataSetName, generateDate);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Löscht vom aktuellen Projekt den Datensatz, mit der übergebenen Datensatz ID\r\n   * @param dataSetID die Datensatz ID\r\n   * @returns false, falls der Datensatz mit der ID nicht existiert oder kein aktuelles Projekt existiert\r\n   */\r\n  deleteDataSet(dataSetID: number): number {\r\n    if (this.currentProject != null) {\r\n      let datasetExist: boolean = this.currentProject.deleteDataSet(dataSetID);\r\n      if (datasetExist) {\r\n        return this.currentProject.getID();\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Erstellt für das aktuelle Projekt und dem aktuellen Datensatz ein Label mit den übergebeben Parametern\r\n   * @param labelID Ist die eindeutige Label ID des Labels.\r\n   * @param start Ist die Startzeit des Labels.\r\n   * @param end Ist die Endzeit des Labels.\r\n   * @returns false, falls kein aktueller Datensatz existiert oder die LabelID für diesen Datensatz nicht eindeutig ist\r\n   */\r\n  createLabel(labelID: number, start: number, end: number): boolean {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.createLabel(labelID, start, end);\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setzt beim aktuellen Datensatz dem Label mit der LabelID die neu übergebenen Daten\r\n   * @param labelID \r\n   * @param start startzeit des Labels in Millisekunden\r\n   * @param end endzeit des Labels in Millisekunden\r\n   */\r\n  setLabel(labelID: number, span: { start: number, end: number; }, labelName?: string): boolean {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.setLabel(labelID, span, labelName);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Löscht von dem aktuellen Projekt und dem aktuellen Datensatz das Label mit der Label ID\r\n   * @param labelID die Label ID\r\n   * @returns false, falls kein aktueller Datensatz existiert oder kein Label mit der Label ID existiert\r\n   */\r\n  deleteLabel(labelID: number): boolean {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.deleteLabel(labelID);\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gibt alle Daten von allen Labeln vom aktuellen Datensatz zurück.\r\n   * @returns leer, falls kein aktueller Datensatz existiert\r\n   */\r\n  getLabels(): { labels?: { name: string, id: number, start: number, end: number; }[]; } {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.getLabels();\r\n    }\r\n    return {};\r\n  }\r\n\r\n  existProject(projectID: number): boolean {\r\n    for (let i = 0; i < this.project.length; i++) {\r\n      if (this.project[i].getID() == projectID) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Dataminer ist die Klasse, um Datensammler mit ihren Geräte Sensoren zu spreichern\r\n */\r\nexport class Dataminer extends User {\r\n  protected device: Device; //Das Gerät des Datensammlers\r\n\r\n  /**\r\n   * Erstellt einen Datensammler\r\n   * @param id die Benutzer ID\r\n   * @param name der Benutzername\r\n   * @param deviceID die Geräte ID\r\n   */\r\n  constructor(id: number, deviceID: number, name?: string) {\r\n    if (name != null) {\r\n      super(id, name);\r\n      this.device = Device.loadDevice(deviceID);\r\n    } else {\r\n      let dataDevice = Device.loadDevice(deviceID);\r\n      super(id, dataDevice.getName());\r\n      this.device = dataDevice;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gibt alle Sensoren aus, die das Benutzergerät und das Programm unterstützt\r\n   */\r\n  getDeviceSensors(sensorTypeID: number[]): SensorData[] {\r\n    return this.device.getSensors(sensorTypeID);\r\n  }\r\n\r\n  /**\r\n   * Gibt die SensorTypID der auswählbaren Sensoren zurück\r\n   */\r\n  getAvailableSensors(): number[] {\r\n    return this.device.getAvailableSensors();\r\n  }\r\n}\r\n\r\n/**\r\n * AIModelUser ist die Klasse, um KI-Modell Benutzer zu speichern\r\n */\r\nexport class AIModelUser extends User {\r\n  protected device?: Device; //Das Gerät des KI-Modell Benutzers falls es gespeichert wird\r\n\r\n  /**\r\n   * Erstellt einen KI-Modell Benutzer, wenn Name \"\" gesetzt ist und eine Geräte ID gesetzt ist wird als Name der Geräte Name gewählt\r\n   * @param id die eindeutige Benutzer ID\r\n   * @param name der Benutzername\r\n   * @param deviceID die Geräte ID\r\n   */\r\n  constructor(id: number, name: string, deviceID?: number) {\r\n    super(id, name);\r\n    if (deviceID != null) {\r\n      this.device = Device.loadDevice(deviceID);\r\n      if (name == \"\") {\r\n        this.name = this.device.getName();\r\n      }\r\n    }\r\n  }\r\n}","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\ExplorerConnector.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Device.tsx",["220","221"],"import { AccelerometerData, SensorData } from \"./Sensor\";\r\n\r\nexport abstract class Device {\r\n  private id: number;\r\n  private MACADDRESS: string;\r\n  private name: string;\r\n  private firmware: string;\r\n  private generation: string;\r\n  private deviceType: string;\r\n\r\n  constructor(deviceID: number);\r\n  constructor(deviceID: number, MACADRESS: string, deviceName: string, firmware: string, generation: string);\r\n\r\n\r\n  //nicht fertig !!!!!\r\n  constructor(deviceID: number, MACADRESS?: string, deviceName?: string, firmware?: string, generation?: string) {\r\n    this.id = deviceID;\r\n    this.MACADDRESS = \"\";\r\n    this.name = \"\";\r\n    this.firmware = \"\";\r\n    this.generation = \"\";\r\n    this.deviceType = \"\";\r\n  }\r\n\r\n\r\n  getName(): string {\r\n    return this.name;\r\n  }\r\n  getMACADDRESS(): string {\r\n    return this.MACADDRESS;\r\n  }\r\n  getFirmware(): string {\r\n    return this.firmware;\r\n  }\r\n  getGeneration(): string {\r\n    return this.generation;\r\n  }\r\n  getSensors(sensorTypeID: number[]): SensorData[] {\r\n    return [];\r\n  }\r\n  getSensor(id: number): SensorData {\r\n    return new AccelerometerData(this.id, this.MACADDRESS, this.name);\r\n  }\r\n\r\n  /**\r\n   * Gibt alle Sensoren aus, die das Benutzergerät und das Programm unterstützt\r\n   */\r\n  getAvailableSensors(): number[] {\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Prüft das aktuelle Gerät auf\r\n   */\r\n  static loadDevice(deviceID: number, device?: { MACADRESS: string, deviceName: string, firmware: string, generation: string, deviceType: string; }): Device {\r\n    return new Smartphone(-1);\r\n  }\r\n\r\n\r\n  protected abstract searchSensor(): void;\r\n\r\n}\r\n\r\nexport class Smartphone extends Device {\r\n  constructor(deviceID: number) {\r\n    super(deviceID);\r\n  }\r\n  protected searchSensor(): void { }\r\n}\r\n\r\nexport class Desktop extends Device {\r\n  constructor(deviceID: number) {\r\n    super(deviceID);\r\n  }\r\n  protected searchSensor(): void { }\r\n}","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Project.tsx",["222","223","224","225","226","227","228","229"],"import { AIModel } from \"./AIModel\";\r\nimport { DataRow } from \"./DataRow\";\r\nimport { DataSet } from \"./DataSet\";\r\nimport { AccelerometerData, SensorData } from \"./Sensor\";\r\nimport { Session } from \"./Session\";\r\nimport { Admin } from \"./User\";\r\n\r\n/**\r\n * Diese Klasse speichert alle Informationen zu einem Projekt.\r\n * Ein Projekt beinhaltet aufgezeichnete Datensätze (DataSet) sowie Informationen zu den Datensätzen.\r\n */\r\nexport class Project {\r\n  private id: number; //Die eindeutige Projekt ID\r\n  private name: string; //Der Name des Projektes\r\n  private session: Session; //Die Session in dem das Projekt arbeitet\r\n  private aiModel: AIModel[] = new Array(); //Das AIModel von dem Projekt\r\n  private dataSet: DataSet[] = new Array(); //Die Datensätze, die zu dem Projekt gehören\r\n  private currentDataSet?: DataSet; //Aktueller Datensatz\r\n\r\n\r\n  /**\r\n   * Erstellt ein neues Projekt mit den angegebenen Parametern\r\n   * @param projectID Die Projekt ID\r\n   * @param sessionID Die global eindeutige Session ID\r\n   * @param projectName Der Projektnamen\r\n   * @param admin Der Admin, dem das Projekt gehört\r\n   */\r\n  constructor(projectID: number, sessionID: number, projectName: string, admin: Admin);\r\n\r\n  /**\r\n   * Eine bereits existierendes Projekt kann wie folgt in das Model geladen werden.\r\n   * @param projectID Die Projekt ID\r\n   * @param sessionID Die Session ID\r\n   * @param projectName Der Projektnamen\r\n   * @param admin Der Besitzer dieses Projekts für die Session\r\n   * @param aiModelID Die schon existierenden AIModel IDs\r\n   * @param dataSet Die schon existierenden Datensätze\r\n   */\r\n  constructor(projectID: number, sessionID: number, projectName: string, admin: Admin, aiModelID: number[],\r\n    dataSet: {\r\n      dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate: number,\r\n      dataRows: {\r\n        dataRowID: number, recordingStart: number,\r\n        dataRow: { value: number, relativeTime: number; }[];\r\n      }[],\r\n      label: { name: string, labelID: number, start: number, end: number; }[];\r\n    }[]);\r\n\r\n  constructor(projectID: number, sessionID: number, projectName: string, admin: Admin, aiModelID?: number[],\r\n    dataSet?: {\r\n      dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate: number,\r\n      dataRows: {\r\n        dataRowID: number, recordingStart: number,\r\n        dataRow: { value: number, relativeTime: number; }[];\r\n      }[],\r\n      label: { name: string, labelID: number, start: number, end: number; }[];\r\n    }[]) {\r\n    this.id = projectID;\r\n    this.name = projectName;\r\n    this.session = new Session(sessionID, admin);\r\n    if (aiModelID != null) {\r\n      for (let i = 0; i < aiModelID.length; i++) {\r\n        this.aiModel.push(new AIModel(aiModelID[i]));\r\n      }\r\n    }\r\n    if (dataSet != null) {\r\n      for (let i = 0; i < dataSet.length; i++) {\r\n        this.dataSet.push(new DataSet(dataSet[i].dataRowSensors, dataSet[i].dataSetID, dataSet[i].dataSetName, dataSet[i].generateDate, dataSet[i].dataRows, dataSet[i].label));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gibt den Projektnamen zurück\r\n   */\r\n  getName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  /**\r\n   * Löscht den Datensatz mit der DatensatzID\r\n   * @param dataSetID die Datensatz ID\r\n   */\r\n  deleteDataSet(dataSetID: number): boolean {\r\n    for (let i = 0; i < this.dataSet.length; i++) {\r\n      if (this.dataSet[i].getID() == dataSetID) {\r\n        delete this.dataSet[i];\r\n        if (this.currentDataSet != null && this.currentDataSet.getID() == dataSetID) {\r\n          delete this.currentDataSet;\r\n        }\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Gibt die Projekt ID zurück.\r\n   */\r\n  getID(): number {\r\n    return this.id;\r\n  }\r\n\r\n\r\n  /**\r\n   * Erstellt einen neuen Datensatz und setzt diesen als aktuellen Datensatz.\r\n   * @param dataRowSensors die Sensoren, von denen die Daten ausgelesen werden\r\n   * @param dataSetID die eindeutige Datensatz ID\r\n   * @param dataSetName der Datensatznamen\r\n   * @param generateDate die Erstellungszeit von dem Datensatz\r\n   */\r\n  createDataSet(dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate?: number): void {\r\n    var dataSet: DataSet = new DataSet(dataRowSensors, dataSetID, dataSetName, generateDate);\r\n    this.dataSet.push(dataSet);\r\n    this.currentDataSet = dataSet;\r\n  }\r\n\r\n  /**\r\n   * Gibt die aktuelle Datensatz ID zurück, falls diese nicht existiert wird -1 zurück gegeben\r\n   */\r\n  getCurrentDataSetID(): number {\r\n    if (this.currentDataSet != null) {\r\n      return this.currentDataSet.getID();\r\n    }\r\n    return -1;\r\n\r\n  }\r\n\r\n  /**\r\n   * Liest von dem aktuellen Datensatz neue Sensordaten von der Datenreihe mit der Datenreihen ID\r\n   * @param dataRowID die Datenreihen ID, von der die Daten ausgelesen werden sollen.\r\n   * @returns die gelesenen Daten von der Datenreihe. Falls die Datenreihe nicht existiert oder kein aktueller Datensatz existiert, sind die Daten leer.\r\n   */\r\n  readDataPoint(dataRowID: number): { dataPoint?: { value: number, relativeTime: number; }; } {\r\n    if (this.currentDataSet != null) {\r\n      return this.currentDataSet.readDataPoint(dataRowID);\r\n    }\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Gibt von allen Datensätzen Informationen zurück\r\n   * @returns dataSetID ist die DatensatzID und dataSetName ist der Datensatzname\r\n   */\r\n  getDataSetMetas(): { dataSetID: number, dataSetName: string; }[] {\r\n    var dataSetMetas: { dataSetID: number, dataSetName: string; }[] = new Array();\r\n    for (let i = 0; i < this.dataSet.length; i++) {\r\n      dataSetMetas.push({ dataSetID: this.dataSet[i].getID(), dataSetName: this.dataSet[i].getName() });\r\n    }\r\n    return dataSetMetas;\r\n  }\r\n\r\n  /**\r\n   * Gibt die Datenreihen der Datensatz ID zurück und setzt diesen Datensatz als aktuellen Datensatz\r\n   * @param dataSetID die Datensatz ID von der die Datenreihen gelesen werden sollen\r\n   * @returns die Sensordaten von der Datenreihe\r\n   */\r\n  getDataRows(dataSetID: number): { dataRows?: { value: number, relativeTime: number; }[][]; } {\r\n    for (let i = 0; i < this.dataSet.length; i++) {\r\n      if (this.dataSet[i].getID() == dataSetID) {\r\n        this.currentDataSet = this.dataSet[i];\r\n        return { dataRows: this.dataSet[i].getDataRows() };\r\n      }\r\n    }\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Gibt die Datenreihen der aktuellen Datenreihe zurück\r\n   * @returns die Sensordaten von der Datenreihe\r\n   */\r\n  getCurrentDataRows(): { dataRows?: { value: number, relativeTime: number; }[][]; } {\r\n    if (this.currentDataSet != null) {\r\n      return { dataRows: this.currentDataSet.getDataRows() };\r\n    }\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Gibt die Session ID zurück\r\n   */\r\n  getSessionID(): number {\r\n    return this.session.getId();\r\n  }\r\n\r\n  /**\r\n   * Setzt dem Label mit der übergebenen ID neue Werte.\r\n   * @param start Ist die neue Startzeit des Labels.\r\n   * @param end Ist die neue Endzeit des Labels.\r\n   * @param labelID Die Label ID, welche überarbeitet werden soll.\r\n   * @param labelName Ist bei Angabe der neue Name des Labels.\r\n   * @returns falls das Label nicht existiert oder es kein aktuellen Datensatz gibt wird false zurück gegeben\r\n   */\r\n  createLabel(start: number, end: number, labelID: number, labelName?: string): boolean {\r\n    if (this.currentDataSet != null) {\r\n      return this.currentDataSet.setLabel(labelID, { start, end }, labelName);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  setLabel(labelID: number, span: { start: number, end: number; }, labelName?: string): boolean {\r\n    if (this.currentDataSet != null) {\r\n      return this.currentDataSet.setLabel(labelID, span, labelName);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  deleteLabel(labelID: number): boolean {\r\n    if (this.currentDataSet != null) {\r\n      return this.currentDataSet.deleteLabel(labelID);\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gibt alle Daten von allen Labeln vom aktuellen Datensatz zurück.\r\n   * @returns leer, falls kein aktueller Datensatz existiert\r\n   */\r\n  getLabels(): { labels?: { name: string, id: number, start: number, end: number; }[]; } {\r\n    if (this.currentDataSet != null) {\r\n      return { labels: this.currentDataSet.getLabels() };\r\n    }\r\n    return {};\r\n  }\r\n}","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\NewProjectButton\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ConstantsText\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoadModelButton\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoginButton\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Sensor.tsx",["230"],"import { Device } from \"./Device\";\r\n\r\n//Die abstrakte Klasse Sensor liefert den Bauplan und die gemeinsame Funktionalität aller Sensoren.\r\nexport abstract class SensorData {\r\n  id: number; //Dieses Feld enthält die laufende Nummer des Sensors, diese ist in Device eindeutig und ist Konstant.\r\n  abstract SensorTypeID: number; //Dies ist die global eindeutige ID für die Sensorart\r\n  MACADDRESS: string; //Ist die MAC-adresse des Gerätes um es später wieder zuweisen zu können\r\n  deviceName: string; //Der Name vom Erfassungsgerät\r\n  abstract sensor: Sensor;\r\n\r\n  constructor(id: number, MACADDRESS: string, deviceName: string) {\r\n    this.id = id;\r\n    this.MACADDRESS = MACADDRESS;\r\n    this.deviceName = deviceName;\r\n  }\r\n\r\n  getSensor(): Sensor {\r\n    return this.sensor;\r\n  }\r\n\r\n  getSensorData(): { id: number, SensorTypeID: number, MACADDRESS: string, deviceName: string, sensor: Sensor; } {\r\n    return { id: this.id, SensorTypeID: this.SensorTypeID, MACADDRESS: this.MACADDRESS, deviceName: this.deviceName, sensor: this.sensor };\r\n  }\r\n\r\n  //nur anti error!\r\n  getCurrentValue(): number {\r\n    return -1;\r\n  }\r\n}\r\n\r\n//Diese Klasse ist eine Unterklasse von der abstrakten Klasse SensorData und ist für die Sensoren der Kategorie Beschleunigungssensor bestimmt\r\nexport class AccelerometerData extends SensorData {\r\n  SensorTypeID: number = 2;\r\n  sensor: Accelerometer;\r\n\r\n  //Dies ist der Konstruktor und nimmt eine eindeutige Sensor-ID entgegen\r\n  constructor(id: number, macaddress: string, deviceName: string) {\r\n    super(id, macaddress, deviceName);\r\n    this.sensor = new Accelerometer({ frequency: 1000 });\r\n  }\r\n\r\n  checkPermission() {\r\n    navigator.permissions.query({ name: \"accelerometer\" }).then(({ state }) => {\r\n      switch (state) {\r\n        case \"granted\":\r\n          break;\r\n        case \"prompt\":\r\n          break;\r\n        default:\r\n          // Don’t do anything if the permission was denied.\r\n          break;\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n//Diese Klasse ist eine Unterklasse von der abstrakten Klasse SensorData und ist für die Sensoren der Kategorie Kreiselinstrument bestimmt.\r\nexport class GyroscopeData extends SensorData {\r\n  SensorTypeID: number = 3;\r\n  sensor: Gyroscope;\r\n\r\n  //Dies ist der Konstruktor und nimmt eine eindeutige Sensor-ID entgegen\r\n  constructor(id: number, macaddress: string, deviceName: string) {\r\n    super(id, macaddress, deviceName);\r\n    this.sensor = new Gyroscope({ frequency: 1000 });\r\n  }\r\n}\r\n\r\nexport class MagnetometerData extends SensorData {\r\n  SensorTypeID: number = 4;\r\n  sensor: Magnetometer;\r\n\r\n  //Dies ist der Konstruktor und nimmt eine eindeutige Sensor-ID entgegen\r\n  constructor(id: number, macaddress: string, deviceName: string) {\r\n    super(id, macaddress, deviceName);\r\n    this.sensor = new Magnetometer({ frequency: 1000 });\r\n\r\n  }\r\n}\r\n/*\r\nexport class Microphone extends SensorData {\r\n  option: { audio: boolean, video: boolean; } = { audio: true, video: false };\r\n\r\n  start() {\r\n    if (navigator.mediaDevices === undefined) {\r\n      navigator.mediaDevices = {};\r\n      navigator.mediaDevices.getUserMedia = function (constraintObj) {\r\n        let getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\r\n        if (!getUserMedia) {\r\n          return Promise.reject(new Error('getUserMedia is not implemented in this browser'));\r\n        }\r\n        return new Promise(function (resolve, reject) {\r\n          getUserMedia.call(navigator, constraintObj, resolve, reject);\r\n        });\r\n      };\r\n    } else {\r\n      navigator.mediaDevices.enumerateDevices()\r\n        .then(devices => {\r\n          devices.forEach(device => {\r\n            console.log(device.kind.toUpperCase(), device.label);\r\n            //, device.deviceId\r\n          });\r\n        })\r\n        .catch(err => {\r\n          console.log(err.name, err.message);\r\n        });\r\n    }\r\n    navigator.mediaDevices.getUserMedia(this.option)\r\n      .then(function (mediaStreamObj) {\r\n        //connect the media stream to the first video element\r\n        let video = document.querySelector('video');\r\n        if (\"srcObject\" in video) {\r\n          video.srcObject = mediaStreamObj;\r\n        } else {\r\n          //old version\r\n          video.src = window.URL.createObjectURL(mediaStreamObj);\r\n        }\r\n\r\n        video.onloadedmetadata = function (ev) {\r\n          //show in the video element what is being captured by the webcam\r\n          video.play();\r\n        };\r\n\r\n        //add listeners for saving video/audio\r\n        let start = document.getElementById('btnStart');\r\n        let stop = document.getElementById('btnStop');\r\n        let vidSave = document.getElementById('vid2');\r\n        let mediaRecorder = new MediaRecorder(mediaStreamObj);\r\n        let chunks = [];\r\n\r\n        start.addEventListener('click', (ev) => {\r\n          mediaRecorder.start();\r\n          console.log(mediaRecorder.state);\r\n        });\r\n        stop.addEventListener('click', (ev) => {\r\n          mediaRecorder.stop();\r\n          console.log(mediaRecorder.state);\r\n        });\r\n        mediaRecorder.ondataavailable = function (ev) {\r\n          chunks.push(ev.data);\r\n        };\r\n        mediaRecorder.onstop = (ev) => {\r\n          let blob = new Blob(chunks, { 'type': 'video/mp4;' });\r\n          chunks = [];\r\n          let videoURL = window.URL.createObjectURL(blob);\r\n          vidSave.src = videoURL;\r\n        };\r\n      })\r\n      .catch(function (err) {\r\n        console.log(err.name, err.message);\r\n      });\r\n  }\r\n}\r\n\r\n*/\r\n//ToDo microphone + permisssion + Licences\r\n\r\n//https://www.youtube.com/watch?v=K6L38xk2rkk video für microphone/ erklärung für getUserMedia und MediaRecorder (damit kann man mikrofon und Kamera aufnehmen)\r\n//https://developer.mozilla.org/en-US/docs/Web/API/MediaStream_Recording_API/Recording_a_media_element\r\n\r\n\r\n/*\r\n\"accelerometer\",\r\n\"gyroscope\",\r\n\"magnetometer\",\r\n\"camera\",\r\n\"microphone\",\r\n*/","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\AIModel.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\DataSet.tsx",["231","232","233","234","235","236","237","238","239"],"import { DataRow } from \"./DataRow\";\r\nimport { Label } from \"./Label\";\r\nimport { SensorData } from \"./Sensor\";\r\n\r\n/**\r\n * Die Klasse fasst Datenreihen, welche Sensorwerte und deren relative Zeit besitzen, zu einem Datensatz zusammen.\r\n */\r\nexport class DataSet {\r\n  private generateDate: number; //Dies ist die Erstellungszeit dieses Datensatzes in Millisekunden.\r\n  private id: number; //Dies ist die Datensatz ID.\r\n  private name: string; //Dies ist der Name des Datensatzes.\r\n  private dataRow: DataRow[] = new Array(); //Dies sind die Datenreihen, welche zu dem Datensatz gehören.\r\n  private label: Label[] = new Array(); //Dies sind die existierenden Labels für den Datensatz.\r\n\r\n\r\n  /**\r\n   * Erstellt einen neuen Datensatz.\r\n   * @param dataRowSensors die Sensoren, von denen die Daten ausgelesen werden\r\n   * @param dataSetID die eindeutige Datensatz ID\r\n   * @param dataSetName der Datensatznamen\r\n   * @param generateDate die Erstellungszeit von dem Datensatz\r\n   */\r\n  constructor(dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate?: number);\r\n\r\n  /**\r\n   * Eine bereits existierende Datensatz kann wie folgt in das Model geladen werden.\r\n   * @param dataRowSensors die Sensoren, von denen die Daten ausgelesen werden, \r\n   * die Anzahl muss mit der Anzahl der Datenreihen übereinstimmen. Und der i´te Sensor wird zur i´ten Datenreihe hinzugefügt.\r\n   * @param dataSetID die eindeutige Datensatz ID\r\n   * @param dataSetName der Datensatznamen\r\n   * @param generateDate die Erstellungszeit von dem Datensatz\r\n   * @param dataRows die schon existierenden Datenreihen\r\n   * @param label die schon existierenden Labels\r\n   */\r\n  constructor(dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate: number, dataRows: { dataRowID: number, recordingStart: number, dataRow: { value: number, relativeTime: number; }[]; }[], label: { name: string, labelID: number, start: number, end: number; }[]);\r\n  constructor(dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate?: number, dataRows?: { dataRowID: number, recordingStart: number, dataRow: { value: number, relativeTime: number; }[]; }[], label?: { name: string, labelID: number, start: number, end: number; }[]) {\r\n    if (dataRows != null) {\r\n      for (let i = 0; i < dataRows.length && i < dataRowSensors.length; i++) {\r\n        this.dataRow.push(new DataRow(dataRowSensors[i], dataRows[i].dataRowID, dataRows[i].recordingStart, dataRows[i].dataRow));\r\n      }\r\n    } else {\r\n      for (let i = 0; i < dataRowSensors.length; i++) {\r\n        this.dataRow.push(new DataRow(dataRowSensors[i], i));\r\n      }\r\n    }\r\n    if (label != null) {\r\n      for (let i = 0; i < label.length; i++) {\r\n        this.label.push(new Label(label[i].name, label[i].labelID, label[i].start, label[i].end));\r\n      }\r\n    }\r\n    if (generateDate != null) {\r\n      this.generateDate = generateDate;\r\n    } else {\r\n      this.generateDate = new Date().getTime();\r\n    }\r\n    this.id = dataSetID;\r\n    this.name = dataSetName;\r\n  }\r\n\r\n  /**\r\n   * Gibt die Datensatz ID zurück.\r\n   */\r\n  public getID(): number {\r\n    return this.id;\r\n  }\r\n\r\n  /**\r\n   * Gibt den Datensatz Namen zurück.\r\n   */\r\n  public getName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  /**\r\n   * Liest einen neuen Datenpunkt, speichert diesen und gibt ihn zurück.\r\n   * @param dataRowID Datenreihe ID, von der die Daten ausgelesen werden sollen.\r\n   * @returns die gelesenen Daten von der Datenreihe. Falls die Datenreihe nicht existiert oder kein aktueller Datensatz existiert, sind die Daten leer.\r\n   */\r\n  public readDataPoint(dataRowID: number): { dataPoint?: { value: number, relativeTime: number; }; } {\r\n    for (let i = 0; i < this.dataRow.length; i++) {\r\n      if (this.dataRow[i].getID() == dataRowID) {\r\n        return { dataPoint: this.dataRow[i].createCurrentDataPoint() };\r\n      }\r\n    }\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Gibt alle Datenreihen zurück.\r\n   * @returns Ein zwei Dimensionales Array, die Erste Dimension wählt die Datenreihe und die zweite Dimension den Datenpunkt.\r\n   */\r\n  public getDataRows(): { value: number, relativeTime: number; }[][] {\r\n    var dataRows: { value: number, relativeTime: number; }[][] = new Array();\r\n    for (let i = 0; i < this.dataRow.length; i++) {\r\n      dataRows.push(this.dataRow[i].getDataRow());\r\n    }\r\n    return dataRows;\r\n  }\r\n\r\n  /**\r\n   * Erstellt ein Label\r\n   * @param labelID die eindeutige Label ID\r\n   * @param name der Labelname\r\n   * @param start die Startzeit des Zeitfensters in Millisekunden\r\n   * @param end die Endzeit des Zeitfensters in Millisekunden\r\n   * @returns falls das Label mit der ID schon existiert wird false zurück gegeben\r\n   */\r\n  public createLabel(name: string, labelID: number, start: number, end: number): boolean {\r\n    for (let i = 0; i < this.label.length; i++) {\r\n      if (this.label[i].getID() == labelID) {\r\n        return false;\r\n      }\r\n    }\r\n    this.label.push(new Label(name, labelID, start, end));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Setzt dem Label mit der übergebenen ID neue Werte.\r\n   * @param span ist die Start- und Endzeit in Millisekunden.\r\n   * @param labelID Die Label ID, welche überarbeitet werden soll.\r\n   * @param labelName Ist bei Angabe der neue Name des Labels.\r\n   * @returns falls das Label nicht existiert wird false zurück gegeben\r\n   */\r\n  public setLabel(labelID: number, span?: { start: number, end: number; }, labelName?: string): boolean {\r\n    for (let i = 0; i < this.label.length; i++) {\r\n      if (this.label[i].getID() == labelID) {\r\n        this.label[i].setLabel(span, labelName);\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Löscht das Label mit der übergebenen LabelID.\r\n   * @param labelID die LabelID\r\n   */\r\n  public deleteLabel(labelID: number): boolean {\r\n    for (let i = 0; i < this.label.length; i++) {\r\n      if (this.label[i].getID() == labelID) {\r\n        delete this.label[i];\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Gibt alle Daten von allen Labeln zurück.\r\n   */\r\n  public getLabels(): { name: string, id: number, start: number, end: number; }[] {\r\n    var labelList: { name: string, id: number, start: number, end: number; }[] = new Array;\r\n    for (let i = 0; i < this.label.length; i++) {\r\n      labelList.push(this.label[i].getLabel());\r\n    }\r\n    return labelList;\r\n  }\r\n}","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Session.tsx",["240","241","242"],"import { Admin, User } from \"./User\";\r\n\r\n/**\r\n * Diese Klasse Speichert die Session informationen\r\n */\r\nexport class Session {\r\n  private id: number; //Die eindeutige ID der Session\r\n  private admin: Admin; //Der Admin dem das Projekt der Session gehört\r\n  private connectedUser: User[] = new Array(); //Die User die mit der Projekt der Session interagieren\r\n\r\n  /**\r\n   * Erstellt eine Session\r\n   * @param id Diese ID muss global eindeutig sein\r\n   * @param admin Der Admin, dem diese Session gehört\r\n   */\r\n  constructor(id: number, admin: Admin) {\r\n    this.id = id;\r\n    this.admin = admin;\r\n  }\r\n\r\n  /**\r\n   * Fügt eine User als Verbundener User zu der Session hinzu\r\n   * @param user Der User, der hinzugefügt wird\r\n   */\r\n  connectUser(user: User): void {\r\n    this.connectedUser.push(user);\r\n  }\r\n\r\n  /**\r\n   * Meldet einen User von der aktuellen Session ab\r\n   * @param user Der User, der abgemeldet werdern soll\r\n   */\r\n  disconnectUser(user: User): boolean {\r\n    for (let i = 0; i < this.connectedUser.length; i++) {\r\n      if (this.connectedUser[i].getID() == user.getID()) {\r\n        delete this.connectedUser[i];\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Gibt von allen verbundenen Usern die ID und den Namen zurück\r\n   */\r\n  getConnectedUsers(): { userID: number, userName: string; }[] {\r\n    var users: { userID: number, userName: string; }[] = new Array();\r\n    for (let i = 0; i < this.connectedUser.length; i++) {\r\n      users.push({ userID: this.connectedUser[i].getID(), userName: this.connectedUser[i].getName() });\r\n    }\r\n    return users;\r\n  }\r\n\r\n  /**\r\n   * Gibt die Session ID zurück\r\n   */\r\n  getId(): number {\r\n    return this.id;\r\n  }\r\n}","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Label.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\DataRow.tsx",["243","244","245","246"],"import { DataPoint } from \"./DataPoint\";\r\nimport { SensorData } from \"./Sensor\";\r\n\r\n/**\r\n * Die Klasse DataRow beschreibt eine Reihe aufgenommener Daten eines Sensors.\r\n */\r\nexport class DataRow {\r\n  private id: number; //Dies ist die DataRow ID, diese ist eindeutig für Datensätze.\r\n  private recordingStart: number; //Dies ist der Aufnahmestartpunkt der Datenreihe.\r\n  private datapoint: DataPoint[] = new Array; //Dies ist Datenreihe, eine Reihe von Datenpunkten.\r\n  private sensor: SensorData; //Dies ist der Sensor von dem die Daten gelesen wurden.\r\n\r\n  /**\r\n   * Eine neue Datenreihe erstellen.\r\n   * @param sensor Sensor, von dem die Daten gelesen werden.\r\n   * @param dataRowID Eine eindeutige Datenreihen ID.\r\n   */\r\n  constructor(sensor: SensorData, dataRowID: number);\r\n\r\n  /**\r\n   * Eine bereits existierende Datenreihe kann wie folgt in das Model geladen werden.\r\n   * @param sensor der Sensor von dem die Daten gelesen wurden\r\n   * @param dataRowID die ID, welche die Datenreihe bei der ersten Erstellung zugeteilt bekommen hat\r\n   * @param recordingStart der Aufnahmezeitpunkt in Millisekunden\r\n   * @param dataRow die aufgenommenen Daten\r\n   * @param dataRow.value der Sensor Messwert\r\n   * @param dataRow.relativeTime die relative Zeit zum Aufnahmestart\r\n   */\r\n  constructor(sensor: SensorData, dataRowID: number, recordingStart: number, dataRow: { value: number, relativeTime: number; }[]);\r\n  constructor(sensor: SensorData, dataRowID: number, recordingStart?: number, dataRow?: { value: number, relativeTime: number; }[]) {\r\n    this.sensor = sensor;\r\n    this.id = dataRowID;\r\n    if (recordingStart != null) {\r\n      this.recordingStart = recordingStart;\r\n    } else {\r\n      this.recordingStart = -1;\r\n    }\r\n    if (dataRow != null) {\r\n      for (let i = 0; i < dataRow.length; i++) {\r\n        this.datapoint.push(new DataPoint(dataRow[i].value, dataRow[i].relativeTime));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gibt die DataRow ID zurück.\r\n   */\r\n  public getID(): number {\r\n    return this.id;\r\n  }\r\n\r\n  /**\r\n   * Erzeugt mit dem aktuellen Messwert einen Datenpunkt und gibt diesen zurück.\r\n   * @returns value ist der neu gelesene Messwert und relativeTime die relative Zeit in Millisekunden zum Aufnahmestart.\r\n   */\r\n  public createCurrentDataPoint(): { value: number, relativeTime: number; } {\r\n    if (this.recordingStart == -1) {\r\n      this.recordingStart = new Date().getTime();\r\n    }\r\n    var relativeTime: number = new Date().getTime() - this.recordingStart;\r\n    this.datapoint.push(new DataPoint(this.sensor.getCurrentValue(), relativeTime));\r\n    return { value: this.sensor.getCurrentValue(), relativeTime };\r\n  }\r\n\r\n  /**\r\n   * Gibt die Datenreihe zurück.\r\n   * @returns value ist der Messwert und relativeTime die relative Zeit in Millisekunden zum Aufnahmestart.\r\n   */\r\n  public getDataRow(): { value: number, relativeTime: number; }[] {\r\n    var dataRow: { value: number, relativeTime: number; }[] = new Array();\r\n    for (let i = 0; i < this.datapoint.length; i++) {\r\n      dataRow[i] = { value: this.datapoint[i].getValue(), relativeTime: this.datapoint[i].getRelativeTime() };\r\n    }\r\n    return dataRow;\r\n  }\r\n\r\n  /**\r\n   * Gibt den Aufnahmestartpunkt in Millisekunden zurück. Kann \"-1\" sein, wenn noch keine Aufnahme gestartet wurde.\r\n   */\r\n  public getRecordingStart(): number {\r\n    return this.recordingStart;\r\n  }\r\n}","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LinkText\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\QRImage\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ProjectList\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\DataPoint.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\TimeSpan.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ModelList\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\State.tsx",["247","248","249","250","251"],"import { IState } from \"../State\";\r\nimport { States } from \"../State\";\r\nimport { QRCode, ErrorCorrectLevel, QRNumber, QRAlphaNum, QR8BitByte, QRKanji } from 'qrcode-generator-ts/js';\r\n\r\nexport class State implements IState {\r\n  currentState: States = States.NeedMessage;\r\n  languageCode: string = \"de\";\r\n  messages: { text: string, id: number; }[] = [];\r\n  projectData?: { projectID: number, projectName: string, AIModelExist: boolean; }[];\r\n  currentProject?: { projectID: number, projectName: string, AIModels: string[]; };\r\n  adminData?: { name: string, email: string, password: string; };\r\n  //minerData?:\r\n  aiUserData?: { name: string, result: string; };\r\n  labels?: { labelID: number, start: number, end: number; }[];\r\n  sessionID?: string;\r\n  //aiParameter?: \r\n  dataPoints?: { dataRowID: number, value: number; }[];\r\n  dataRows?: { dataSetID: number, data: number[][][]; };\r\n  dataSets?: { sensorTypes: string[], dataSetName: string; }[];\r\n  qr?: QRCode;\r\n  recordingSettings?: { newDataSetName: string, usedSensorTypes: string[], readTime: number, waitTime: number; };\r\n}","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\FinishPage\\index.tsx",["252","253","254"],"import React, { Component } from \"react\";\r\nimport Title from \"../../components/FinishComponents/Title\";\r\nimport Body from \"../../components/FinishComponents/Body\";\r\nimport Input from \"../../components/FinishComponents/Input\";\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport { MainController } from '../../../controller/MainController';\r\nimport ReactDOM from 'react-dom';\r\n\r\ntype Props = {\r\n};\r\n\r\nexport class FinishPage extends React.Component<Props, State> implements Page {\r\n\r\n  observers: PageController[] = [];\r\n  state = new State;\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    ReactDOM.render(\r\n      <div>\r\n        <Title />\r\n        <Body />\r\n        <Input />\r\n      </div>, document.getElementById('root'));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Title />\r\n        <Body />\r\n        <Input />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  attach(observer: PageController) {\r\n    this.observers.push(observer);\r\n  }\r\n\r\n  detach(observer: PageController) {\r\n    const index = this.observers.indexOf(observer, 0);\r\n    if (index > -1) {\r\n      this.observers.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  notify() {\r\n    for (let index = 0; index < this.observers.length; index++) {\r\n      const element = this.observers[index];\r\n      element.update();\r\n    }\r\n  }\r\n\r\n  getState() {\r\n    return this.state;\r\n  }\r\n\r\n  updateState(state: State) {\r\n    this.setState(state);\r\n    this.notify();\r\n  }\r\n\r\n  addLabel = (labelObj: { id: number, name: string, chosen: false, start: number, end: number; }) => {\r\n\r\n    const labels = this.state.labels;\r\n\r\n    const newLabels = [labelObj, ...labels];\r\n\r\n    this.setState({ labels: newLabels });\r\n  };\r\n\r\n\r\n  deleteLabel = (id: number) => {\r\n\r\n    const labels = this.state.labels;\r\n\r\n    const newLabels = labels.filter((labelObj) => {\r\n      return labelObj.id !== id;\r\n    });\r\n    this.setState({ labels: newLabels });\r\n  };\r\n}","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\FinishPage\\State.tsx",["255"],"export class State {\r\n  currentState: States = States.NeedMessage;\r\n  languageCode: string = \"de\";\r\n  messageIDs: number[] = [];\r\n  messages: string[] = [];\r\n  qrSvg: any = \"todo\";\r\n  labels: { id: number, name: string, chosen: false, start: number, end: number; }[] = [];\r\n}\r\n\r\nexport enum States {\r\n  NeedMessage,\r\n  NeedDiagram,\r\n  ChangePage\r\n}\r\n","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Body\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Title\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Input\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Input\\Label\\Labelling.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Input\\Label\\LabelList\\LabelList.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Input\\Label\\AddLabel\\AddLabelForm.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Input\\Label\\LabelItem\\LabelItem.tsx",["256","257"],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Input\\Label\\LabelItem\\types.ts",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\index.tsx",["258","259","260","261"],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Title\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Input\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\State.tsx",["262"],{"ruleId":"263","severity":1,"message":"264","line":1,"column":8,"nodeType":"265","messageId":"266","endLine":1,"endColumn":13},{"ruleId":"263","severity":1,"message":"267","line":2,"column":8,"nodeType":"265","messageId":"266","endLine":2,"endColumn":16},{"ruleId":"268","replacedBy":"269"},{"ruleId":"270","replacedBy":"271"},{"ruleId":"263","severity":1,"message":"272","line":5,"column":10,"nodeType":"265","messageId":"266","endLine":5,"endColumn":16},{"ruleId":"263","severity":1,"message":"273","line":7,"column":10,"nodeType":"265","messageId":"266","endLine":7,"endColumn":22},{"ruleId":"263","severity":1,"message":"274","line":9,"column":37,"nodeType":"265","messageId":"266","endLine":9,"endColumn":45},{"ruleId":"263","severity":1,"message":"275","line":9,"column":47,"nodeType":"265","messageId":"266","endLine":9,"endColumn":57},{"ruleId":"263","severity":1,"message":"276","line":9,"column":59,"nodeType":"265","messageId":"266","endLine":9,"endColumn":69},{"ruleId":"263","severity":1,"message":"277","line":9,"column":71,"nodeType":"265","messageId":"266","endLine":9,"endColumn":78},{"ruleId":"278","severity":1,"message":"279","line":67,"column":62,"nodeType":"280","messageId":"281","endLine":67,"endColumn":64},{"ruleId":"282","severity":1,"message":"283","line":170,"column":69,"nodeType":"284","messageId":"285","endLine":170,"endColumn":80,"fix":"286"},{"ruleId":"278","severity":1,"message":"287","line":186,"column":22,"nodeType":"280","messageId":"281","endLine":186,"endColumn":24},{"ruleId":"263","severity":1,"message":"288","line":1,"column":18,"nodeType":"265","messageId":"266","endLine":1,"endColumn":35},{"ruleId":"263","severity":1,"message":"274","line":1,"column":37,"nodeType":"265","messageId":"266","endLine":1,"endColumn":45},{"ruleId":"263","severity":1,"message":"275","line":1,"column":47,"nodeType":"265","messageId":"266","endLine":1,"endColumn":57},{"ruleId":"263","severity":1,"message":"276","line":1,"column":59,"nodeType":"265","messageId":"266","endLine":1,"endColumn":69},{"ruleId":"263","severity":1,"message":"277","line":1,"column":71,"nodeType":"265","messageId":"266","endLine":1,"endColumn":78},{"ruleId":"263","severity":1,"message":"289","line":1,"column":17,"nodeType":"265","messageId":"266","endLine":1,"endColumn":26},{"ruleId":"263","severity":1,"message":"290","line":10,"column":10,"nodeType":"265","messageId":"266","endLine":10,"endColumn":24},{"ruleId":"291","severity":1,"message":"292","line":66,"column":13,"nodeType":"293","endLine":66,"endColumn":23},{"ruleId":"268","replacedBy":"294"},{"ruleId":"270","replacedBy":"295"},{"ruleId":"282","severity":1,"message":"283","line":31,"column":63,"nodeType":"284","messageId":"285","endLine":31,"endColumn":74,"fix":"296"},{"ruleId":"263","severity":1,"message":"297","line":1,"column":18,"nodeType":"265","messageId":"266","endLine":1,"endColumn":28},{"ruleId":"282","severity":1,"message":"283","line":67,"column":32,"nodeType":"284","messageId":"285","endLine":67,"endColumn":43,"fix":"298"},{"ruleId":"278","severity":1,"message":"279","line":316,"column":35,"nodeType":"280","messageId":"281","endLine":316,"endColumn":37},{"ruleId":"278","severity":1,"message":"279","line":378,"column":16,"nodeType":"280","messageId":"281","endLine":378,"endColumn":18},{"ruleId":"299","severity":1,"message":"300","line":65,"column":3,"nodeType":"301","messageId":"302","endLine":67,"endColumn":4},{"ruleId":"299","severity":1,"message":"300","line":72,"column":3,"nodeType":"301","messageId":"302","endLine":74,"endColumn":4},{"ruleId":"263","severity":1,"message":"303","line":2,"column":10,"nodeType":"265","messageId":"266","endLine":2,"endColumn":17},{"ruleId":"263","severity":1,"message":"304","line":4,"column":10,"nodeType":"265","messageId":"266","endLine":4,"endColumn":27},{"ruleId":"282","severity":1,"message":"283","line":16,"column":32,"nodeType":"284","messageId":"285","endLine":16,"endColumn":43,"fix":"305"},{"ruleId":"282","severity":1,"message":"283","line":17,"column":32,"nodeType":"284","messageId":"285","endLine":17,"endColumn":43,"fix":"306"},{"ruleId":"278","severity":1,"message":"279","line":86,"column":35,"nodeType":"280","messageId":"281","endLine":86,"endColumn":37},{"ruleId":"278","severity":1,"message":"279","line":88,"column":72,"nodeType":"280","messageId":"281","endLine":88,"endColumn":74},{"ruleId":"282","severity":1,"message":"283","line":146,"column":71,"nodeType":"284","messageId":"285","endLine":146,"endColumn":82,"fix":"307"},{"ruleId":"278","severity":1,"message":"279","line":160,"column":35,"nodeType":"280","messageId":"281","endLine":160,"endColumn":37},{"ruleId":"263","severity":1,"message":"308","line":1,"column":10,"nodeType":"265","messageId":"266","endLine":1,"endColumn":16},{"ruleId":"282","severity":1,"message":"283","line":12,"column":32,"nodeType":"284","messageId":"285","endLine":12,"endColumn":43,"fix":"309"},{"ruleId":"282","severity":1,"message":"283","line":13,"column":28,"nodeType":"284","messageId":"285","endLine":13,"endColumn":39,"fix":"310"},{"ruleId":"278","severity":1,"message":"279","line":81,"column":35,"nodeType":"280","messageId":"281","endLine":81,"endColumn":37},{"ruleId":"282","severity":1,"message":"283","line":93,"column":66,"nodeType":"284","messageId":"285","endLine":93,"endColumn":77,"fix":"311"},{"ruleId":"278","severity":1,"message":"279","line":110,"column":33,"nodeType":"280","messageId":"281","endLine":110,"endColumn":35},{"ruleId":"278","severity":1,"message":"279","line":127,"column":33,"nodeType":"280","messageId":"281","endLine":127,"endColumn":35},{"ruleId":"278","severity":1,"message":"279","line":141,"column":33,"nodeType":"280","messageId":"281","endLine":141,"endColumn":35},{"ruleId":"282","severity":1,"message":"283","line":153,"column":82,"nodeType":"284","messageId":"285","endLine":153,"endColumn":91,"fix":"312"},{"ruleId":"313","severity":1,"message":"314","line":153,"column":82,"nodeType":"284","messageId":"315","endLine":153,"endColumn":91,"fix":"316"},{"ruleId":"282","severity":1,"message":"283","line":9,"column":35,"nodeType":"284","messageId":"285","endLine":9,"endColumn":46,"fix":"317"},{"ruleId":"278","severity":1,"message":"279","line":35,"column":41,"nodeType":"280","messageId":"281","endLine":35,"endColumn":43},{"ruleId":"282","severity":1,"message":"283","line":47,"column":58,"nodeType":"284","messageId":"285","endLine":47,"endColumn":69,"fix":"318"},{"ruleId":"282","severity":1,"message":"283","line":10,"column":36,"nodeType":"284","messageId":"285","endLine":10,"endColumn":45,"fix":"319"},{"ruleId":"313","severity":1,"message":"314","line":10,"column":36,"nodeType":"284","messageId":"315","endLine":10,"endColumn":45,"fix":"320"},{"ruleId":"278","severity":1,"message":"279","line":57,"column":29,"nodeType":"280","messageId":"281","endLine":57,"endColumn":31},{"ruleId":"282","severity":1,"message":"283","line":70,"column":63,"nodeType":"284","messageId":"285","endLine":70,"endColumn":74,"fix":"321"},{"ruleId":"263","severity":1,"message":"288","line":3,"column":18,"nodeType":"265","messageId":"266","endLine":3,"endColumn":35},{"ruleId":"263","severity":1,"message":"274","line":3,"column":37,"nodeType":"265","messageId":"266","endLine":3,"endColumn":45},{"ruleId":"263","severity":1,"message":"275","line":3,"column":47,"nodeType":"265","messageId":"266","endLine":3,"endColumn":57},{"ruleId":"263","severity":1,"message":"276","line":3,"column":59,"nodeType":"265","messageId":"266","endLine":3,"endColumn":69},{"ruleId":"263","severity":1,"message":"277","line":3,"column":71,"nodeType":"265","messageId":"266","endLine":3,"endColumn":78},{"ruleId":"263","severity":1,"message":"289","line":1,"column":17,"nodeType":"265","messageId":"266","endLine":1,"endColumn":26},{"ruleId":"263","severity":1,"message":"290","line":8,"column":10,"nodeType":"265","messageId":"266","endLine":8,"endColumn":24},{"ruleId":"313","severity":1,"message":"314","line":17,"column":11,"nodeType":"284","messageId":"315","endLine":17,"endColumn":20,"fix":"322"},{"ruleId":"323","severity":1,"message":"324","line":2,"column":26,"nodeType":"265","messageId":"325","endLine":2,"endColumn":32},{"ruleId":"263","severity":1,"message":"326","line":1,"column":17,"nodeType":"265","messageId":"266","endLine":1,"endColumn":25},{"ruleId":"263","severity":1,"message":"327","line":1,"column":27,"nodeType":"265","messageId":"266","endLine":1,"endColumn":38},{"ruleId":"263","severity":1,"message":"289","line":1,"column":17,"nodeType":"265","messageId":"266","endLine":1,"endColumn":26},{"ruleId":"263","severity":1,"message":"290","line":7,"column":10,"nodeType":"265","messageId":"266","endLine":7,"endColumn":24},{"ruleId":"313","severity":1,"message":"314","line":18,"column":22,"nodeType":"284","messageId":"315","endLine":18,"endColumn":31,"fix":"328"},{"ruleId":"291","severity":1,"message":"292","line":51,"column":9,"nodeType":"329","endLine":51,"endColumn":13},{"ruleId":"323","severity":1,"message":"324","line":2,"column":26,"nodeType":"265","messageId":"325","endLine":2,"endColumn":32},"@typescript-eslint/no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","'ReactDOM' is defined but never used.","no-native-reassign",["330"],"no-negated-in-lhs",["331"],"'IState' is defined but never used.","'AIController' is defined but never used.","'QRNumber' is defined but never used.","'QRAlphaNum' is defined but never used.","'QR8BitByte' is defined but never used.","'QRKanji' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","@typescript-eslint/no-array-constructor","The array literal notation [] is preferable.","NewExpression","useLiteral",{"range":"332","text":"333"},"Expected '!==' and instead saw '!='.","'ErrorCorrectLevel' is defined but never used.","'Component' is defined but never used.","'MainController' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression",["330"],["331"],{"range":"334","text":"333"},"'Smartphone' is defined but never used.",{"range":"335","text":"333"},"@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'DataRow' is defined but never used.","'AccelerometerData' is defined but never used.",{"range":"336","text":"333"},{"range":"337","text":"333"},{"range":"338","text":"333"},"'Device' is defined but never used.",{"range":"339","text":"333"},{"range":"340","text":"333"},{"range":"341","text":"333"},{"range":"342","text":"333"},"new-parens","Missing '()' invoking a constructor.","missing",{"range":"343","text":"344"},{"range":"345","text":"333"},{"range":"346","text":"333"},{"range":"347","text":"333"},{"range":"348","text":"344"},{"range":"349","text":"333"},{"range":"350","text":"344"},"@typescript-eslint/no-use-before-define","'States' was used before it was defined.","noUseBeforeDefine","'useState' is defined but never used.","'ChangeEvent' is defined but never used.",{"range":"351","text":"344"},"ThisExpression","no-global-assign","no-unsafe-negation",[7201,7212],"[]",[1029,1040],[1527,1538],[650,661],[725,736],[5506,5517],[510,521],[613,624],[4232,4243],[6258,6267],[6267,6267],"()",[289,300],[1398,1409],[404,413],[413,413],[2944,2955],[641,641],[647,647]]