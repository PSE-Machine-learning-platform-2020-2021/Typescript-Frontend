<<<<<<< HEAD
[{"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\index.tsx":"1","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\reportWebVitals.ts":"2","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\MainController.tsx":"3","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\ReferringController.tsx":"4","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\StartController.tsx":"5","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Facade.tsx":"6","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\State.tsx":"7","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\VisualizationController.tsx":"8","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\DeliveryController.tsx":"9","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DatabaseConnector.tsx":"10","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Language.tsx":"11","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\User.tsx":"12","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\DataCollectionController.tsx":"13","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\SensorManager.tsx":"14","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\index.tsx":"15","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\AIBuilder.tsx":"16","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\index.tsx":"17","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\ModelCreationController.tsx":"18","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Project.tsx":"19","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\index.tsx":"20","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\index.tsx":"21","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\FinishController.tsx":"22","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\State.tsx":"23","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\index.tsx":"24","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\State.tsx":"25","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\AIModel.tsx":"26","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DataSet.tsx":"27","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Session.tsx":"28","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\index.tsx":"29","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\State.tsx":"30","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\State.tsx":"31","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\NewProjectButton\\index.tsx":"32","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoadModelButton\\index.tsx":"33","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ConstantsText\\index.tsx":"34","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoginWindow\\index.tsx":"35","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Title\\index.tsx":"36","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Input\\index.tsx":"37","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\State.tsx":"38","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Label.tsx":"39","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DataRow.tsx":"40","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\ImageList\\index.tsx":"41","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\FinishButton\\index.tsx":"42","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\ShowImage\\index.tsx":"43","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\DownloadButton\\index.tsx":"44","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\EmailList\\index.tsx":"45","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\State.tsx":"46","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Countdown\\index.tsx":"47","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Title\\index.tsx":"48","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\TimeSpan.tsx":"49","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DataPoint.tsx":"50","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\Train\\index.tsx":"51","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\QRImage\\index.tsx":"52","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LinkText\\index.tsx":"53","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ProjectList\\index.tsx":"54","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ChangeToVisuBtn\\index.tsx":"55","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ModelList\\index.tsx":"56","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DeviceData.tsx":"57","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\AIDistributor.tsx":"58","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DeliveryFormat.tsx":"59","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\SensorData.tsx":"60","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Diagram\\index.jsx":"61","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\FinishPage\\index.tsx":"62","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\FinishPage\\State.tsx":"63","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Title\\index.tsx":"64","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Input\\Labelling\\index.tsx":"65","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Diagram\\index.jsx":"66"},{"size":419,"mtime":1613977999233,"results":"67","hashOfConfig":"68"},{"size":440,"mtime":1613146123200,"results":"69","hashOfConfig":"68"},{"size":3264,"mtime":1613977999229,"results":"70","hashOfConfig":"68"},{"size":7285,"mtime":1613977999244,"results":"71","hashOfConfig":"68"},{"size":3510,"mtime":1613925300445,"results":"72","hashOfConfig":"68"},{"size":17283,"mtime":1613978478641,"results":"73","hashOfConfig":"68"},{"size":4193,"mtime":1613930520090,"results":"74","hashOfConfig":"68"},{"size":5193,"mtime":1613981411973,"results":"75","hashOfConfig":"68"},{"size":2282,"mtime":1613977999228,"results":"76","hashOfConfig":"68"},{"size":11096,"mtime":1613929945461,"results":"77","hashOfConfig":"68"},{"size":1875,"mtime":1613491631620,"results":"78","hashOfConfig":"68"},{"size":14043,"mtime":1613922811877,"results":"79","hashOfConfig":"68"},{"size":1602,"mtime":1613390799825,"results":"80","hashOfConfig":"68"},{"size":6227,"mtime":1613977999229,"results":"81","hashOfConfig":"68"},{"size":5727,"mtime":1613928870392,"results":"82","hashOfConfig":"68"},{"size":4485,"mtime":1613978481048,"results":"83","hashOfConfig":"68"},{"size":2311,"mtime":1613491611469,"results":"84","hashOfConfig":"68"},{"size":2147,"mtime":1613930520087,"results":"85","hashOfConfig":"68"},{"size":7252,"mtime":1613922813067,"results":"86","hashOfConfig":"68"},{"size":2375,"mtime":1613830318143,"results":"87","hashOfConfig":"68"},{"size":1623,"mtime":1613830318140,"results":"88","hashOfConfig":"68"},{"size":3633,"mtime":1613916701678,"results":"89","hashOfConfig":"68"},{"size":843,"mtime":1613830318141,"results":"90","hashOfConfig":"68"},{"size":2822,"mtime":1613925739769,"results":"91","hashOfConfig":"68"},{"size":511,"mtime":1613491611469,"results":"92","hashOfConfig":"68"},{"size":485,"mtime":1613280191739,"results":"93","hashOfConfig":"68"},{"size":6044,"mtime":1613978481033,"results":"94","hashOfConfig":"68"},{"size":1574,"mtime":1613978657736,"results":"95","hashOfConfig":"68"},{"size":1982,"mtime":1613926378000,"results":"96","hashOfConfig":"68"},{"size":297,"mtime":1613497745957,"results":"97","hashOfConfig":"68"},{"size":276,"mtime":1613662337789,"results":"98","hashOfConfig":"68"},{"size":1273,"mtime":1613830318139,"results":"99","hashOfConfig":"68"},{"size":730,"mtime":1613830318137,"results":"100","hashOfConfig":"68"},{"size":229,"mtime":1613146123225,"results":"101","hashOfConfig":"68"},{"size":3250,"mtime":1613830318138,"results":"102","hashOfConfig":"68"},{"size":1002,"mtime":1613146123233,"results":"103","hashOfConfig":"68"},{"size":3829,"mtime":1613491611465,"results":"104","hashOfConfig":"68"},{"size":437,"mtime":1613969856981,"results":"105","hashOfConfig":"68"},{"size":1787,"mtime":1613280192336,"results":"106","hashOfConfig":"68"},{"size":2606,"mtime":1613922814746,"results":"107","hashOfConfig":"68"},{"size":1760,"mtime":1613497745953,"results":"108","hashOfConfig":"68"},{"size":366,"mtime":1613662337788,"results":"109","hashOfConfig":"68"},{"size":700,"mtime":1613497745955,"results":"110","hashOfConfig":"68"},{"size":363,"mtime":1613662337782,"results":"111","hashOfConfig":"68"},{"size":5830,"mtime":1613830318136,"results":"112","hashOfConfig":"68"},{"size":777,"mtime":1613926151745,"results":"113","hashOfConfig":"68"},{"size":1074,"mtime":1613280195760,"results":"114","hashOfConfig":"68"},{"size":1002,"mtime":1613280195763,"results":"115","hashOfConfig":"68"},{"size":1370,"mtime":1613280192349,"results":"116","hashOfConfig":"68"},{"size":946,"mtime":1613920422887,"results":"117","hashOfConfig":"68"},{"size":10277,"mtime":1613830318137,"results":"118","hashOfConfig":"68"},{"size":514,"mtime":1613390799834,"results":"119","hashOfConfig":"68"},{"size":646,"mtime":1613390799830,"results":"120","hashOfConfig":"68"},{"size":3094,"mtime":1613916701705,"results":"121","hashOfConfig":"68"},{"size":397,"mtime":1613491611453,"results":"122","hashOfConfig":"68"},{"size":1742,"mtime":1613916701702,"results":"123","hashOfConfig":"68"},{"size":2085,"mtime":1613978481015,"results":"124","hashOfConfig":"68"},{"size":2497,"mtime":1613978481034,"results":"125","hashOfConfig":"68"},{"size":214,"mtime":1613280191746,"results":"126","hashOfConfig":"68"},{"size":1533,"mtime":1613978420067,"results":"127","hashOfConfig":"68"},{"size":2433,"mtime":1613916701693,"results":"128","hashOfConfig":"68"},{"size":1642,"mtime":1613930520089,"results":"129","hashOfConfig":"68"},{"size":428,"mtime":1613930520088,"results":"130","hashOfConfig":"68"},{"size":1000,"mtime":1613146123218,"results":"131","hashOfConfig":"68"},{"size":2678,"mtime":1613662337785,"results":"132","hashOfConfig":"68"},{"size":3207,"mtime":1613969856980,"results":"133","hashOfConfig":"68"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"fl9nei",{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"138"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"138"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"138"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"138"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"189"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"138"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"138"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"138"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"138"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"138"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"240","messages":"241","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"138"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"249","messages":"250","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"138"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"272","messages":"273","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"285","messages":"286","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287"},"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\reportWebVitals.ts",[],["288","289"],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\MainController.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\ReferringController.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\StartController.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Facade.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\State.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\VisualizationController.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\DeliveryController.tsx",["290"],"import { PageController } from \"./PageController\";\r\nimport { MainController } from \"./MainController\";\r\nimport { Page } from \"../view/pages/PageInterface\";\r\nimport { IState, States } from \"../view/pages/State\";\r\nimport { DeliveryPage } from \"../view/pages/DeliveryPage/index\";\r\nimport { DeliveryFormat } from \"../model/DeliveryFormat\"\r\n\r\nexport class DeliveryController implements PageController {\r\n\r\n    private page: Page;\r\n    private state: IState;\r\n\r\n    /**\r\n    * Konstruktor des Seitenverwalters. Registriert sich als Beobachter auf seiner Seite und setzt den start Status.\r\n    * @param currentProject Die momentanen Projectdaten für welches man ein Model ausliefern möchte. \r\n    */\r\n    constructor(currentProject: { projectID: number, projectName: string, choosenAIModelID: number; }) {\r\n        this.page = new DeliveryPage({});\r\n        this.page.attach(this);\r\n        this.state = this.page.getState()\r\n        this.state.currentProject = currentProject\r\n        this.page.setState(this.state)\r\n    }\r\n\r\n    /**\r\n    * Die Update Methode des Seitenverwalters.\r\n    */\r\n    update() {\r\n        this.state = this.page.getState();\r\n        switch (this.state.currentState) {\r\n            case States.DeliverWeb:\r\n                this.deliverAsWebApp();\r\n                break;\r\n            case States.NeedMessage:\r\n                this.page.setState(MainController.getInstance().getMessage(this.state.messages));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Holt sich aus dem Status alle angegebene Email-Adressen und gibt diese mit Daten zum Projekt an die Fassade welche eine Email an alle Adressen sendet.\r\n    * Der Inhalt der Email gibt zugriff auf das Modell zur klassifizierung.\r\n    */\r\n    deliverAsWebApp() {\r\n        //let emails: string[] = this.state.chosenEmails!;\r\n       // for (let index = 0; index < emails.length; index++) {\r\n            //const element: string = emails[index];\r\n            //let url = MainController.getInstance().getFacade().getAIModel(this.state.currentProject?.choosenAIModelID!, DeliveryFormat.WEB_APP);\r\n            //Maincontroller.getInstance().getFacade().sendMail(url)\r\n      //  }\r\n    }\r\n\r\n    deliverAsExe() {\r\n        //todo in Quality Controll\r\n    }\r\n}","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DatabaseConnector.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Language.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\User.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\DataCollectionController.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\SensorManager.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\index.tsx",["291","292","293","294","295","296","297","298","299","300","301","302","303"],"import React, { Component } from 'react';\r\nimport PubSub from 'pubsub-js';\r\nimport ConstantsText from '../../components/ReferringComponents/ConstantsText';\r\nimport NewProjectButton from '../../components/ReferringComponents/NewProjectButton';\r\nimport LoadModelButton from '../../components/ReferringComponents/LoadModelButton';\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from 'react-dom';\r\nimport { States } from '../State';\r\nimport LoginWindow from '../../components/ReferringComponents/LoginWindow';\r\n\r\ntype Props = {\r\n\r\n};\r\n\r\nexport class ReferringPage extends React.Component<Props, State> implements Page {\r\n\r\n    state = new State();\r\n    observers: PageController[] = [];\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        const VDOM = (\r\n            <div>\r\n                <ConstantsText />\r\n                <LoginWindow />\r\n                <NewProjectButton />\r\n                <LoadModelButton />\r\n            </div>\r\n        );\r\n        ReactDOM.render(VDOM, document.getElementById('root'));\r\n        this.createNewProject();\r\n        this.register();\r\n        this.login();\r\n        this.getmodellist();\r\n        this.getProjectList();\r\n        this.loadproject();\r\n        this.changetovisu();\r\n        this.loadmodel();\r\n    }\r\n\r\n    attach(observer: PageController) {\r\n        this.observers.push(observer);\r\n    }\r\n\r\n    detach(observer: PageController) {\r\n        const index = this.observers.indexOf(observer, 0);\r\n        if (index > -1) {\r\n            this.observers.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    notify() {\r\n        for (let index = 0; index < this.observers.length; index++) {\r\n            const element = this.observers[index];\r\n            element.update();\r\n        }\r\n    }\r\n\r\n    getState() {\r\n        return this.state;\r\n    }\r\n\r\n    createNewProject() {\r\n        PubSub.subscribe('createnewproject', (_msg: any, data: string) => {\r\n            // console.log(this.state.currentState)\r\n            this.state.currentState = States.NewProjekt;\r\n            this.state.currentProject = { projectID: -10000, projectName: data, choosenAIModelID: -10000 };\r\n            //hier notifty for createnewProject\r\n            this.notify();\r\n            //notify for needqr\r\n            PubSub.publish('getqr', this.state.qr);\r\n        });\r\n    }\r\n\r\n    register() {\r\n        PubSub.subscribe('register', (_msg: any, data: { name: string, email: string, password: string; }) => {\r\n            this.state.adminData = data;\r\n            this.state.currentState = States.Register;\r\n            //this.setState({ adminData: data })\r\n            //this.setState({ currentState: States.Register })\r\n            //console.log(this.state.currentState)\r\n            this.notify();\r\n            this.state.wait!.then(() => {\r\n                //console.log(this.state.currentState)\r\n                let flag: boolean;\r\n                if (this.state.currentState != States.Register) {\r\n                    flag = false;\r\n                } else {\r\n                    PubSub.publish('disabled', false);\r\n                    flag = true;\r\n                }\r\n                PubSub.publish('registerstatus', flag);\r\n            });\r\n        });\r\n    }\r\n\r\n    login() {\r\n        PubSub.subscribe('login', (_msg: any, data: { name: string, email: string, password: string; }) => {\r\n            // console.log(this.state.currentState)\r\n            this.state.adminData = data;\r\n            this.state.currentState = States.Login;\r\n            this.notify();\r\n            let flag: boolean;\r\n            this.state.wait!.then(() => {\r\n                if (this.state.currentState as States === States.LoginFail as States) {\r\n                    flag = false;\r\n                } else {\r\n                    flag = true;\r\n                    PubSub.publish('disabled', false);\r\n                    PubSub.publish('getprojectlist', this.state.projectData);\r\n                }\r\n                PubSub.publish('loginstatus', flag);\r\n            });\r\n        });\r\n    }\r\n\r\n    getmodellist() {\r\n        PubSub.subscribe('needmodellist', (msg: any, data: { projectID: number; }) => {\r\n            for (let index = 0; index < this.state.projectData!.length; index++) {\r\n                if (data.projectID === this.state.projectData![index].projectID) {\r\n                    PubSub.publish('getmodellist', this.state.projectData![index]);\r\n                    return;\r\n                }\r\n\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    getProjectList() {\r\n        PubSub.subscribe('needprojectlist', () => {\r\n            PubSub.publish('getprojectlist', this.state.projectData!);\r\n        });\r\n    }\r\n\r\n    loadproject() {\r\n        PubSub.subscribe('loadproject', (_msg: any, data: { projectID: number, projectName: string, choosenAIModelID: number; }) => {\r\n            this.state.currentProject = { projectID: data.projectID, projectName: data.projectName, choosenAIModelID: -10000 };\r\n            this.state.currentState = States.LoadProject;\r\n            console.log(data.projectID);\r\n            this.notify();\r\n            PubSub.publish('getqr', this.state.qr);\r\n        });\r\n    }\r\n\r\n    changetovisu() {\r\n        PubSub.subscribe('changetovisu', (_msg: any) => {\r\n            this.state.currentState = States.ChangeToVisual;\r\n            this.notify();\r\n        });\r\n    }\r\n\r\n    loadmodel() {\r\n        PubSub.subscribe('loadmodel', (_msg: any, data: { projectID: number, projectName: string, choosenAIModelID: number; }) => {\r\n            this.state.currentProject = data;\r\n            this.state.currentState = States.LoadModel;\r\n            this.notify();\r\n        });\r\n    }\r\n}\r\n","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\AIBuilder.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\index.tsx",["304","305"],"import React, { Component } from 'react';\r\nimport PubSub from 'pubsub-js';\r\nimport Title from '../../components/StartComponents/Title';\r\nimport Input from '../../components/StartComponents/Input';\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from 'react-dom';\r\nimport { States } from '../State';\r\n\r\ntype Props = {\r\n\r\n};\r\n\r\nexport class StartPage extends React.Component<Props, State> implements Page {\r\n    state = new State();\r\n    observers: PageController[] = [];\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.setAvailableSensors();\r\n        this.changeSettings();\r\n        const VDOM = (\r\n            <div>\r\n                <Title />\r\n                <Input />\r\n            </div>\r\n        );\r\n        ReactDOM.render(VDOM, document.getElementById('root'));\r\n    }\r\n\r\n    setAvailableSensors() {\r\n        PubSub.publish('setAvailableSensors', (\r\n            this.state.recordingSettings.availableSensorTypes));\r\n    }\r\n\r\n    /**\r\n     * Prüft ob der Nutzer \"Start\" druckt und ändert den Zustand.\r\n     */\r\n    changeSettings() {\r\n        PubSub.subscribe('settingsFinish', (data: {\r\n            newDataSetName: string,\r\n            usedSensorTypes: number[],\r\n            waitTime: number,\r\n            readTime: number,\r\n            availableSensorTypes: { sensorTypID: number, sensorType: string, chosen: boolean; }[];\r\n        }) => {\r\n            this.setState({ recordingSettings: data });\r\n            this.state.currentState = States.ChangeToDataCollection;\r\n            this.notify();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Die Methoden für Beobachtermuster\r\n     * @param observer Beobachter,nähmlich Controller\r\n     */\r\n    attach(observer: PageController) {\r\n        this.observers.push(observer);\r\n    }\r\n\r\n    detach(observer: PageController) {\r\n        const index = this.observers.indexOf(observer, 0);\r\n        if (index > -1) {\r\n            this.observers.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    notify() {\r\n        for (let index = 0; index < this.observers.length; index++) {\r\n            const element = this.observers[index];\r\n            element.update();\r\n        }\r\n    }\r\n\r\n    getState() {\r\n        return this.state;\r\n    }\r\n\r\n}\r\n","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\ModelCreationController.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Project.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\index.tsx",["306","307","308","309","310","311"],"import React, { Component } from 'react'\r\nimport PubSub from 'pubsub-js';\r\nimport ImageList from '../../components/VisualizationComponents/ImageList'\r\nimport eximage1 from '../../images/exImage1.svg'\r\nimport './VisualizationPage.css'\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport { MainController } from '../../../controller/MainController';\r\nimport ReactDOM from 'react-dom';\r\nimport ShowImage from '../../components/VisualizationComponents/ShowImage';\r\nimport { States } from '../State';\r\nimport FinishButton from '../../components/VisualizationComponents/FinishButton';\r\n\r\ntype Props = {\r\n};\r\n\r\nexport class VisualizationPage extends React.Component<Props, State> implements Page {\r\n    state = new State()\r\n    observers: PageController[] = [];\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        const VDOM = (\r\n            <div className=\"visualizationpage\">\r\n                <ShowImage />\r\n                <ImageList />\r\n                <FinishButton />\r\n            </div>\r\n        );\r\n        ReactDOM.render(VDOM, document.getElementById('root'));\r\n        this.getimagelist()\r\n        this.changeimg()\r\n        this.changetonextpage()\r\n    }\r\n\r\n\r\n    attach(observer: PageController) {\r\n        this.observers.push(observer);\r\n    }\r\n\r\n    detach(observer: PageController) {\r\n        const index = this.observers.indexOf(observer, 0);\r\n        if (index > -1) {\r\n            this.observers.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    notify() {\r\n        for (let index = 0; index < this.observers.length; index++) {\r\n            const element = this.observers[index];\r\n            element.update();\r\n        }\r\n    }\r\n\r\n    getState() {\r\n        return this.state;\r\n    }\r\n\r\n    getimagelist() {\r\n        this.state.currentState = States.NeedImageList\r\n        this.notify()\r\n        PubSub.publish('getimagelist', this.state.imageList)\r\n    }\r\n    changeimg() {\r\n        PubSub.subscribe('changeimg', (_msg: any, data: string) => {\r\n            this.state.currentImg = data\r\n            //console.log(this.state.currentImg)\r\n        })\r\n    }\r\n    changetonextpage() {\r\n        PubSub.subscribe('changepage', (_msg: any) => {\r\n            this.state.currentState = States.ChangeToCreation\r\n            this.notify()\r\n\r\n        })\r\n    }\r\n}\r\n","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\index.tsx",["312","313","314","315"],"import React, { Component } from 'react';\r\nimport DownloadButton from '../../components/DeliveryComponents/DownloadButton';\r\nimport EmailList from '../../components/DeliveryComponents/EmailList';\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from 'react-dom';\r\nimport { States } from '../State';\r\n\r\ntype Props = {\r\n};\r\n\r\nexport class DeliveryPage extends React.Component<Props, State> implements Page {\r\n\r\n\tstate = new State();\r\n\tobservers: PageController[] = [];\r\n\tconstructor(props: Props) {\r\n\t\tsuper(props);\r\n\r\n\t\tconst VDOM = (\r\n\t\t\t<div className=\"deliverypage\">\r\n\t\t\t\t<EmailList />\r\n\t\t\t\t<DownloadButton />\r\n\t\t\t</div>\r\n\t\t);\r\n\t\tReactDOM.render(VDOM, document.getElementById('root'));\r\n\t\tthis.delivery()\r\n\t\tthis.download()\r\n\t}\r\n\r\n\tattach(observer: PageController) {\r\n\t\tthis.observers.push(observer);\r\n\t}\r\n\r\n\tdetach(observer: PageController) {\r\n\t\tconst index = this.observers.indexOf(observer, 0);\r\n\t\tif (index > -1) {\r\n\t\t\tthis.observers.splice(index, 1);\r\n\t\t}\r\n\t}\r\n\r\n\tnotify() {\r\n\t\tfor (let index = 0; index < this.observers.length; index++) {\r\n\t\t\tconst element = this.observers[index];\r\n\t\t\telement.update();\r\n\t\t}\r\n\t}\r\n\r\n\tgetState() {\r\n\t\treturn this.state;\r\n\t}\r\n\r\n\tdelivery() {\r\n\t\tPubSub.subscribe('delivery', (_msg: any, data: string[]) => {\r\n\t\t\tthis.state.currentState = States.DeliverWeb\r\n\t\t\tthis.state.chosenEmails = data\r\n\t\t\tthis.notify()\r\n\t\t})\r\n\t}\r\n\r\n\tdownload() {\r\n\t\tPubSub.subscribe('download', (_msg: any) => {\r\n\t\t\tthis.state.currentState = States.NeedDownload\r\n\t\t\tthis.notify()\r\n\t\t})\r\n\t}\r\n\r\n\r\n}\r\n","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\FinishController.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\State.tsx",["316","317","318","319","320","321"],"import { IState } from \"../State\";\r\nimport { States } from \"../State\";\r\nimport { QRCode, ErrorCorrectLevel, QRNumber, QRAlphaNum, QR8BitByte, QRKanji } from 'qrcode-generator-ts/js';\r\n\r\nexport class State implements IState {\r\n  currentState: States = States.NeedMessage;\r\n  languageCode: string = \"de\";\r\n  messages: { text: string, id: number; }[] = [];\r\n  projectData?: { projectID: number; projectName: string; AIModelID: number[]; }[];\r\n  currentProject?: { projectID: number, projectName: string, choosenAIModelID: number; };\r\n  // chosenModel?: string;\r\n  adminData?: { name: string, email: string, password: string; };\r\n  //minerData?:\r\n  aiUserData?: { name: string, result: string; };\r\n  labels?: { labelID: number, start: number, end: number; }[];\r\n  sessionID?: string;\r\n  //aiParameter?: \r\n  qr?: string;\r\n  wait?: Promise<any>\r\n}\r\n","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\index.tsx",["322"],"import React from 'react';\r\nimport PubSub from 'pubsub-js';\r\nimport Title from '../../components/DataCollectionComponents/Title';\r\nimport Countdown from '../../components/DataCollectionComponents/Countdown';\r\nimport Diagram from '../../components/DataCollectionComponents/Diagram';\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from 'react-dom';\r\nimport { States } from '../State';\r\n\r\ntype Props = {\r\n};\r\n\r\nexport class DataCollectionPage extends React.Component<Props, State> implements Page {\r\n    state = new State;\r\n    observers: PageController[] = [];\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.finishCountdown();\r\n        const VDOM = (\r\n            <div>\r\n                <Title />\r\n                <Countdown />\r\n                <Diagram />\r\n            </div>\r\n        );\r\n        ReactDOM.render(VDOM, document.getElementById('root'));\r\n    }\r\n\r\n\r\n    /**\r\n     * Diese Methode braucht nur einmal aufzurufen, Countdown geht automatisch.\r\n     * @param countdownNumber Die Countdownzahl zu zeigen.\r\n     */\r\n    showCountdownNumber(leadTime: number) {\r\n        this.setState({ leadTime: leadTime });\r\n        PubSub.publish('startCounting', this.state.leadTime);\r\n    }\r\n\r\n    /**\r\n     * Prüft ob Countdown fertig ist und ändert den Zustand.\r\n     */\r\n    finishCountdown() {\r\n        PubSub.subscribe('finishCountdwon', () => {\r\n            this.setState({ currentState: States.NeedInstantDiagram });\r\n            this.notify();\r\n        }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Diese Methode sollte während Datenerfassung jede Sekunde von Controller aufgerufen werden, um Bild zu updaten.\r\n     * @param countdownNumber Die Countdownzahl zu zeigen\r\n     */\r\n    showDiagram(dataRows: { value: number; relativeTime: number; }[][], usedSensorNames: string[]) {\r\n       // this.setState({ dataRows: dataRows });\r\n        this.setState({ usedSensorNames: usedSensorNames });\r\n        //PubSub.publish('startDiagram', this.state.dataRows);\r\n        PubSub.publish('giveLineLabels', this.state.usedSensorNames);\r\n    }\r\n\r\n    /**\r\n     * Die Methoden für Beobachtermuster\r\n     * @param observer Beobachter,nähmlich Controller\r\n     */\r\n    attach(observer: PageController) {\r\n        this.observers.push(observer);\r\n    }\r\n\r\n    detach(observer: PageController) {\r\n        const index = this.observers.indexOf(observer, 0);\r\n        if (index > -1) {\r\n            this.observers.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    notify() {\r\n        for (let index = 0; index < this.observers.length; index++) {\r\n            const element = this.observers[index];\r\n            element.update();\r\n        }\r\n    }\r\n\r\n    getState() {\r\n        return this.state;\r\n    }\r\n\r\n}","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\State.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\AIModel.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DataSet.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Session.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\index.tsx",["323","324","325"],"import React, { Component } from 'react'\r\nimport PubSub from 'pubsub-js';\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from 'react-dom';\r\nimport './ModelCreationPage.css'\r\nimport { States } from '../State'\r\nimport Train from '../../components/ModelCreationComponents/Train';\r\n\r\ntype Props = {\r\n};\r\n\r\nexport class ModelCreationPage extends React.Component<Props, State> implements Page {\r\n\tstate = new State();\r\n\tobservers: PageController[] = [];\r\n\tconstructor(props: Props) {\r\n\t\tsuper(props);\r\n\r\n\t\tconst VDOM = (\r\n\t\t\t<div className=\"modelcreationpage\">\r\n\t\t\t\t<Train />\r\n\t\t\t</div>\r\n\t\t);\r\n\r\n\t\tReactDOM.render(VDOM, document.getElementById('root'));\r\n\t\tthis.needDatabaseList()\r\n\t\tthis.train()\r\n\t}\r\n\r\n\tattach(observer: PageController) {\r\n\t\tthis.observers.push(observer);\r\n\t}\r\n\r\n\tdetach(observer: PageController) {\r\n\t\tconst index = this.observers.indexOf(observer, 0);\r\n\t\tif (index > -1) {\r\n\t\t\tthis.observers.splice(index, 1);\r\n\t\t}\r\n\t}\r\n\r\n\tnotify() {\r\n\t\tfor (let index = 0; index < this.observers.length; index++) {\r\n\t\t\tconst element = this.observers[index];\r\n\t\t\telement.update();\r\n\t\t}\r\n\t}\r\n\r\n\tgetState() {\r\n\t\treturn this.state;\r\n\t}\r\n\r\n\tneedDatabaseList() {\r\n\t\tthis.state.currentState = States.NeedDatabaseList\r\n\t\tthis.notify()\r\n\t\tlet databaseList = [\r\n\t\t\t{ dataSetID: 1, dataSetName: 'dataset1' },\r\n\t\t\t{ dataSetID: 2, dataSetName: 'dataset2' },\r\n\t\t\t{ dataSetID: 3, dataSetName: 'dataset3' }\r\n\t\t]\r\n\t\tPubSub.publish('getlist', databaseList)\r\n\t\t//PubSub.publish('getlist', this.state.dataSets)\r\n\t}\r\n\r\n\ttrain() {\r\n\t\tPubSub.subscribe('train', (_msg: any, data: { dataSets: number[], imputations: string[], classifier: string, scaler: string, extractions: string[] }) => {\r\n\t\t\t//console.log(data);\r\n\t\t\tthis.state.currentState = States.NeedKiTraining\r\n\t\t\t//this.state.trainingParameter = data\r\n\t\t\t//console.log(this.state.trainingParameter);\r\n\t\t\tthis.notify()\r\n\t\t})\r\n\t}\r\n\r\n}\r\n","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\State.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\State.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\NewProjectButton\\index.tsx",["326","327"],"import React, { Component } from 'react';\r\nimport QRImage from '../QRImage';\r\nimport LinkText from '../LinkText';\r\nimport ChangeToVisuBtn from '../ChangeToVisuBtn';\r\nimport { useState } from 'react';\r\n\r\nexport default class NewProjectButton extends Component {\r\n\r\n\r\n  state = {\r\n    click: false,\r\n    projectName: '',\r\n    disabled: true\r\n  };\r\n\r\n  changeProjectName = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      projectName: e.target.value\r\n    });\r\n  };\r\n\r\n  handleCreate = () => {\r\n    this.setState({ click: true });\r\n    PubSub.publish('createnewproject', this.state.projectName)\r\n\r\n  };\r\n\r\n  componentDidMount() {\r\n    PubSub.subscribe('disabled', (_msg: any, value: boolean) => {\r\n      this.state.disabled = value\r\n      this.setState(this.state)\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input type=\"text\" value={this.state.projectName} onChange={this.changeProjectName} placeholder='Neuen Projektnamen eingeben' disabled={this.state.disabled} />\r\n        <button onClick={() => this.handleCreate()} className=\"newProject\" id=\"new\" disabled={this.state.disabled}>Neues Projekt</button>\r\n        {this.state.click ? <div> <QRImage /><ChangeToVisuBtn /><LinkText /></div> : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoadModelButton\\index.tsx",["328","329"],"import React, { Component } from 'react'\r\nimport ProjectList from '../ProjectList'\r\n\r\n\r\nexport default class LoadModelButton extends Component {\r\n  state = { click: false, disabled: true, }\r\n  handleCreate = () => {\r\n    this.state.click = true\r\n    this.setState(this.state)\r\n  }\r\n\r\n  componentDidMount() {\r\n    PubSub.subscribe('disabled', (_msg: any, value: boolean) => {\r\n      this.state.disabled = false\r\n      this.setState(this.state)\r\n    })\r\n\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button onClick={() => this.handleCreate()} className=\"btn\" disabled={this.state.disabled}>Projekt und Model Wählen</button>\r\n        {this.state.click ? <div><ProjectList /> </div> : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ConstantsText\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoginWindow\\index.tsx",["330","331","332"],"import React, { Component } from 'react';\r\nimport NewWindow from \"react-new-window\";\r\n\r\nexport default class LoginWindow extends Component {\r\n\r\n  state = {\r\n    openNewWindow: false,\r\n    username: '',\r\n    email: '',\r\n    password: '',\r\n  };\r\n\r\n  openNewWindow = () => {\r\n    this.setState({ openNewWindow: true });\r\n  };\r\n  changeUsername = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      username: e.target.value\r\n    });\r\n  };\r\n  changeEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      email: e.target.value\r\n    });\r\n  };\r\n  changePassword = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      password: e.target.value\r\n    });\r\n  };\r\n\r\n\r\n  register = () => {\r\n    this.setState({ openNewWindow: false });\r\n    /** mit controller weiter veraendern*/\r\n    var pattern = /^([A-Za-z0-9_\\-\\.])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z])+$/\r\n    if (!pattern.test(this.state.email)) {\r\n      alert('Sie müssen eine Emailadresse eingeben!');\r\n      return\r\n    } else {\r\n      PubSub.publish('register', { name: this.state.username, email: this.state.email, password: this.state.password })\r\n      PubSub.subscribe('registerstatus', (data: boolean) => {\r\n        if (data) {\r\n          PubSub.publish('login', { name: this.state.username, email: this.state.email, password: this.state.password })\r\n          PubSub.subscribe('loginstatus', (_msg: any, newdata: boolean) => {\r\n            if (newdata) {\r\n              alert('Register und Einloggen Erfolg!')\r\n            }\r\n          })\r\n        } else {\r\n          alert('Register Mißerfolg!')\r\n        }\r\n      })\r\n    }\r\n  }\r\n  login = () => {\r\n    /** nach submit newFenster schliessen */\r\n    this.setState({ openNewWindow: false });\r\n    /** mit controller weiter veraendern*/\r\n    PubSub.publish('login', { name: this.state.username, email: this.state.email, password: this.state.password })\r\n    PubSub.subscribe('loginstatus', (_msg: any, data: boolean) => {\r\n      if (data) {\r\n        alert('Einloggen Erfolg!')\r\n      } else {\r\n        alert('Einloggen Mißrfolg!')\r\n      }\r\n    })\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"login-button\">\r\n        <button onClick={this.openNewWindow}> Einloggen Fenster </button>\r\n        {this.state.openNewWindow && (\r\n          <NewWindow>\r\n            <div className=\"login-window\">\r\n              <form>\r\n                <label>\r\n                  <p>Benutzername</p>\r\n                  <input type=\"text\" value={this.state.username} onChange={this.changeUsername} />\r\n                </label>\r\n                <label>\r\n                  <p>Email</p>\r\n                  <input type=\"text\" value={this.state.email} onChange={this.changeEmail} />\r\n                </label>\r\n                <label>\r\n                  <p>Passwort</p>\r\n                  <input type=\"password\" value={this.state.password} onChange={this.changePassword} />\r\n                </label>\r\n                <div>\r\n                  <button onClick={this.register}>Registrieren</button>\r\n                  <button onClick={this.login}>Loggen ein</button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </NewWindow>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Title\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Input\\index.tsx",["333","334"],"import React, { Component } from \"react\";\r\nimport input from \"./index.module.css\";\r\n\r\nexport default class Input extends Component {\r\n  state = {\r\n    name: \"\",\r\n    usedSensorTypes: [] as number[],\r\n    leadTime: \"\",\r\n    collectionTime: \"\",\r\n    availableSensorTypes: [] as { sensorTypID: number, sensorType: string, chosen: boolean; }[]\r\n  };\r\n\r\n  setAvailableSensors() {\r\n    PubSub.subscribe('setAvailableSensors', (\r\n      data: { sensorTypID: number, sensorType: string, chosen: boolean; }[]\r\n    ) => {\r\n      this.setState({ availableSensorTypes: data });\r\n    });\r\n  }\r\n\r\n  changeLeadtime = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState(() => ({\r\n      leadTime: e.target.value,\r\n    }));\r\n  };\r\n  changeCollectionTime = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState(() => ({\r\n      collectionTime: e.target.value,\r\n    }));\r\n  };\r\n  changeSensors = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    this.setState(() => ({\r\n      chosenSensors: e.target.value,\r\n    }));\r\n  };\r\n  changeName = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState(() => ({\r\n      name: e.target.value,\r\n    }));\r\n  };\r\n\r\n  handleCheckBoxChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    let newAvailableSensorTypes = this.state.availableSensorTypes;\r\n    for (var i = 0; i < newAvailableSensorTypes.length; i++) {\r\n      if (newAvailableSensorTypes[i].sensorTypID == +e.target.value) {\r\n        newAvailableSensorTypes[i].chosen = !newAvailableSensorTypes[i].chosen;\r\n        this.setState({ availableSensorTypes: newAvailableSensorTypes, });\r\n        return;\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  submit = () => {\r\n    if (\r\n      parseInt(this.state.leadTime) <= 5 &&\r\n      parseInt(this.state.leadTime) >= 3 &&\r\n      parseInt(this.state.collectionTime) <= 10 &&\r\n      parseInt(this.state.collectionTime) >= 5\r\n    ) {\r\n      let availableSensorTypes = this.state.availableSensorTypes;\r\n      var usedSensorTypes: number[] = [];\r\n      for (var i = 0; i < availableSensorTypes.length; i++) {\r\n        if (availableSensorTypes[i].chosen == true) {\r\n          usedSensorTypes.push(availableSensorTypes[i].sensorTypID);\r\n        }\r\n      }\r\n      this.setState({ usedSensorTypes: usedSensorTypes });\r\n      PubSub.publish('settingsFinish', this.state);\r\n    } else {\r\n      alert(\"Deine Eingabe ist ungültig.\");\r\n    }\r\n  };\r\n\r\n  render() {\r\n    this.setAvailableSensors();\r\n    return (\r\n      <div className=\"input\">\r\n        <form>\r\n          Aufnahmeparameter einstellen\r\n          <br />\r\n          Vorlaufzeit:\r\n          <input\r\n            type=\"leadTime\"\r\n            value={this.state.leadTime}\r\n            onChange={this.changeLeadtime.bind(this)}\r\n          />\r\n          s<br />\r\n          Aufnahmedauer:\r\n          <input\r\n            type=\"collectionTime\"\r\n            value={this.state.collectionTime}\r\n            onChange={this.changeCollectionTime.bind(this)}\r\n          />\r\n          s<br />\r\n          Datenname:\r\n          <input\r\n            type=\"datenname\"\r\n            value={this.state.name}\r\n            onChange={this.changeName.bind(this)}\r\n          /><br />\r\n          Sensoren...\r\n          <ul className=\"todo-main\">\r\n            {\r\n              this.state.availableSensorTypes.map((type: { sensorTypID: number, sensorType: string, chosen: boolean; }) => {\r\n                return (<li key={type.sensorTypID}>\r\n                  <input\r\n                    type=\"checkbox\" value={type.sensorTypID} checked={type.chosen} onChange={(e) => this.handleCheckBoxChange(e)} />\r\n                  {type.sensorType}\r\n                </li>);\r\n              })\r\n            }\r\n          </ul>\r\n          <br />\r\n          <button type=\"button\" onClick={this.submit}>\r\n            Start\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\State.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Label.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DataRow.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\ImageList\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\FinishButton\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\ShowImage\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\DownloadButton\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\EmailList\\index.tsx",["335","336","337","338","339","340","341","342"],"import React, { Component } from 'react'\r\nimport { nanoid } from 'nanoid';\r\n\r\nexport default class EmailList extends Component {\r\n\tstate = {\r\n\t\tmouse: false,\r\n\t\taddButtonClick: false,\r\n\t\tinputempty: true,\r\n\t\tinputemail: {\r\n\t\t\tid: '',\r\n\t\t\taddress: '',\r\n\t\t\tchosen: false\r\n\t\t},\r\n\t\temails: [{\r\n\t\t\tid: 'example',\r\n\t\t\taddress: 'xxxxx@xxx.xx(Beispiel, nach erstmal Addieren automatisch gelöscht)',\r\n\t\t\tchosen: false\r\n\t\t}]\r\n\t}\r\n\r\n\thandleCreate = () => {\r\n\t\tthis.setState({ addButtonClick: true });\r\n\t};\r\n\r\n\tinputchange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\tif (e.target.value == '') {\r\n\t\t\tthis.setState({ inputempty: true })\r\n\t\t} else {\r\n\t\t\tthis.setState({ inputemail: { id: nanoid(), address: e.target.value, chosen: false }, inputempty: false })\r\n\t\t}\r\n\r\n\t}\r\n\thandleKeyUp = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n\t\tthis.deleteEmail('example')\r\n\t\tconst { keyCode } = e;\r\n\t\t//check ENTER-key\r\n\t\tif (keyCode !== 13) return;\r\n\t\t//cant add empty email\r\n\t\tconst { inputemail, inputempty, emails } = this.state\r\n\t\tif (inputempty) {\r\n\t\t\talert('Eingabe darf nicht leer sein!');\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet exist = false\r\n\t\temails.map((emailObj) => {\r\n\t\t\tif (emailObj.address == inputemail.address) exist = true\r\n\t\t})\r\n\t\tif (exist) {\r\n\t\t\talert('Es gibt schon Emailadresse in List!');\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar pattern = /^([A-Za-z0-9_\\-\\.])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z])+$/\r\n\t\tif (pattern.test(inputemail.address)) {\r\n\t\t\tthis.addEmail(inputemail);\r\n\t\t} else {\r\n\t\t\talert('Sie müssen eine Emailadresse eingeben!');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t//hide inputbox\r\n\t\tthis.setState({ addButtonClick: false });\r\n\t};\r\n\r\n\t//handle emailItem\r\n\thandleMouse = (flag: boolean) => {\r\n\t\treturn () => {\r\n\t\t\tthis.setState({ mouse: flag });\r\n\t\t};\r\n\t};\r\n\r\n\thandleCheck = (id: string, chosen: boolean) => {\r\n\t\tconst { emails } = this.state\r\n\t\tconst newEmails = emails.map((emailObj) => {\r\n\t\t\tif (emailObj.id == id) return { ...emailObj, chosen };\r\n\t\t\telse return emailObj;\r\n\t\t})\r\n\t\tthis.setState({ emails: newEmails })\r\n\t};\r\n\r\n\thandleDelete = (id: string) => {\r\n\t\tif (window.confirm('Sind Sie sicher, die gewählt Emailadresse zu löschen?')) {\r\n\t\t\tconst { emails } = this.state\r\n\t\t\tconst newEmails = emails.filter((emailObj) => {\r\n\t\t\t\treturn emailObj.id !== id;\r\n\t\t\t});\r\n\t\t\t//update emailList\r\n\t\t\tthis.setState({ emails: newEmails })\r\n\t\t}\r\n\t};\r\n\r\n\t//addEmail for add new Email\r\n\taddEmail = (emailObj: { id: string, address: string, chosen: boolean }) => {\r\n\t\t//add new one\r\n\t\tconst { emails } = this.state\r\n\t\tconst newEmails = [emailObj, ...emails];\r\n\t\t//update emailList\r\n\t\tthis.setState({ emails: newEmails })\r\n\t};\r\n\r\n\t//deleteEmail for delete emailObj\r\n\tdeleteEmail = (id: string) => {\r\n\t\t//get orignal emailList\r\n\t\t//delete emailObj with id\r\n\t\tconst { emails } = this.state\r\n\t\tconst newEmails = emails.filter((emailObj) => {\r\n\t\t\treturn emailObj.id !== id;\r\n\t\t});\r\n\t\t//update emailList\r\n\t\tthis.setState({ emails: newEmails })\r\n\t};\r\n\r\n\t//checkAllEmail for all chosen email\r\n\tchooseAllEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\t//get orignal emailList\r\n\t\tconst chosen = e.target.checked\r\n\t\tconst { emails } = this.state\r\n\t\tconst newEmails = emails.map((emailObj) => {\r\n\t\t\treturn { ...emailObj, chosen };\r\n\t\t});\r\n\t\t//update emailList\r\n\t\tthis.setState({ emails: newEmails })\r\n\t};\r\n\r\n\t//clearAllChosen for delete all emails\r\n\tclearAllChosen = () => {\r\n\t\tif (window.confirm('Sind Sie sicher, alle gewähte Emailadressen zu löschen?')) {\r\n\t\t\t//get orignal emailList\r\n\t\t\tconst { emails } = this.state;\r\n\t\t\t//filter datas\r\n\t\t\tconst newEmails = emails.filter((emailObj) => {\r\n\t\t\t\treturn !emailObj.chosen;\r\n\t\t\t});\r\n\t\t\t//update emailLists\r\n\t\t\tthis.setState({ emails: newEmails })\r\n\t\t}\r\n\t};\r\n\t//sendmethod\r\n\tdelivery = () => {\r\n\t\tconst { emails } = this.state;\r\n\t\tlet emailaddressList: string[] = []\r\n\t\temails.map((emailObj) => {\r\n\t\t\tif (emailObj.chosen) emailaddressList.push(emailObj.address)\r\n\t\t});\r\n\t\tconsole.log(emailaddressList)\r\n\t\tPubSub.publish('delivery', emailaddressList)\r\n\t}\r\n\trender() {\r\n\t\tconst { mouse, emails } = this.state\r\n\t\tconst chosenCount = emails.reduce((pre, email) => pre + (email.chosen ? 1 : 0), 0)\r\n\t\t//total amount\r\n\t\tconst total = emails.length\r\n\t\treturn (\r\n\t\t\t<div className=\"email-main\">\r\n\t\t\t\t<div className=\"addemailbutton\">\r\n\t\t\t\t\t<button onClick={() => this.handleCreate()} className=\"btn\" >Addieren eine neue Emailadresse!(Addieren Eingaben mit 'Enter'-Taste)</button>\r\n\t\t\t\t\t{this.state.addButtonClick ?\r\n\t\t\t\t\t\t<div className=\"inputbox\">\r\n\t\t\t\t\t\t\t<input onKeyUp={this.handleKeyUp} onChange={this.inputchange} type=\"text\" placeholder=\"input email address with ENTER-key\" />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t: null}\r\n\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{emails.map(emailObj => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<li style={{ backgroundColor: mouse ? '#ddd' : 'white' }} onMouseEnter={this.handleMouse(true)} onMouseLeave={this.handleMouse(false)}>\r\n\t\t\t\t\t\t\t<label>\r\n\t\t\t\t\t\t\t\t<input type=\"checkbox\" checked={emailObj.chosen} onChange={(e: React.ChangeEvent<HTMLInputElement>): void => this.handleCheck(emailObj.id, e.target.checked)} />\r\n\t\t\t\t\t\t\t\t<span>{emailObj.address}</span>\r\n\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t\t<button onClick={() => this.handleDelete(emailObj.id)} className=\"btn-item\" style={{ display: mouse ? 'block' : 'none' }}>Löschen</button>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t)\r\n\t\t\t\t})}\r\n\r\n\t\t\t\t<div className=\"handleallemail\">\r\n\t\t\t\t\t<label>\r\n\t\t\t\t\t\t<input type=\"checkbox\" onChange={this.chooseAllEmail} checked={chosenCount === total && total !== 0 ? true : false} />\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t<span>Gewählt: {chosenCount}</span> / Insegesamt: {total}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\t<button onClick={() => this.clearAllChosen()} className=\"btn-clear\">Löschen alle gewählte Emailadressen!</button>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"deliverybutton\">\r\n\t\t\t\t\t<button onClick={() => this.delivery()} className=\"btn\" >Liefern Aus!</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\State.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Countdown\\index.tsx",["343","344","345","346"],"import { Component, useState, useEffect, useRef } from 'react';\r\nimport PubSub from 'pubsub-js';\r\n\r\nexport default class Countdown extends Component {\r\n    state = { countdownNumber: 5, startCounting: false, chosenSensors: \"\" };\r\n\r\n    componentDidMount() {\r\n        PubSub.subscribe('startCounting', (leadTime: number) => {\r\n            this.setState({ countdownNumber: leadTime, startCounting: true });\r\n        }\r\n        );\r\n\r\n        setInterval(() => {\r\n            this.updateCounting();\r\n        }, 1000);\r\n    }\r\n\r\n    updateCounting() {\r\n        this.setState({ countdownNumber: this.state.countdownNumber - 1 });\r\n        if (this.state.countdownNumber == 0) {\r\n            this.setState({ startCounting: false });\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Bereit machen zur Aufnahme!</h2>\r\n                <h2>{this.state.startCounting ? this.state.countdownNumber : \"\"}</h2>\r\n                <h2>Verwendete Sensoren:<br />{this.state.chosenSensors}</h2>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Title\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\TimeSpan.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DataPoint.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\Train\\index.tsx",["347","348","349","350","351","352","353","354"],"import React, { Component } from 'react'\r\nimport PubSub from 'pubsub-js';\r\nimport NewWindow from 'react-new-window';\r\n\r\n\r\nexport default class Train extends Component {\r\n\tstate = {\r\n\t\tmouse: false,\r\n\t\topenNewWindow: false,\r\n\t\tvalue: '',\r\n\t\tdatabaseList: [] as { dataSetID: number, dataSetName: string, chosen: boolean }[],\r\n\t\tdatasets: [{\r\n\t\t\tdataSetID: 0,\r\n\t\t\tdataSetName: 'exampledataset',\r\n\t\t\tchosen: false\r\n\t\t}],\r\n\t\timputations: [\r\n\t\t\t{ name: \"Mittel\", checked: false, tag: 'MEAN' },\r\n\t\t\t{ name: \"Letzer Wert fortgeführt\", checked: false, tag: 'FORWARD' },\r\n\t\t\t{ name: \"Bewegter Durchschnitt\", checked: false, tag: 'MOVING' },\r\n\t\t\t{ name: \"Lineare Interpolation\", checked: false, tag: 'LINEAR' },\r\n\t\t\t{ name: \"Spline Interpolation\", checked: false, tag: 'SPLINE' }\r\n\t\t],\r\n\t\tscalers: [\r\n\t\t\t{ name: \"Standard Scaler\", checked: false, tag: 'STANDARD' },\r\n\t\t\t{ name: \"Robust Scaler\", checked: false, tag: 'ROBUST' },\r\n\t\t\t{ name: \"Min-Max Scaler\", checked: false, tag: 'MIN_MAX' },\r\n\t\t\t{ name: \"Normalizer\", checked: false, tag: 'NORMALIZER' },\r\n\t\t\t{ name: \"Anteilstrafo\", checked: false, tag: 'SHARE' }\r\n\t\t],\r\n\t\textractions: [\r\n\t\t\t{ name: \"Minimum\", checked: false, tag: 'MIN' },\r\n\t\t\t{ name: \"Maximum\", checked: false, tag: 'MAX' },\r\n\t\t\t{ name: \"Varianz\", checked: false, tag: 'VARIANCE' },\r\n\t\t\t{ name: \"Energie\", checked: false, tag: 'ENERGY' },\r\n\t\t\t{ name: \"Fourier-T\", checked: false, tag: 'FOURIER_TRANSFORM' },\r\n\t\t\t{ name: \"Mittelwert\", checked: false, tag: 'MEAN' },\r\n\t\t\t{ name: \"Autoregressiv\", checked: false, tag: 'AUTOREGRESSIVE' },\r\n\t\t\t{ name: \"Abweichung\", checked: false, tag: 'SKEWNESS' },\r\n\t\t\t{ name: \"Wölbung\", checked: false, tag: 'KURTOSIS' },\r\n\t\t\t{ name: \"IQR\", checked: false, tag: 'IQR' }\r\n\t\t],\r\n\t\tclassifiers: [\r\n\t\t\t{ name: \"MLPClassifier\", checked: false, tag: 'MLP' },\r\n\t\t\t{ name: \"RandomForestClassifier\", checked: false, tag: 'RANDOM_FOREST' },\r\n\t\t\t{ name: \"KNeighborsClassifier\", checked: false, tag: 'K_NEIGHOBORS' },\r\n\t\t\t{ name: \"Support Vector Machine\", checked: false, tag: 'SVM' }\r\n\t\t],\r\n\t\tchosenScaler: 0,\r\n\t\tchosenclassifier: 0\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tPubSub.subscribe('getlist', (_msg: any, data: { dataSetID: number, dataSetName: string }[]) => {\r\n\t\t\tlet i: number\r\n\t\t\tlet newDatabaseList: { dataSetID: number, dataSetName: string, chosen: boolean }[] = []\r\n\t\t\tfor (i = 0; i < data.length; i++) {\r\n\t\t\t\tnewDatabaseList[i] = { dataSetID: data[i].dataSetID, dataSetName: data[i].dataSetName, chosen: false }\r\n\t\t\t}\r\n\t\t\tthis.setState({ databaseList: newDatabaseList })\r\n\t\t})\r\n\t}\r\n\r\n\thandleMouse = (flag: boolean) => {\r\n\t\treturn () => {\r\n\t\t\tthis.setState({ mouse: flag });\r\n\t\t};\r\n\t};\r\n\r\n\thandleCheck = (id: number, chosen: boolean) => {\r\n\t\tconst { datasets } = this.state\r\n\t\tconst newDatasets = datasets.map((dataset) => {\r\n\t\t\tif (dataset.dataSetID == id) return { ...dataset, chosen };\r\n\t\t\telse return dataset;\r\n\t\t})\r\n\t\tthis.setState({ datasets: newDatasets })\r\n\t};\r\n\r\n\thandleDelete = (id: number) => {\r\n\t\tif (window.confirm('Sind Sie sicher, die gewählt Emailadresse zu löschen?')) {\r\n\t\t\tconst { datasets } = this.state\r\n\t\t\tconst newDatasets = datasets.filter((dataset) => {\r\n\t\t\t\treturn dataset.dataSetID !== id;\r\n\t\t\t});\r\n\t\t\t//update emailList\r\n\t\t\tthis.setState({ datasets: newDatasets })\r\n\t\t}\r\n\t};\r\n\r\n\t//addDataset for add new Dataset\r\n\taddDataset = (datasetObj: { dataSetID: number, dataSetName: string, chosen: boolean }) => {\r\n\t\t//get orignal datasetList\r\n\t\tconst { datasets } = this.state\r\n\t\t//add new one\r\n\t\tconst newDatasets = [datasetObj, ...datasets]\r\n\t\t//update datasetList\r\n\t\tthis.setState({ datasets: newDatasets })\r\n\t}\r\n\r\n\thandleCreate = () => {\r\n\t\t//if (this.state.databaseList == []) {\r\n\t\t//\t}\r\n\t\tconst flag = !this.state.openNewWindow\r\n\t\tthis.setState({ openNewWindow: flag })\r\n\t}\r\n\thandleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n\t\tthis.setState({\r\n\t\t\tvalue: e.target.value\r\n\t\t})\r\n\t}\r\n\r\n\r\n\thandleChoose = () => {\r\n\t\t/* wait to change load model*/\r\n\t\tthis.setState({ openNewWindow: false })\r\n\t\tif (this.state.value == '') {\r\n\t\t\talert('no choice')\r\n\t\t} else {\r\n\t\t\tconst { databaseList } = this.state\r\n\t\t\tconst newDatabaseList1 = databaseList.map((databaseObj) => {\r\n\t\t\t\tif (databaseObj.dataSetName == this.state.value) {\r\n\t\t\t\t\tdatabaseObj.chosen = true\r\n\t\t\t\t\tconst datasetObj = { dataSetID: databaseObj.dataSetID, dataSetName: databaseObj.dataSetName, chosen: false }\r\n\t\t\t\t\tthis.addDataset(datasetObj)\r\n\t\t\t\t}\r\n\t\t\t\treturn databaseObj\r\n\t\t\t}\r\n\t\t\t)\r\n\t\t\tconst newDatabaseList2 = newDatabaseList1.filter((databaseObj) => {\r\n\t\t\t\treturn databaseObj.chosen === false\r\n\t\t\t})\r\n\t\t\t//update emailList\r\n\t\t\tthis.setState({ databaseList: newDatabaseList2 })\r\n\t\t}\r\n\t}\r\n\r\n\toptions = () => {\r\n\t\tconst { databaseList } = this.state\r\n\t\t/*way to add new into list\r\n\t\tand wait to get databaseList\r\n\t\tconst newdatabase = {id:'003', name:'dataset3', chosen: false}\r\n\t\tdatabaseList.push(newdatabase)\r\n\t\t*/\r\n\t\treturn databaseList.map(dataset =>\r\n\t\t\t<option key={dataset.dataSetID} value={dataset.dataSetName}>{dataset.dataSetName}</option>);\r\n\t}\r\n\thandleImputation = (index: number) => {\r\n\t\tvar newList = [...this.state.imputations]\r\n\t\tnewList[index].checked = !newList[index].checked\r\n\t\tthis.setState({ imputations: newList })\r\n\t}\r\n\thandleScaler = (index: number) => {\r\n\r\n\t\tvar newList = [...this.state.scalers]\r\n\t\tvar newChosen = this.state.chosenScaler\r\n\t\tif (newList[index].checked) { newChosen-- }\r\n\t\telse { newChosen++ }\r\n\t\tif (newChosen <= 1) {\r\n\t\t\tnewList[index].checked = !newList[index].checked\r\n\t\t\tthis.setState({ chosenScaler: newChosen })\r\n\t\t\tthis.setState({ scalers: newList })\r\n\t\t} else {\r\n\t\t\talert('Darf nicht mehrer Skaler wählen!')\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t}\r\n\thandleExtraction = (index: number) => {\r\n\t\tvar newList = [...this.state.extractions]\r\n\t\tnewList[index].checked = !newList[index].checked\r\n\t\tthis.setState({ extractions: newList })\r\n\t}\r\n\thandleClassifier = (index: number) => {\r\n\t\tvar newList = [...this.state.classifiers]\r\n\t\tvar newChosen = this.state.chosenclassifier\r\n\t\tif (newList[index].checked) { newChosen-- }\r\n\t\telse { newChosen++ }\r\n\t\tif (newChosen <= 1) {\r\n\t\t\tnewList[index].checked = !newList[index].checked\r\n\t\t\tthis.setState({ chosenclassifier: newChosen })\r\n\t\t\tthis.setState({ classifiers: newList })\r\n\t\t} else {\r\n\t\t\talert('Darf nicht mehrer Classifier wählen!')\r\n\t\t\treturn\r\n\t\t}\r\n\t}\r\n\r\n\thandleTrain = () => {\r\n\t\tvar chosendataSets: number[] = [], chosenimputations: string[] = [], chosenclassifier = '', chosenscaler = '', chosenextractions: string[] = [];\r\n\t\tconst { datasets, imputations, classifiers, scalers, extractions } = this.state\r\n\t\tdatasets.map((dataset) => {\r\n\t\t\tif (dataset.chosen) chosendataSets.push(dataset.dataSetID)\r\n\t\t})\r\n\t\timputations.map((imputation) => {\r\n\t\t\tif (imputation.checked) chosenimputations.push(imputation.tag)\r\n\t\t})\r\n\t\tclassifiers.map((classifier) => {\r\n\t\t\tif (classifier.checked) chosenclassifier = classifier.tag\r\n\t\t})\r\n\t\tscalers.map((scaler) => {\r\n\t\t\tif (scaler.checked) chosenscaler = scaler.tag\r\n\t\t})\r\n\t\textractions.map((extraction) => {\r\n\t\t\tif (extraction.checked) chosenextractions.push(extraction.tag)\r\n\t\t})\r\n\t\t//console.log(chosendataSets, chosenimputations, chosenclassifier, chosenscaler, chosenextractions)\r\n\t\tPubSub.publish('train', { chosendataSets, chosenimputations, chosenclassifier, chosenscaler, chosenextractions })\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { mouse, datasets, imputations, scalers, extractions, classifiers } = this.state\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"train\">\r\n\t\t\t\t<h3>Datasets</h3>\r\n\t\t\t\t{datasets.map(dataset => {\r\n\t\t\t\t\treturn (\r\n\r\n\t\t\t\t\t\t<li style={{ backgroundColor: mouse ? '#ddd' : 'white' }} onMouseEnter={this.handleMouse(true)} onMouseLeave={this.handleMouse(false)}>\r\n\t\t\t\t\t\t\t<label>\r\n\t\t\t\t\t\t\t\t<input type=\"checkbox\" checked={dataset.chosen} onChange={(e: React.ChangeEvent<HTMLInputElement>): void => this.handleCheck(dataset.dataSetID, e.target.checked)} />\r\n\t\t\t\t\t\t\t\t<span>{dataset.dataSetName}</span>\r\n\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t\t<button onClick={() => this.handleDelete(dataset.dataSetID)} className=\"btn-item\" style={{ display: mouse ? 'block' : 'none' }}>Löschen</button>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t)\r\n\t\t\t\t})}\r\n\r\n\t\t\t\t<div className=\"adddatasetbutton\">\r\n\t\t\t\t\t{this.state.openNewWindow && (\r\n\t\t\t\t\t\t<NewWindow>\r\n\t\t\t\t\t\t\t<div className=\"login-window\">\r\n\t\t\t\t\t\t\t\t<h1>DatabaseList</h1>\r\n\t\t\t\t\t\t\t\t<select onChange={this.handleChange}>\r\n\t\t\t\t\t\t\t\t\t<option value=\"choose dataset\">choose dataset</option>\r\n\t\t\t\t\t\t\t\t\t{this.options()}\r\n\t\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t\t\t<button onClick={this.handleChoose} className=\"btn\" >Add!</button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</NewWindow>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t<button onClick={() => this.handleCreate()} className=\"btn\" >Add new Dataset</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<div className=\"imputationlist\">\r\n\t\t\t\t\t\t<h3>Imputation</h3>\r\n\t\t\t\t\t\t{imputations.map((imputation, index) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<div key={index}>\r\n\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" value={index} checked={imputation.checked} onChange={() => this.handleImputation(index)} /><span>{imputation.name}</span>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"scalerlist\">\r\n\t\t\t\t\t\t<h3>Normalisierung</h3>\r\n\t\t\t\t\t\t{scalers.map((scaler, index) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<div key={index}>\r\n\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" value={index} checked={scaler.checked} onChange={() => this.handleScaler(index)} /><span>{scaler.name}</span>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<div className=\"extractionlist\">\r\n\t\t\t\t\t\t<h3>Merkmalextraktion</h3>\r\n\t\t\t\t\t\t{extractions.map((extraction, index) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<div key={index}>\r\n\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" value={index} checked={extraction.checked} onChange={() => this.handleExtraction(index)} /><span>{extraction.name}</span>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"classifierlist\">\r\n\t\t\t\t\t\t<h3>Modell</h3>\r\n\t\t\t\t\t\t{classifiers.map((classifier, index) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<div key={index}>\r\n\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" value={index} checked={classifier.checked} onChange={() => this.handleClassifier(index)} /><span>{classifier.name}</span>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"trainbutton\">\r\n\t\t\t\t\t<button onClick={() => this.handleTrain()} className=\"btn\" >Train Start!</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\r\n\t\t)\r\n\t}\r\n\r\n}\r\n","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\QRImage\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LinkText\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ProjectList\\index.tsx",["355","356","357","358","359"],"import React, { Component } from 'react'\r\nimport ChangeToVisuBtn from '../ChangeToVisuBtn';\r\nimport ModelList from '../ModelList';\r\nimport QRImage from '../QRImage';\r\n\r\nexport default class ProjectList extends Component {\r\n    state = {\r\n        value: null,\r\n        click: false,\r\n        loadclick: false,\r\n        //hier Beispiel, in componentDidMount will projectData verändern\r\n        projectData: [{\r\n            projectID: 1,\r\n            projectName: 'Projekt1',\r\n            AIModelID: [1, 2]\r\n        }, {\r\n            projectID: 2,\r\n            projectName: 'Projekt2',\r\n            AIModelID: []\r\n        }]\r\n    }\r\n\r\n    componentDidMount() {\r\n        PubSub.publish(\"needprojectlist\")\r\n        PubSub.subscribe('getprojectlist', (_msg: any, data: { projectID: number, projectName: string, AIModelID: number[]; }[]) => {\r\n            this.setState({ projectData: data })\r\n        })\r\n\r\n    }\r\n\r\n    handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n        this.setState({\r\n            value: e.target.value\r\n        })\r\n    }\r\n    \r\n    handleChoose() {\r\n        /* wait to change load model*/\r\n        if (this.state.value == null) {\r\n            alert('Sie haben noch kein Projekt gewählt!')\r\n        } else {\r\n            this.state.projectData.map((projectObj) => {\r\n                if (this.state.value == projectObj.projectID) {\r\n                    if (projectObj.AIModelID.length != 0) {\r\n                        PubSub.publish('needmodellist', projectObj)\r\n                        this.setState({ click: true })\r\n                    } else {\r\n                        this.setState({ click: false })\r\n                        alert('Es gibt keine Model in diesem Projekt!')\r\n                    }\r\n                }\r\n            })\r\n        }\r\n\r\n    }\r\n    handleLoad() {\r\n\r\n        if (this.state.value == null) {\r\n            alert('Sie haben noch kein Projekt gewählt!')\r\n        } else {\r\n            this.state.projectData.map((projectObj) => {\r\n                if (this.state.value == projectObj.projectID) {\r\n                    PubSub.publish('loadproject', projectObj)\r\n                    this.setState({ loadclick: true })\r\n                }\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <section>\r\n                <label>ProjektList</label>\r\n                <select onChange={this.handleChange}>\r\n                    <option>Projekt Wählen</option>\r\n                    {this.state.projectData.map((projectObj) => {\r\n                        return <option value={projectObj.projectID}>{projectObj.projectName}</option>\r\n                    })}\r\n                </select>\r\n                <button onClick={() => this.handleChoose()} className=\"btn\" >Wählen Modell in diesem Projekt </button>\r\n                <button onClick={() => this.handleLoad()} className=\"btn\" >Laden das Projekt!</button>\r\n                {this.state.loadclick ? <div> <QRImage /><ChangeToVisuBtn /></div> : null}\r\n                {this.state.click ? <div> <ModelList /></div> : null}\r\n            </section>\r\n\r\n        )\r\n    }\r\n}\r\n","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ChangeToVisuBtn\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ModelList\\index.tsx",["360"],"import React, { Component } from 'react'\r\n\r\nexport default class ModelList extends Component {\r\n    state = {\r\n        value: null,\r\n        modelList: [1, 2],\r\n        currentProject: {\r\n            projectID: 1,\r\n            projectName: 'project1',\r\n            chosenmodelID: 0\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        PubSub.subscribe('getmodellist', (_msg: any, data: { projectID: number, projectName: string, AIModelID: number[]; }) => {\r\n            this.state.modelList = data.AIModelID\r\n            this.setState(this.state)\r\n        })\r\n    }\r\n    handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n        this.setState({\r\n            value: e.target.value,\r\n            currentProject: { chosenmodelID: e.target.value }\r\n        })\r\n\r\n    }\r\n    handleChoose() {\r\n        /* wait to change load model*/\r\n        if (this.state.value == null) {\r\n            alert('Sie haben noch kein Modell gewählt!')\r\n        } else {\r\n            const num = this.state.currentProject.chosenmodelID\r\n            alert('Laden Modell' + num)\r\n            PubSub.publish('loadmodel', this.state.currentProject)\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <section>\r\n                <label>ModellList</label>\r\n                <select onChange={this.handleChange}>\r\n                    <option>Modell Wählen</option>\r\n                    {this.state.modelList.map((modelObj) => {\r\n                        return <option value={modelObj}>Modell{modelObj}</option>\r\n                    })}\r\n                </select>\r\n                <button onClick={() => this.handleChoose()} className=\"btn\" >Laden das gewählte Modell(zu Auslieferungsseite)</button>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DeviceData.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\AIDistributor.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DeliveryFormat.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\SensorData.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Diagram\\index.jsx",["361","362"],"import React, { Component } from 'react';\r\nimport PubSub from 'pubsub-js';\r\n\r\nexport default class Diagram extends Component {\r\n    state = {\r\n        sensorRow: [],\r\n        datavalue: [],\r\n        time: [],\r\n        showDiagram: false,\r\n        color: ['rgba(46,139,87,1)', 'rgba(68,24,232,1)', 'rgba(238,173,14,1)', 'rgba(178,34,34,1)'],\r\n    };\r\n\r\n    render() {\r\n        PubSub.subscribe(\"startDiagram\", (dataRows) => {\r\n            this.setState({\r\n                sensorRow: [],\r\n                datavalue: [],\r\n                time: [],\r\n                showDiagram: true\r\n            });\r\n            //put each value Array in State\r\n            for (var i = 0; i < dataRows.length; i++) {\r\n                var datavalues = [];\r\n                for (var j = 0; j < dataRows[i].length; j++) {\r\n                    datavalues.push(dataRows[i][j].value);\r\n                }\r\n                this.state.datavalue.push(datavalues);\r\n            }\r\n\r\n            //put time in State\r\n            for (var j = 0; j < dataRows[0].length; j++) {\r\n                this.state.time.push(dataRows[0][j].relativeTime);\r\n            }\r\n        });\r\n        var newDatasets = [];\r\n        for (var i = 0; i < this.state.sensorRow.length; i++) {\r\n            newDatasets.push(\r\n                {\r\n                    label: this.state.sensorRow[i],\r\n                    strokeColor: this.state.color[i],\r\n                    borderWidth: 1,\r\n                    data: this.state.datavalue[i],\r\n                }\r\n            );\r\n\r\n        }\r\n        const data = {\r\n            labels: this.state.time,\r\n            datasets: newDatasets\r\n        };\r\n        const options = {\r\n            datasetFill: false,\r\n            pointDotRadius: 2,\r\n            pointHitDetectionRadius: 1,\r\n            offsetGridLines: false,\r\n        };\r\n        PubSub.subscribe(\"giveLineLabels\", (usedSensorNames) => {\r\n            this.setState({ sensorRow: usedSensorNames });\r\n        });\r\n        const lineLabels = [];\r\n        for (var i = 0; i < this.state.sensorRow.length; i++) {\r\n            lineLabels.push(<font color={this.state.color[i]}>■{this.state.sensorRow[i]}<br /></font>);\r\n        }\r\n\r\n        var LineChart = require(\"react-chartjs\").Line;\r\n\r\n        return (\r\n            <div>\r\n                {lineLabels}\r\n                <LineChart data={data} options={options} width=\"425\" height=\"275\" />\r\n            </div>\r\n        );\r\n    }\r\n}","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\FinishPage\\index.tsx",["363","364"],"import React, { Component } from \"react\";\r\nimport PubSub from 'pubsub-js';\r\nimport Title from \"../../components/FinishComponents/Title\";\r\nimport Body from \"../../components/FinishComponents/Diagram\";\r\nimport Labelling from \"../../components/FinishComponents/Input/Labelling\";\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { States } from \"../State\";\r\n\r\ntype IProps = {\r\n};\r\n\r\nexport class FinishPage extends React.Component<IProps, State> implements Page {\r\n  state = new State();\r\n  observers: PageController[] = [];\r\n\r\n  constructor(props: IProps) {\r\n    super(props);\r\n    this.giveDiagram();\r\n    const VDOM = (\r\n      <div>\r\n        <Title />\r\n        <Body />\r\n        <div className=\"label-container\">\r\n          <Labelling />\r\n        </div>\r\n      </div>\r\n    );\r\n    ReactDOM.render(VDOM, document.getElementById(\"root\"));\r\n  }\r\n\r\n  giveDiagram() {\r\n    PubSub.publish('startDiagram', this.state.dataRows);\r\n  }\r\n\r\n\r\n  /**\r\n   * Die Methoden für Beobachtermuster\r\n   * @param observer Beobachter,nähmlich Controller\r\n  */\r\n  attach(observer: PageController) {\r\n    this.observers.push(observer);\r\n  }\r\n\r\n  detach(observer: PageController) {\r\n    const index = this.observers.indexOf(observer, 0);\r\n    if (index > -1) {\r\n      this.observers.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  notify() {\r\n    for (let index = 0; index < this.observers.length; index++) {\r\n      const element = this.observers[index];\r\n      element.update();\r\n    }\r\n  }\r\n\r\n  getState() {\r\n    return this.state;\r\n  }\r\n}","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\FinishPage\\State.tsx",["365"],"export class State {\r\n  currentState: States = States.NeedMessage;\r\n  languageCode: string = \"de\";\r\n  messageIDs: number[] = [];\r\n  messages: string[] = [];\r\n  usedSensorNames: string[] = [];\r\n  dataRows?: { sensorType: number, value: number[]; relativeTime: number; }[][];\r\n  labels: { id: string, start: number, end: number, name: string; }[] = [];\r\n}\r\n\r\nexport enum States {\r\n  NeedMessage,\r\n  NeedDiagram,\r\n  ChangePage\r\n}\r\n","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Title\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Input\\Labelling\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Diagram\\index.jsx",["366","367","368"],"import { Component } from 'react';\r\nimport PubSub from 'pubsub-js';\r\nimport diagram from './index.module.css';\r\n\r\nexport default class Diagram extends Component {\r\n    state = {\r\n        sensorRow: [85124, 45157],\r\n        datavalue: [\r\n            [55, 26, 91, 22, 14],\r\n            [66, 21, 83, 71, 8],\r\n            [12, 2, 50, 23, 77],\r\n            [83, 78, 51, 23, 13],\r\n            [44, 55, 66, 81, 20],\r\n            [1, 2, 3, 50, 5],\r\n        ],\r\n        time: [0, 1, 2, 3, 4],\r\n        color: ['rgba(46,190,87,1)', 'rgba(68,24,232,1)', 'rgba(238,173,14,1)', 'rgba(178,34,34,1)', 'rgba(238, 130, 238,1)', 'rgba(0, 0, 0,1)',\r\n            'rgba(106, 90, 205,1)', 'rgba(238, 118, 0,1)', 'rgba(105, 105, 105,1)'],\r\n        csscolor: ['2EBE57', 'CC00FF', 'EEAD0E', 'B22222', 'EE82EE', '000000',\r\n            '6A5ACD', 'EE7600', '696969'],\r\n        //grün,blau,gelb,rot,rosa,schwarz,lila,orange,grau\r\n    };\r\n\r\n    render() {\r\n        PubSub.subscribe(\"startDiagram\", (dataRows) => {\r\n\r\n            //put each value Array in State\r\n            for (var i = 0; i < dataRows.length; i++) {\r\n                var datavalues = [];\r\n                this.state.sensorRow.push(dataRows[i][0].sensorType);\r\n                for (var dataCoordinate = 0; dataCoordinate < 3; dataCoordinate++) {\r\n                    for (var j = 0; j < dataRows[i].length; j++) {\r\n                        datavalues.push(dataRows[i][j].value[dataCoordinate]);\r\n                    }\r\n                    this.state.datavalue.push(datavalues);\r\n                }\r\n            }\r\n\r\n            //put time in State\r\n            for (var j = 0; j < dataRows[0].length; j++) {\r\n                this.state.time.push(dataRows[0][j].relativeTime);\r\n            }\r\n        });\r\n\r\n        var newDatasets = [];\r\n        var lineLabels = [];\r\n        for (var i = 0; i < this.state.sensorRow.length * 3; i++) {\r\n            var coordinate = \".X\";\r\n            var sensor = this.state.sensorRow[parseInt(i / 3)];\r\n            if (i % 3 == 1) {\r\n                coordinate = \".Y\";\r\n            }\r\n            if (i % 3 == 2) {\r\n                coordinate = \".Z\";\r\n            }\r\n\r\n            lineLabels.push(<font color={this.state.csscolor[i]}>■{this.state.sensorRow[parseInt(i / 3)] + coordinate}<br /></font>);\r\n\r\n            newDatasets.push(\r\n                {\r\n                    label: sensor + coordinate,\r\n                    strokeColor: this.state.color[i],\r\n                    borderWidth: 1,\r\n                    data: this.state.datavalue[i],\r\n                }\r\n            );\r\n        }\r\n\r\n        const data = {\r\n            labels: this.state.time,\r\n            datasets: newDatasets\r\n        };\r\n        const options = {\r\n            datasetFill: false,\r\n            pointDotRadius: 2,\r\n            pointHitDetectionRadius: 1,\r\n            offsetGridLines: false,\r\n            pointDot: false\r\n        };\r\n\r\n\r\n\r\n        var LineChart = require(\"react-chartjs\").Line;\r\n\r\n        return (\r\n            <div>\r\n                <h2 className={diagram.title}>Fertig!</h2>\r\n                {lineLabels}\r\n                <LineChart data={data} options={options} width=\"425\" height=\"275\" />\r\n            </div>\r\n        );\r\n    }\r\n}",{"ruleId":"369","replacedBy":"370"},{"ruleId":"371","replacedBy":"372"},{"ruleId":"373","severity":1,"message":"374","line":6,"column":10,"nodeType":"375","messageId":"376","endLine":6,"endColumn":24},{"ruleId":"373","severity":1,"message":"377","line":1,"column":17,"nodeType":"375","messageId":"376","endLine":1,"endColumn":26},{"ruleId":"378","severity":1,"message":"379","line":68,"column":13,"nodeType":"380","endLine":68,"endColumn":23},{"ruleId":"378","severity":1,"message":"379","line":69,"column":13,"nodeType":"380","endLine":69,"endColumn":23},{"ruleId":"378","severity":1,"message":"379","line":79,"column":13,"nodeType":"380","endLine":79,"endColumn":23},{"ruleId":"378","severity":1,"message":"379","line":80,"column":13,"nodeType":"380","endLine":80,"endColumn":23},{"ruleId":"381","severity":1,"message":"382","line":88,"column":45,"nodeType":"383","messageId":"384","endLine":88,"endColumn":47},{"ruleId":"378","severity":1,"message":"379","line":102,"column":13,"nodeType":"380","endLine":102,"endColumn":23},{"ruleId":"378","severity":1,"message":"379","line":103,"column":13,"nodeType":"380","endLine":103,"endColumn":23},{"ruleId":"378","severity":1,"message":"379","line":140,"column":13,"nodeType":"380","endLine":140,"endColumn":23},{"ruleId":"378","severity":1,"message":"379","line":141,"column":13,"nodeType":"380","endLine":141,"endColumn":23},{"ruleId":"378","severity":1,"message":"379","line":150,"column":13,"nodeType":"380","endLine":150,"endColumn":23},{"ruleId":"378","severity":1,"message":"379","line":157,"column":13,"nodeType":"380","endLine":157,"endColumn":23},{"ruleId":"378","severity":1,"message":"379","line":158,"column":13,"nodeType":"380","endLine":158,"endColumn":23},{"ruleId":"373","severity":1,"message":"377","line":1,"column":17,"nodeType":"375","messageId":"376","endLine":1,"endColumn":26},{"ruleId":"378","severity":1,"message":"379","line":48,"column":13,"nodeType":"380","endLine":48,"endColumn":23},{"ruleId":"373","severity":1,"message":"377","line":1,"column":17,"nodeType":"375","messageId":"376","endLine":1,"endColumn":26},{"ruleId":"373","severity":1,"message":"385","line":4,"column":8,"nodeType":"375","messageId":"376","endLine":4,"endColumn":16},{"ruleId":"373","severity":1,"message":"386","line":9,"column":10,"nodeType":"375","messageId":"376","endLine":9,"endColumn":24},{"ruleId":"378","severity":1,"message":"379","line":61,"column":9,"nodeType":"380","endLine":61,"endColumn":19},{"ruleId":"378","severity":1,"message":"379","line":67,"column":13,"nodeType":"380","endLine":67,"endColumn":23},{"ruleId":"378","severity":1,"message":"379","line":73,"column":13,"nodeType":"380","endLine":73,"endColumn":23},{"ruleId":"373","severity":1,"message":"377","line":1,"column":17,"nodeType":"375","messageId":"376","endLine":1,"endColumn":26},{"ruleId":"378","severity":1,"message":"379","line":55,"column":4,"nodeType":"380","endLine":55,"endColumn":14},{"ruleId":"378","severity":1,"message":"379","line":56,"column":4,"nodeType":"380","endLine":56,"endColumn":14},{"ruleId":"378","severity":1,"message":"379","line":63,"column":4,"nodeType":"380","endLine":63,"endColumn":14},{"ruleId":"373","severity":1,"message":"387","line":3,"column":10,"nodeType":"375","messageId":"376","endLine":3,"endColumn":16},{"ruleId":"373","severity":1,"message":"388","line":3,"column":18,"nodeType":"375","messageId":"376","endLine":3,"endColumn":35},{"ruleId":"373","severity":1,"message":"389","line":3,"column":37,"nodeType":"375","messageId":"376","endLine":3,"endColumn":45},{"ruleId":"373","severity":1,"message":"390","line":3,"column":47,"nodeType":"375","messageId":"376","endLine":3,"endColumn":57},{"ruleId":"373","severity":1,"message":"391","line":3,"column":59,"nodeType":"375","messageId":"376","endLine":3,"endColumn":69},{"ruleId":"373","severity":1,"message":"392","line":3,"column":71,"nodeType":"375","messageId":"376","endLine":3,"endColumn":78},{"ruleId":"393","severity":1,"message":"394","line":16,"column":13,"nodeType":"395","messageId":"396","endLine":16,"endColumn":22,"fix":"397"},{"ruleId":"373","severity":1,"message":"377","line":1,"column":17,"nodeType":"375","messageId":"376","endLine":1,"endColumn":26},{"ruleId":"378","severity":1,"message":"379","line":54,"column":3,"nodeType":"380","endLine":54,"endColumn":13},{"ruleId":"378","severity":1,"message":"379","line":68,"column":4,"nodeType":"380","endLine":68,"endColumn":14},{"ruleId":"373","severity":1,"message":"398","line":5,"column":10,"nodeType":"375","messageId":"376","endLine":5,"endColumn":18},{"ruleId":"378","severity":1,"message":"379","line":30,"column":7,"nodeType":"380","endLine":30,"endColumn":17},{"ruleId":"378","severity":1,"message":"379","line":8,"column":5,"nodeType":"380","endLine":8,"endColumn":15},{"ruleId":"378","severity":1,"message":"379","line":14,"column":7,"nodeType":"380","endLine":14,"endColumn":17},{"ruleId":"399","severity":1,"message":"400","line":36,"column":35,"nodeType":"401","messageId":"402","endLine":36,"endColumn":36,"suggestions":"403"},{"ruleId":"399","severity":1,"message":"404","line":36,"column":40,"nodeType":"401","messageId":"402","endLine":36,"endColumn":41,"suggestions":"405"},{"ruleId":"399","severity":1,"message":"400","line":36,"column":56,"nodeType":"401","messageId":"402","endLine":36,"endColumn":57,"suggestions":"406"},{"ruleId":"381","severity":1,"message":"407","line":45,"column":50,"nodeType":"383","messageId":"384","endLine":45,"endColumn":52},{"ruleId":"381","severity":1,"message":"407","line":64,"column":44,"nodeType":"383","messageId":"384","endLine":64,"endColumn":46},{"ruleId":"381","severity":1,"message":"407","line":26,"column":22,"nodeType":"383","messageId":"384","endLine":26,"endColumn":24},{"ruleId":"408","severity":1,"message":"409","line":45,"column":25,"nodeType":"410","messageId":"411","endLine":45,"endColumn":27},{"ruleId":"381","severity":1,"message":"407","line":46,"column":25,"nodeType":"383","messageId":"384","endLine":46,"endColumn":27},{"ruleId":"399","severity":1,"message":"400","line":52,"column":33,"nodeType":"401","messageId":"402","endLine":52,"endColumn":34,"suggestions":"412"},{"ruleId":"399","severity":1,"message":"404","line":52,"column":38,"nodeType":"401","messageId":"402","endLine":52,"endColumn":39,"suggestions":"413"},{"ruleId":"399","severity":1,"message":"400","line":52,"column":54,"nodeType":"401","messageId":"402","endLine":52,"endColumn":55,"suggestions":"414"},{"ruleId":"381","severity":1,"message":"407","line":74,"column":20,"nodeType":"383","messageId":"384","endLine":74,"endColumn":22},{"ruleId":"408","severity":1,"message":"409","line":141,"column":25,"nodeType":"410","messageId":"411","endLine":141,"endColumn":27},{"ruleId":"373","severity":1,"message":"398","line":1,"column":21,"nodeType":"375","messageId":"376","endLine":1,"endColumn":29},{"ruleId":"373","severity":1,"message":"415","line":1,"column":31,"nodeType":"375","messageId":"376","endLine":1,"endColumn":40},{"ruleId":"373","severity":1,"message":"416","line":1,"column":42,"nodeType":"375","messageId":"376","endLine":1,"endColumn":48},{"ruleId":"381","severity":1,"message":"407","line":20,"column":40,"nodeType":"383","messageId":"384","endLine":20,"endColumn":42},{"ruleId":"381","severity":1,"message":"407","line":73,"column":26,"nodeType":"383","messageId":"384","endLine":73,"endColumn":28},{"ruleId":"381","severity":1,"message":"407","line":116,"column":24,"nodeType":"383","messageId":"384","endLine":116,"endColumn":26},{"ruleId":"381","severity":1,"message":"407","line":121,"column":33,"nodeType":"383","messageId":"384","endLine":121,"endColumn":35},{"ruleId":"408","severity":1,"message":"409","line":191,"column":26,"nodeType":"410","messageId":"411","endLine":191,"endColumn":28},{"ruleId":"408","severity":1,"message":"409","line":194,"column":32,"nodeType":"410","messageId":"411","endLine":194,"endColumn":34},{"ruleId":"408","severity":1,"message":"409","line":197,"column":32,"nodeType":"410","messageId":"411","endLine":197,"endColumn":34},{"ruleId":"408","severity":1,"message":"409","line":200,"column":24,"nodeType":"410","messageId":"411","endLine":200,"endColumn":26},{"ruleId":"408","severity":1,"message":"409","line":203,"column":32,"nodeType":"410","messageId":"411","endLine":203,"endColumn":34},{"ruleId":"408","severity":1,"message":"409","line":42,"column":53,"nodeType":"410","messageId":"411","endLine":42,"endColumn":55},{"ruleId":"381","severity":1,"message":"407","line":43,"column":38,"nodeType":"383","messageId":"384","endLine":43,"endColumn":40},{"ruleId":"381","severity":1,"message":"382","line":44,"column":53,"nodeType":"383","messageId":"384","endLine":44,"endColumn":55},{"ruleId":"408","severity":1,"message":"409","line":61,"column":53,"nodeType":"410","messageId":"411","endLine":61,"endColumn":55},{"ruleId":"381","severity":1,"message":"407","line":62,"column":38,"nodeType":"383","messageId":"384","endLine":62,"endColumn":40},{"ruleId":"378","severity":1,"message":"379","line":16,"column":13,"nodeType":"380","endLine":16,"endColumn":23},{"ruleId":"417","severity":1,"message":"418","line":31,"column":22,"nodeType":"375","messageId":"419","endLine":31,"endColumn":23},{"ruleId":"417","severity":1,"message":"420","line":61,"column":18,"nodeType":"375","messageId":"419","endLine":61,"endColumn":19},{"ruleId":"373","severity":1,"message":"377","line":1,"column":17,"nodeType":"375","messageId":"376","endLine":1,"endColumn":26},{"ruleId":"373","severity":1,"message":"421","line":10,"column":10,"nodeType":"375","messageId":"376","endLine":10,"endColumn":16},{"ruleId":"422","severity":1,"message":"423","line":2,"column":26,"nodeType":"375","messageId":"424","endLine":2,"endColumn":32},{"ruleId":"417","severity":1,"message":"418","line":40,"column":22,"nodeType":"375","messageId":"419","endLine":40,"endColumn":23},{"ruleId":"381","severity":1,"message":"407","line":50,"column":23,"nodeType":"383","messageId":"384","endLine":50,"endColumn":25},{"ruleId":"381","severity":1,"message":"407","line":53,"column":23,"nodeType":"383","messageId":"384","endLine":53,"endColumn":25},"no-native-reassign",["425"],"no-negated-in-lhs",["426"],"@typescript-eslint/no-unused-vars","'DeliveryFormat' is defined but never used.","Identifier","unusedVar","'Component' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'eximage1' is defined but never used.","'MainController' is defined but never used.","'QRCode' is defined but never used.","'ErrorCorrectLevel' is defined but never used.","'QRNumber' is defined but never used.","'QRAlphaNum' is defined but never used.","'QR8BitByte' is defined but never used.","'QRKanji' is defined but never used.","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"427","text":"428"},"'useState' is defined but never used.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["429","430"],"Unnecessary escape character: \\@.",["431","432"],["433","434"],"Expected '===' and instead saw '=='.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["435","436"],["437","438"],["439","440"],"'useEffect' is defined but never used.","'useRef' is defined but never used.","no-redeclare","'j' is already defined.","redeclared","'i' is already defined.","'States' is defined but never used.","@typescript-eslint/no-use-before-define","'States' was used before it was defined.","noUseBeforeDefine","no-global-assign","no-unsafe-negation",[634,634],"()",{"messageId":"441","fix":"442","desc":"443"},{"messageId":"444","fix":"445","desc":"446"},{"messageId":"441","fix":"447","desc":"443"},{"messageId":"444","fix":"448","desc":"446"},{"messageId":"441","fix":"449","desc":"443"},{"messageId":"444","fix":"450","desc":"446"},{"messageId":"441","fix":"451","desc":"443"},{"messageId":"444","fix":"452","desc":"446"},{"messageId":"441","fix":"453","desc":"443"},{"messageId":"444","fix":"454","desc":"446"},{"messageId":"441","fix":"455","desc":"443"},{"messageId":"444","fix":"456","desc":"446"},"removeEscape",{"range":"457","text":"458"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"459","text":"460"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"461","text":"458"},{"range":"462","text":"460"},{"range":"463","text":"458"},{"range":"464","text":"460"},{"range":"465","text":"458"},{"range":"466","text":"460"},{"range":"467","text":"458"},{"range":"468","text":"460"},{"range":"469","text":"458"},{"range":"470","text":"460"},[870,871],"",[870,870],"\\",[875,876],[875,875],[891,892],[891,891],[1336,1337],[1336,1336],[1341,1342],[1341,1341],[1357,1358],[1357,1357]]
=======
[{"D:\\main2\\Typescript-Frontend\\ki-app\\src\\index.tsx":"1","D:\\main2\\Typescript-Frontend\\ki-app\\src\\reportWebVitals.ts":"2","D:\\main2\\Typescript-Frontend\\ki-app\\src\\controller\\MainController.tsx":"3","D:\\main2\\Typescript-Frontend\\ki-app\\src\\controller\\ReferringController.tsx":"4","D:\\main2\\Typescript-Frontend\\ki-app\\src\\controller\\StartController.tsx":"5","D:\\main2\\Typescript-Frontend\\ki-app\\src\\model\\Facade.tsx":"6","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\pages\\State.tsx":"7","D:\\main2\\Typescript-Frontend\\ki-app\\src\\controller\\DeliveryController.tsx":"8","D:\\main2\\Typescript-Frontend\\ki-app\\src\\controller\\DataCollectionController.tsx":"9","D:\\main2\\Typescript-Frontend\\ki-app\\src\\controller\\VisualizationController.tsx":"10","D:\\main2\\Typescript-Frontend\\ki-app\\src\\controller\\SensorManager.tsx":"11","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\index.tsx":"12","D:\\main2\\Typescript-Frontend\\ki-app\\src\\model\\Language.tsx":"13","D:\\main2\\Typescript-Frontend\\ki-app\\src\\model\\AIBuilder.tsx":"14","D:\\main2\\Typescript-Frontend\\ki-app\\src\\model\\User.tsx":"15","D:\\main2\\Typescript-Frontend\\ki-app\\src\\model\\DatabaseConnector.tsx":"16","D:\\main2\\Typescript-Frontend\\ki-app\\src\\model\\AIDistributor.tsx":"17","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\pages\\FinishPage\\index.tsx":"18","D:\\main2\\Typescript-Frontend\\ki-app\\src\\model\\DeliveryFormat.tsx":"19","D:\\main2\\Typescript-Frontend\\ki-app\\src\\controller\\FinishController.tsx":"20","D:\\main2\\Typescript-Frontend\\ki-app\\src\\controller\\ModelCreationController.tsx":"21","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\index.tsx":"22","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\index.tsx":"23","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\index.tsx":"24","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\State.tsx":"25","D:\\main2\\Typescript-Frontend\\ki-app\\src\\model\\DeviceData.tsx":"26","D:\\main2\\Typescript-Frontend\\ki-app\\src\\model\\Project.tsx":"27","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\pages\\FinishPage\\State.tsx":"28","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\State.tsx":"29","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\State.tsx":"30","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\State.tsx":"31","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\index.tsx":"32","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\index.tsx":"33","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Title\\index.tsx":"34","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Input\\index.tsx":"35","D:\\main2\\Typescript-Frontend\\ki-app\\src\\model\\AIModel.tsx":"36","D:\\main2\\Typescript-Frontend\\ki-app\\src\\model\\SensorData.tsx":"37","D:\\main2\\Typescript-Frontend\\ki-app\\src\\model\\DataSet.tsx":"38","D:\\main2\\Typescript-Frontend\\ki-app\\src\\model\\Session.tsx":"39","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Title\\index.tsx":"40","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Input\\Labelling\\index.tsx":"41","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Title\\index.tsx":"42","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Countdown\\index.tsx":"43","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\DownloadButton\\index.tsx":"44","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\FinishButton\\index.tsx":"45","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\EmailList\\index.tsx":"46","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Diagram\\index.jsx":"47","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\State.tsx":"48","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\State.tsx":"49","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Diagram\\index.jsx":"50","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\ShowDiagram\\index.jsx":"51","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\DiagramList\\index.jsx":"52","D:\\main2\\Typescript-Frontend\\ki-app\\src\\model\\Label.tsx":"53","D:\\main2\\Typescript-Frontend\\ki-app\\src\\model\\DataRow.tsx":"54","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ConstantsText\\index.tsx":"55","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\NewProjectButton\\index.tsx":"56","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoginWindow\\index.tsx":"57","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoadModelButton\\index.tsx":"58","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\Train\\index.tsx":"59","D:\\main2\\Typescript-Frontend\\ki-app\\src\\model\\DataPoint.tsx":"60","D:\\main2\\Typescript-Frontend\\ki-app\\src\\model\\TimeSpan.tsx":"61","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ChangeToVisuBtn\\index.tsx":"62","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LinkText\\index.tsx":"63","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\QRImage\\index.tsx":"64","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ProjectList\\index.tsx":"65","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ModelList\\index.tsx":"66"},{"size":419,"mtime":1613981513323,"results":"67","hashOfConfig":"68"},{"size":440,"mtime":1613932046820,"results":"69","hashOfConfig":"68"},{"size":3264,"mtime":1613981513282,"results":"70","hashOfConfig":"68"},{"size":7343,"mtime":1613983540402,"results":"71","hashOfConfig":"68"},{"size":3510,"mtime":1613932045136,"results":"72","hashOfConfig":"68"},{"size":17283,"mtime":1613981513375,"results":"73","hashOfConfig":"68"},{"size":4192,"mtime":1613982926349,"results":"74","hashOfConfig":"68"},{"size":2284,"mtime":1613982511393,"results":"75","hashOfConfig":"68"},{"size":1602,"mtime":1613932044649,"results":"76","hashOfConfig":"68"},{"size":2559,"mtime":1613983147598,"results":"77","hashOfConfig":"68"},{"size":6227,"mtime":1613981513285,"results":"78","hashOfConfig":"68"},{"size":2311,"mtime":1613932050181,"results":"79","hashOfConfig":"68"},{"size":1875,"mtime":1613932046194,"results":"80","hashOfConfig":"68"},{"size":4485,"mtime":1613981513325,"results":"81","hashOfConfig":"68"},{"size":14043,"mtime":1613932046722,"results":"82","hashOfConfig":"68"},{"size":11096,"mtime":1613981513369,"results":"83","hashOfConfig":"68"},{"size":2497,"mtime":1613981513327,"results":"84","hashOfConfig":"68"},{"size":1642,"mtime":1613932049713,"results":"85","hashOfConfig":"68"},{"size":214,"mtime":1613932045910,"results":"86","hashOfConfig":"68"},{"size":3633,"mtime":1613932044739,"results":"87","hashOfConfig":"68"},{"size":2147,"mtime":1613932044905,"results":"88","hashOfConfig":"68"},{"size":2822,"mtime":1613932049401,"results":"89","hashOfConfig":"68"},{"size":3943,"mtime":1613983483668,"results":"90","hashOfConfig":"68"},{"size":1623,"mtime":1613932049513,"results":"91","hashOfConfig":"68"},{"size":511,"mtime":1613932050143,"results":"92","hashOfConfig":"68"},{"size":2085,"mtime":1613981513372,"results":"93","hashOfConfig":"68"},{"size":7252,"mtime":1613932046297,"results":"94","hashOfConfig":"68"},{"size":428,"mtime":1613932049624,"results":"95","hashOfConfig":"68"},{"size":276,"mtime":1613932049476,"results":"96","hashOfConfig":"68"},{"size":433,"mtime":1613983080400,"results":"97","hashOfConfig":"68"},{"size":437,"mtime":1613942928060,"results":"98","hashOfConfig":"68"},{"size":5727,"mtime":1613981513383,"results":"99","hashOfConfig":"68"},{"size":1982,"mtime":1613932049906,"results":"100","hashOfConfig":"68"},{"size":1002,"mtime":1613932048922,"results":"101","hashOfConfig":"68"},{"size":3831,"mtime":1613985008071,"results":"102","hashOfConfig":"68"},{"size":485,"mtime":1613932045588,"results":"103","hashOfConfig":"68"},{"size":1533,"mtime":1613981513379,"results":"104","hashOfConfig":"68"},{"size":6044,"mtime":1613981513329,"results":"105","hashOfConfig":"68"},{"size":1574,"mtime":1613981513381,"results":"106","hashOfConfig":"68"},{"size":1000,"mtime":1613932047855,"results":"107","hashOfConfig":"68"},{"size":2678,"mtime":1613932047644,"results":"108","hashOfConfig":"68"},{"size":1002,"mtime":1613932047254,"results":"109","hashOfConfig":"68"},{"size":1046,"mtime":1613983622869,"results":"110","hashOfConfig":"68"},{"size":363,"mtime":1613932047365,"results":"111","hashOfConfig":"68"},{"size":366,"mtime":1613932049021,"results":"112","hashOfConfig":"68"},{"size":5870,"mtime":1613984639665,"results":"113","hashOfConfig":"68"},{"size":3207,"mtime":1613942927705,"results":"114","hashOfConfig":"68"},{"size":777,"mtime":1613932049858,"results":"115","hashOfConfig":"68"},{"size":843,"mtime":1613932050035,"results":"116","hashOfConfig":"68"},{"size":2433,"mtime":1613932047143,"results":"117","hashOfConfig":"68"},{"size":845,"mtime":1613960766256,"results":"118","hashOfConfig":"68"},{"size":5298,"mtime":1613985008038,"results":"119","hashOfConfig":"68"},{"size":1787,"mtime":1613932046142,"results":"120","hashOfConfig":"68"},{"size":2606,"mtime":1613932045775,"results":"121","hashOfConfig":"68"},{"size":229,"mtime":1613932048098,"results":"122","hashOfConfig":"68"},{"size":1284,"mtime":1613984658723,"results":"123","hashOfConfig":"68"},{"size":3247,"mtime":1613984352813,"results":"124","hashOfConfig":"68"},{"size":778,"mtime":1613984253276,"results":"125","hashOfConfig":"68"},{"size":10383,"mtime":1613984119745,"results":"126","hashOfConfig":"68"},{"size":946,"mtime":1613932045697,"results":"127","hashOfConfig":"68"},{"size":1370,"mtime":1613932046663,"results":"128","hashOfConfig":"68"},{"size":397,"mtime":1613932048021,"results":"129","hashOfConfig":"68"},{"size":646,"mtime":1613932048165,"results":"130","hashOfConfig":"68"},{"size":514,"mtime":1613932048620,"results":"131","hashOfConfig":"68"},{"size":3164,"mtime":1613984817676,"results":"132","hashOfConfig":"68"},{"size":1814,"mtime":1613984639664,"results":"133","hashOfConfig":"68"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},"gk2xru",{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"136"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"136"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"181","usedDeprecatedRules":"136"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"136"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"136"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"136"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"136"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"136"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"244"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},"D:\\main2\\Typescript-Frontend\\ki-app\\src\\index.tsx",[],["277","278"],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\reportWebVitals.ts",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\controller\\MainController.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\controller\\ReferringController.tsx",["279","280","281","282"],"import { Page } from \"../view/pages/PageInterface\";\r\nimport { IState, States } from \"../view/pages/State\";\r\nimport { PageController } from \"./PageController\";\r\nimport { MainController } from \"./MainController\";\r\nimport { DeliveryController } from \"./DeliveryController\";\r\nimport { VisualizationController } from \"./VisualizationController\";\r\nimport { ReferringPage } from \"../view/pages/ReferringPage/index\";\r\nimport { QRCode, ErrorCorrectLevel, QRNumber, QRAlphaNum, QR8BitByte, QRKanji } from 'qrcode-generator-ts/js';\r\n\r\n\r\nexport class RefferingController implements PageController {\r\n    private page: Page;\r\n    private state: IState;\r\n\r\n    /**\r\n     * Konstruktor des Seitenverwalters. Registriert sich als Beobachter auf seiner Seite und setzt den Start Status. \r\n     */\r\n    constructor() {\r\n        this.page = new ReferringPage({});\r\n        // this.page = new VisualizationPage({});\r\n\r\n        this.page.attach(this);\r\n        this.state = this.page.getState();\r\n        this.update();\r\n    }\r\n\r\n    /**\r\n     * Die Update Methode des Seitenverwalters.\r\n     */\r\n    update() {\r\n        this.state = this.page.getState();\r\n        switch (this.state.currentState) {\r\n            case States.LoadProject:\r\n                this.loadProject();\r\n                break;\r\n            case States.Register:\r\n                this.register();\r\n                break;\r\n            case States.Login:\r\n                this.login();\r\n                break;\r\n            case States.NewProjekt:\r\n                this.createNewProject();\r\n                break;\r\n            case States.LoadModel:\r\n                this.loadModel();\r\n                break;\r\n            case States.SetLanguage:\r\n                this.page.setState(MainController.getInstance().setLanguage(this.state.languageCode));\r\n                break;\r\n            case States.NeedMessage:\r\n                this.page.setState(MainController.getInstance().getMessage(this.state.messages));\r\n                break;\r\n            case States.ChangeToVisual:\r\n                MainController.getInstance().changeTo(new VisualizationController(this.state.currentProject!));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Logt den Benutzer ein\r\n     */\r\n    login() {\r\n        let adminData: { name: string, email: string, password: string; } = this.state.adminData!;\r\n        let loginSucess: Promise<boolean> = MainController.getInstance().getFacade().loginAdmin(adminData.email, adminData.password);\r\n        this.state.wait! = loginSucess;\r\n        this.state.currentState = States.waitForDB;\r\n        this.page.setState(this.state);\r\n        loginSucess.then((value: boolean) => {\r\n            if (value) {\r\n                this.state.projectData! = [];\r\n                let projectData: Promise<{ projectID: number; projectName: string; AIModelID: number[]; }[]> = MainController.getInstance().getFacade().getProjectMetas();\r\n                projectData.then((data: { projectID: number; projectName: string; AIModelID: number[]; }[]) => {\r\n                    this.state.projectData! = data;\r\n                    this.page.setState(this.state);\r\n                });\r\n\r\n            } else {\r\n                this.state.currentState = States.LoginFail;\r\n            }\r\n            this.page.setState(this.state);\r\n        });\r\n        loginSucess.catch((value: boolean) => {\r\n            console.log(value);\r\n        });\r\n        //this.state.projectData! = [{ projectID: 1, projectName: \"string\", AIModelID: [1,2] }]\r\n        //this.page.setState(this.state)\r\n    }\r\n\r\n    /**\r\n     * Registriert den Benutzer\r\n     */\r\n    register() {\r\n        let adminData: { name: string, email: string, password: string; } = this.state.adminData!;\r\n        let loginSucess: Promise<boolean> = MainController.getInstance().getFacade().registerAdmin(adminData.name, adminData.email, adminData.password);\r\n        this.state.wait! = loginSucess;\r\n        this.state.currentState = States.waitForDB;\r\n        this.page.setState(this.state);\r\n        loginSucess.then((value: boolean) => {\r\n            if (!value) {\r\n                this.state.currentState = States.LoginFail;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Erstellt ein QRCode und übergibt in an die Seite\r\n     */\r\n    createQR() {\r\n        const url = new URL(document.URL);\r\n        url.searchParams.append(\"SessionID\", MainController.getInstance().getFacade().getSessionID().toString());\r\n        url.searchParams.append(\"isMiner\", \"true\");\r\n        let link: string = url.toString();\r\n        var qr = new QRCode();\r\n        qr.setTypeNumber(5);\r\n        qr.setErrorCorrectLevel(ErrorCorrectLevel.L);\r\n        qr.addData(link);\r\n        qr.make();\r\n        this.state.qr = qr.toDataURL();\r\n        this.state.currentState = States.SetQRC;\r\n    }\r\n\r\n    /**\r\n     * Erstelle ein neues Projekt, welches auch als momentanes Projekt gesetzt wird.\r\n     */\r\n    createNewProject() {\r\n        let sucess: Promise<boolean> = MainController.getInstance().getFacade().createProject(this.state.currentProject!.projectName);\r\n        this.state.wait! = sucess;\r\n        this.state.currentState = States.waitForDB;\r\n        this.page.setState(this.state);\r\n        sucess.then((value: boolean) => {\r\n            if (value) {\r\n                this.createQR();\r\n                let projectData: Promise<{ projectID: number; projectName: string; AIModelID: number[]; }[]> = MainController.getInstance().getFacade().getProjectMetas();\r\n                projectData.then((data: { projectID: number; projectName: string; AIModelID: number[]; }[]) => {\r\n                    this.state.projectData! = data;\r\n                });\r\n            } else {\r\n                this.state.currentState = States.LoadError;\r\n            }\r\n            this.page.setState(this.state);\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Setzt ein Projekt als momentanes Projekt\r\n     */\r\n    loadProject() {\r\n        let projectId: number = this.state.currentProject!.projectID!;\r\n        let sucess: Promise<boolean> = MainController.getInstance().getFacade().loadProject(projectId);\r\n        this.state.wait! = sucess;\r\n        this.state.currentState = States.waitForDB;\r\n        this.page.setState(this.state);\r\n        sucess.then((value: boolean) => {\r\n            if (value) {\r\n                this.createQR();\r\n            } else {\r\n                this.state.currentState = States.LoadError;\r\n            }\r\n        });\r\n        this.page.setState(this.state);\r\n    }\r\n\r\n    /**\r\n     * Läde ein Modell und wechselt zur delivery Seite\r\n     */\r\n    loadModel() {\r\n        let projectId: number = this.state.currentProject!.projectID;\r\n        let sucess: Promise<boolean> = MainController.getInstance().getFacade().loadProject(projectId);\r\n        this.state.wait! = sucess;\r\n        this.state.currentState = States.waitForDB;\r\n        this.page.setState(this.state);\r\n        sucess.then((value: boolean) => {\r\n            if (value) {\r\n                let deliveryConroller: DeliveryController = new DeliveryController(this.state.currentProject!);\r\n                MainController.getInstance().changeTo(deliveryConroller);\r\n            } else {\r\n                this.state.currentState = States.LoadError;\r\n            }\r\n        });\r\n        this.page.setState(this.state);\r\n    }\r\n}","D:\\main2\\Typescript-Frontend\\ki-app\\src\\controller\\StartController.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\model\\Facade.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\pages\\State.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\controller\\DeliveryController.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\controller\\DataCollectionController.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\controller\\VisualizationController.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\controller\\SensorManager.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\index.tsx",["283","284"],"import React, { Component } from 'react';\r\nimport PubSub from 'pubsub-js';\r\nimport Title from '../../components/StartComponents/Title';\r\nimport Input from '../../components/StartComponents/Input';\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from 'react-dom';\r\nimport { States } from '../State';\r\n\r\ntype Props = {\r\n\r\n};\r\n\r\nexport class StartPage extends React.Component<Props, State> implements Page {\r\n    state = new State();\r\n    observers: PageController[] = [];\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.setAvailableSensors();\r\n        this.changeSettings();\r\n        const VDOM = (\r\n            <div>\r\n                <Title />\r\n                <Input />\r\n            </div>\r\n        );\r\n        ReactDOM.render(VDOM, document.getElementById('root'));\r\n    }\r\n\r\n    setAvailableSensors() {\r\n        PubSub.publish('setAvailableSensors', (\r\n            this.state.recordingSettings.availableSensorTypes));\r\n    }\r\n\r\n    /**\r\n     * Prüft ob der Nutzer \"Start\" druckt und ändert den Zustand.\r\n     */\r\n    changeSettings() {\r\n        PubSub.subscribe('settingsFinish', (data: {\r\n            newDataSetName: string,\r\n            usedSensorTypes: number[],\r\n            waitTime: number,\r\n            readTime: number,\r\n            availableSensorTypes: { sensorTypID: number, sensorType: string, chosen: boolean; }[];\r\n        }) => {\r\n            this.setState({ recordingSettings: data });\r\n            this.state.currentState = States.ChangeToDataCollection;\r\n            this.notify();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Die Methoden für Beobachtermuster\r\n     * @param observer Beobachter,nähmlich Controller\r\n     */\r\n    attach(observer: PageController) {\r\n        this.observers.push(observer);\r\n    }\r\n\r\n    detach(observer: PageController) {\r\n        const index = this.observers.indexOf(observer, 0);\r\n        if (index > -1) {\r\n            this.observers.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    notify() {\r\n        for (let index = 0; index < this.observers.length; index++) {\r\n            const element = this.observers[index];\r\n            element.update();\r\n        }\r\n    }\r\n\r\n    getState() {\r\n        return this.state;\r\n    }\r\n\r\n}\r\n","D:\\main2\\Typescript-Frontend\\ki-app\\src\\model\\Language.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\model\\AIBuilder.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\model\\User.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\model\\DatabaseConnector.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\model\\AIDistributor.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\pages\\FinishPage\\index.tsx",["285","286"],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\model\\DeliveryFormat.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\controller\\FinishController.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\controller\\ModelCreationController.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\index.tsx",["287"],"import React from 'react';\r\nimport PubSub from 'pubsub-js';\r\nimport Title from '../../components/DataCollectionComponents/Title';\r\nimport Countdown from '../../components/DataCollectionComponents/Countdown';\r\nimport Diagram from '../../components/DataCollectionComponents/Diagram';\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from 'react-dom';\r\nimport { States } from '../State';\r\n\r\ntype Props = {\r\n};\r\n\r\nexport class DataCollectionPage extends React.Component<Props, State> implements Page {\r\n    state = new State;\r\n    observers: PageController[] = [];\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.finishCountdown();\r\n        const VDOM = (\r\n            <div>\r\n                <Title />\r\n                <Countdown />\r\n                <Diagram />\r\n            </div>\r\n        );\r\n        ReactDOM.render(VDOM, document.getElementById('root'));\r\n    }\r\n\r\n\r\n    /**\r\n     * Diese Methode braucht nur einmal aufzurufen, Countdown geht automatisch.\r\n     * @param countdownNumber Die Countdownzahl zu zeigen.\r\n     */\r\n    showCountdownNumber(leadTime: number) {\r\n        this.setState({ leadTime: leadTime });\r\n        PubSub.publish('startCounting', this.state.leadTime);\r\n    }\r\n\r\n    /**\r\n     * Prüft ob Countdown fertig ist und ändert den Zustand.\r\n     */\r\n    finishCountdown() {\r\n        PubSub.subscribe('finishCountdwon', () => {\r\n            this.setState({ currentState: States.NeedInstantDiagram });\r\n            this.notify();\r\n        }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Diese Methode sollte während Datenerfassung jede Sekunde von Controller aufgerufen werden, um Bild zu updaten.\r\n     * @param countdownNumber Die Countdownzahl zu zeigen\r\n     */\r\n    showDiagram(dataRows: { value: number; relativeTime: number; }[][], usedSensorNames: string[]) {\r\n       // this.setState({ dataRows: dataRows });\r\n        this.setState({ usedSensorNames: usedSensorNames });\r\n        //PubSub.publish('startDiagram', this.state.dataRows);\r\n        PubSub.publish('giveLineLabels', this.state.usedSensorNames);\r\n    }\r\n\r\n    /**\r\n     * Die Methoden für Beobachtermuster\r\n     * @param observer Beobachter,nähmlich Controller\r\n     */\r\n    attach(observer: PageController) {\r\n        this.observers.push(observer);\r\n    }\r\n\r\n    detach(observer: PageController) {\r\n        const index = this.observers.indexOf(observer, 0);\r\n        if (index > -1) {\r\n            this.observers.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    notify() {\r\n        for (let index = 0; index < this.observers.length; index++) {\r\n            const element = this.observers[index];\r\n            element.update();\r\n        }\r\n    }\r\n\r\n    getState() {\r\n        return this.state;\r\n    }\r\n\r\n}","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\index.tsx",["288","289","290","291","292"],"import React, { Component } from 'react'\r\nimport PubSub from 'pubsub-js';\r\nimport './VisualizationPage.css'\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport { MainController } from '../../../controller/MainController';\r\nimport ReactDOM from 'react-dom';\r\nimport { States } from '../State';\r\nimport FinishButton from '../../components/VisualizationComponents/FinishButton';\r\nimport ShowDiagram from '../../components/VisualizationComponents/ShowDiagram';\r\nimport DiagramList from '../../components/VisualizationComponents/DiagramList';\r\n\r\ntype Props = {\r\n};\r\n\r\nexport class VisualizationPage extends React.Component<Props, State> implements Page {\r\n    state = new State()\r\n    observers: PageController[] = [];\r\n    constructor(props: Props) {\r\n        super(props);\r\n        //<ShowDiagram />\r\n        const VDOM = (\r\n            <div className=\"visualizationpage\">\r\n\r\n                <DiagramList />\r\n                <FinishButton />\r\n            </div>\r\n        );\r\n        ReactDOM.render(VDOM, document.getElementById('root'));\r\n        this.getDatarows()\r\n        this.changetonextpage()\r\n    }\r\n\r\n\r\n    attach(observer: PageController) {\r\n        this.observers.push(observer);\r\n    }\r\n\r\n    detach(observer: PageController) {\r\n        const index = this.observers.indexOf(observer, 0);\r\n        if (index > -1) {\r\n            this.observers.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    notify() {\r\n        for (let index = 0; index < this.observers.length; index++) {\r\n            const element = this.observers[index];\r\n            element.update();\r\n        }\r\n    }\r\n\r\n    getState() {\r\n        return this.state;\r\n    }\r\n\r\n    getDatarows() {\r\n        /**   var emp = []\r\n          emp.push([{ sensorType: 85124, value: [55, 66, 12], relativeTime: 0 },\r\n          { sensorType: 85124, value: [26, 21, 2], relativeTime: 1 },\r\n          { sensorType: 85124, value: [91, 83, 50], relativeTime: 2 },\r\n          { sensorType: 85124, value: [22, 71, 23], relativeTime: 3 },\r\n          { sensorType: 85124, value: [14, 8, 77], relativeTime: 4 },\r\n          ])\r\n          emp.push([{ sensorType: 45157, value: [83, 44, 1], relativeTime: 0 },\r\n          { sensorType: 45157, value: [78, 55, 2], relativeTime: 1 },\r\n          { sensorType: 45157, value: [51, 66, 3], relativeTime: 2 },\r\n          { sensorType: 45157, value: [23, 81, 50], relativeTime: 3 },\r\n          { sensorType: 45157, value: [13, 20, 5], relativeTime: 4 },\r\n          ])\r\n          \r\n          const ex = {\r\n              dataSetID: 1,\r\n              rows: emp\r\n          }\r\n          PubSub.publish('getrows', ex)\r\n          var ex2 = []\r\n          ex2.push([{ sensorType: 123, value: [55, 66, 12], relativeTime: 0 },\r\n          { sensorType: 123, value: [26, 21, 2], relativeTime: 1 },\r\n          { sensorType: 123, value: [91, 83, 50], relativeTime: 2 },\r\n          { sensorType: 123, value: [22, 71, 23], relativeTime: 3 },\r\n          { sensorType: 123, value: [14, 8, 77], relativeTime: 4 },\r\n          ])\r\n          ex2.push([{ sensorType: 456, value: [83, 44, 1], relativeTime: 0 },\r\n          { sensorType: 456, value: [78, 55, 2], relativeTime: 1 },\r\n          { sensorType: 456, value: [51, 66, 3], relativeTime: 2 },\r\n          { sensorType: 456, value: [23, 81, 50], relativeTime: 3 },\r\n          { sensorType: 456, value: [13, 20, 5], relativeTime: 4 },\r\n          ])\r\n         \r\n          const ex22 = {\r\n              dataSetID: 2,\r\n              rows: ex2\r\n          }\r\n          PubSub.publish('getrows', ex22)\r\n          */\r\n        this.state.currentDataSet?.map((dataset) => {\r\n            PubSub.publish('getrows', dataset)\r\n        })\r\n\r\n    }\r\n\r\n    changetonextpage() {\r\n        PubSub.subscribe('changepage', (_msg: any) => {\r\n            this.state.currentState = States.ChangeToCreation\r\n            this.notify()\r\n\r\n        })\r\n    }\r\n}\r\n","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\index.tsx",["293","294","295","296"],"import React, { Component } from 'react';\r\nimport DownloadButton from '../../components/DeliveryComponents/DownloadButton';\r\nimport EmailList from '../../components/DeliveryComponents/EmailList';\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from 'react-dom';\r\nimport { States } from '../State';\r\n\r\ntype Props = {\r\n};\r\n\r\nexport class DeliveryPage extends React.Component<Props, State> implements Page {\r\n\r\n\tstate = new State();\r\n\tobservers: PageController[] = [];\r\n\tconstructor(props: Props) {\r\n\t\tsuper(props);\r\n\r\n\t\tconst VDOM = (\r\n\t\t\t<div className=\"deliverypage\">\r\n\t\t\t\t<EmailList />\r\n\t\t\t\t<DownloadButton />\r\n\t\t\t</div>\r\n\t\t);\r\n\t\tReactDOM.render(VDOM, document.getElementById('root'));\r\n\t\tthis.delivery()\r\n\t\tthis.download()\r\n\t}\r\n\r\n\tattach(observer: PageController) {\r\n\t\tthis.observers.push(observer);\r\n\t}\r\n\r\n\tdetach(observer: PageController) {\r\n\t\tconst index = this.observers.indexOf(observer, 0);\r\n\t\tif (index > -1) {\r\n\t\t\tthis.observers.splice(index, 1);\r\n\t\t}\r\n\t}\r\n\r\n\tnotify() {\r\n\t\tfor (let index = 0; index < this.observers.length; index++) {\r\n\t\t\tconst element = this.observers[index];\r\n\t\t\telement.update();\r\n\t\t}\r\n\t}\r\n\r\n\tgetState() {\r\n\t\treturn this.state;\r\n\t}\r\n\r\n\tdelivery() {\r\n\t\tPubSub.subscribe('delivery', (_msg: any, data: string[]) => {\r\n\t\t\tthis.state.currentState = States.DeliverWeb\r\n\t\t\tthis.state.chosenEmails = data\r\n\t\t\tthis.notify()\r\n\t\t})\r\n\t}\r\n\r\n\tdownload() {\r\n\t\tPubSub.subscribe('download', (_msg: any) => {\r\n\t\t\tthis.state.currentState = States.NeedDownload\r\n\t\t\tthis.notify()\r\n\t\t})\r\n\t}\r\n\r\n\r\n}\r\n","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\State.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\model\\DeviceData.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\model\\Project.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\pages\\FinishPage\\State.tsx",["297"],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\State.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\State.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\State.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\index.tsx",["298","299","300","301","302","303","304","305","306","307","308","309","310"],"import React, { Component } from 'react';\r\nimport PubSub from 'pubsub-js';\r\nimport ConstantsText from '../../components/ReferringComponents/ConstantsText';\r\nimport NewProjectButton from '../../components/ReferringComponents/NewProjectButton';\r\nimport LoadModelButton from '../../components/ReferringComponents/LoadModelButton';\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from 'react-dom';\r\nimport { States } from '../State';\r\nimport LoginWindow from '../../components/ReferringComponents/LoginWindow';\r\n\r\ntype Props = {\r\n\r\n};\r\n\r\nexport class ReferringPage extends React.Component<Props, State> implements Page {\r\n\r\n    state = new State();\r\n    observers: PageController[] = [];\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        const VDOM = (\r\n            <div>\r\n                <ConstantsText />\r\n                <LoginWindow />\r\n                <NewProjectButton />\r\n                <LoadModelButton />\r\n            </div>\r\n        );\r\n        ReactDOM.render(VDOM, document.getElementById('root'));\r\n        this.createNewProject();\r\n        this.register();\r\n        this.login();\r\n        this.getmodellist();\r\n        this.getProjectList();\r\n        this.loadproject();\r\n        this.changetovisu();\r\n        this.loadmodel();\r\n    }\r\n\r\n    attach(observer: PageController) {\r\n        this.observers.push(observer);\r\n    }\r\n\r\n    detach(observer: PageController) {\r\n        const index = this.observers.indexOf(observer, 0);\r\n        if (index > -1) {\r\n            this.observers.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    notify() {\r\n        for (let index = 0; index < this.observers.length; index++) {\r\n            const element = this.observers[index];\r\n            element.update();\r\n        }\r\n    }\r\n\r\n    getState() {\r\n        return this.state;\r\n    }\r\n\r\n    createNewProject() {\r\n        PubSub.subscribe('createnewproject', (_msg: any, data: string) => {\r\n            // console.log(this.state.currentState)\r\n            this.state.currentState = States.NewProjekt;\r\n            this.state.currentProject = { projectID: -10000, projectName: data, choosenAIModelID: -10000 };\r\n            //hier notifty for createnewProject\r\n            this.notify();\r\n            //notify for needqr\r\n            PubSub.publish('getqr', this.state.qr);\r\n        });\r\n    }\r\n\r\n    register() {\r\n        PubSub.subscribe('register', (_msg: any, data: { name: string, email: string, password: string; }) => {\r\n            this.state.adminData = data;\r\n            this.state.currentState = States.Register;\r\n            //this.setState({ adminData: data })\r\n            //this.setState({ currentState: States.Register })\r\n            //console.log(this.state.currentState)\r\n            this.notify();\r\n            this.state.wait!.then(() => {\r\n                //console.log(this.state.currentState)\r\n                let flag: boolean;\r\n                if (this.state.currentState != States.Register) {\r\n                    flag = false;\r\n                } else {\r\n                    PubSub.publish('disabled', false);\r\n                    flag = true;\r\n                }\r\n                PubSub.publish('registerstatus', flag);\r\n            });\r\n        });\r\n    }\r\n\r\n    login() {\r\n        PubSub.subscribe('login', (_msg: any, data: { name: string, email: string, password: string; }) => {\r\n            // console.log(this.state.currentState)\r\n            this.state.adminData = data;\r\n            this.state.currentState = States.Login;\r\n            this.notify();\r\n            let flag: boolean;\r\n            this.state.wait!.then(() => {\r\n                if (this.state.currentState as States === States.LoginFail as States) {\r\n                    flag = false;\r\n                } else {\r\n                    flag = true;\r\n                    PubSub.publish('disabled', false);\r\n                    PubSub.publish('getprojectlist', this.state.projectData);\r\n                }\r\n                PubSub.publish('loginstatus', flag);\r\n            });\r\n        });\r\n    }\r\n\r\n    getmodellist() {\r\n        PubSub.subscribe('needmodellist', (msg: any, data: { projectID: number; }) => {\r\n            for (let index = 0; index < this.state.projectData!.length; index++) {\r\n                if (data.projectID === this.state.projectData![index].projectID) {\r\n                    PubSub.publish('getmodellist', this.state.projectData![index]);\r\n                    return;\r\n                }\r\n\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    getProjectList() {\r\n        PubSub.subscribe('needprojectlist', () => {\r\n            PubSub.publish('getprojectlist', this.state.projectData!);\r\n        });\r\n    }\r\n\r\n    loadproject() {\r\n        PubSub.subscribe('loadproject', (_msg: any, data: { projectID: number, projectName: string, choosenAIModelID: number; }) => {\r\n            this.state.currentProject = { projectID: data.projectID, projectName: data.projectName, choosenAIModelID: -10000 };\r\n            this.state.currentState = States.LoadProject;\r\n            console.log(data.projectID);\r\n            this.notify();\r\n            PubSub.publish('getqr', this.state.qr);\r\n        });\r\n    }\r\n\r\n    changetovisu() {\r\n        PubSub.subscribe('changetovisu', (_msg: any) => {\r\n            this.state.currentState = States.ChangeToVisual;\r\n            this.notify();\r\n        });\r\n    }\r\n\r\n    loadmodel() {\r\n        PubSub.subscribe('loadmodel', (_msg: any, data: { projectID: number, projectName: string, choosenAIModelID: number; }) => {\r\n            this.state.currentProject = data;\r\n            this.state.currentState = States.LoadModel;\r\n            this.notify();\r\n        });\r\n    }\r\n}\r\n","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\index.tsx",["311","312","313"],"import React, { Component } from 'react'\r\nimport PubSub from 'pubsub-js';\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from 'react-dom';\r\nimport './ModelCreationPage.css'\r\nimport { States } from '../State'\r\nimport Train from '../../components/ModelCreationComponents/Train';\r\n\r\ntype Props = {\r\n};\r\n\r\nexport class ModelCreationPage extends React.Component<Props, State> implements Page {\r\n\tstate = new State();\r\n\tobservers: PageController[] = [];\r\n\tconstructor(props: Props) {\r\n\t\tsuper(props);\r\n\r\n\t\tconst VDOM = (\r\n\t\t\t<div className=\"modelcreationpage\">\r\n\t\t\t\t<Train />\r\n\t\t\t</div>\r\n\t\t);\r\n\r\n\t\tReactDOM.render(VDOM, document.getElementById('root'));\r\n\t\tthis.needDatabaseList()\r\n\t\tthis.train()\r\n\t}\r\n\r\n\tattach(observer: PageController) {\r\n\t\tthis.observers.push(observer);\r\n\t}\r\n\r\n\tdetach(observer: PageController) {\r\n\t\tconst index = this.observers.indexOf(observer, 0);\r\n\t\tif (index > -1) {\r\n\t\t\tthis.observers.splice(index, 1);\r\n\t\t}\r\n\t}\r\n\r\n\tnotify() {\r\n\t\tfor (let index = 0; index < this.observers.length; index++) {\r\n\t\t\tconst element = this.observers[index];\r\n\t\t\telement.update();\r\n\t\t}\r\n\t}\r\n\r\n\tgetState() {\r\n\t\treturn this.state;\r\n\t}\r\n\r\n\tneedDatabaseList() {\r\n\t\tthis.state.currentState = States.NeedDatabaseList\r\n\t\tthis.notify()\r\n\t\tlet databaseList = [\r\n\t\t\t{ dataSetID: 1, dataSetName: 'dataset1' },\r\n\t\t\t{ dataSetID: 2, dataSetName: 'dataset2' },\r\n\t\t\t{ dataSetID: 3, dataSetName: 'dataset3' }\r\n\t\t]\r\n\t\tPubSub.publish('getlist', databaseList)\r\n\t\t//PubSub.publish('getlist', this.state.dataSets)\r\n\t}\r\n\r\n\ttrain() {\r\n\t\tPubSub.subscribe('train', (_msg: any, data: { dataSets: number[], imputations: string[], classifier: string, scaler: string, extractions: string[] }) => {\r\n\t\t\t//console.log(data);\r\n\t\t\tthis.state.currentState = States.NeedKiTraining\r\n\t\t\t//this.state.trainingParameter = data\r\n\t\t\t//console.log(this.state.trainingParameter);\r\n\t\t\tthis.notify()\r\n\t\t})\r\n\t}\r\n\r\n}\r\n","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Title\\index.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Input\\index.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\model\\AIModel.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\model\\SensorData.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\model\\DataSet.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\model\\Session.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Title\\index.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Input\\Labelling\\index.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Title\\index.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Countdown\\index.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\DownloadButton\\index.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\FinishButton\\index.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\EmailList\\index.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Diagram\\index.jsx",["314","315","316"],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\State.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\State.tsx",["317","318","319","320","321","322"],"import { IState } from \"../State\";\r\nimport { States } from \"../State\";\r\nimport { QRCode, ErrorCorrectLevel, QRNumber, QRAlphaNum, QR8BitByte, QRKanji } from 'qrcode-generator-ts/js';\r\n\r\nexport class State implements IState {\r\n  currentState: States = States.NeedMessage;\r\n  languageCode: string = \"de\";\r\n  messages: { text: string, id: number; }[] = [];\r\n  projectData?: { projectID: number; projectName: string; AIModelID: number[]; }[];\r\n  currentProject?: { projectID: number, projectName: string, choosenAIModelID: number; };\r\n  // chosenModel?: string;\r\n  adminData?: { name: string, email: string, password: string; };\r\n  //minerData?:\r\n  aiUserData?: { name: string, result: string; };\r\n  labels?: { labelID: number, start: number, end: number; }[];\r\n  sessionID?: string;\r\n  //aiParameter?: \r\n  qr?: string;\r\n  wait?: Promise<any>\r\n}\r\n","D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Diagram\\index.jsx",["323","324"],"import React, { Component } from 'react';\r\nimport PubSub from 'pubsub-js';\r\n\r\nexport default class Diagram extends Component {\r\n    state = {\r\n        sensorRow: [],\r\n        datavalue: [],\r\n        time: [],\r\n        showDiagram: false,\r\n        color: ['rgba(46,139,87,1)', 'rgba(68,24,232,1)', 'rgba(238,173,14,1)', 'rgba(178,34,34,1)'],\r\n    };\r\n\r\n    render() {\r\n        PubSub.subscribe(\"startDiagram\", (dataRows) => {\r\n            this.setState({\r\n                sensorRow: [],\r\n                datavalue: [],\r\n                time: [],\r\n                showDiagram: true\r\n            });\r\n            //put each value Array in State\r\n            for (var i = 0; i < dataRows.length; i++) {\r\n                var datavalues = [];\r\n                for (var j = 0; j < dataRows[i].length; j++) {\r\n                    datavalues.push(dataRows[i][j].value);\r\n                }\r\n                this.state.datavalue.push(datavalues);\r\n            }\r\n\r\n            //put time in State\r\n            for (var j = 0; j < dataRows[0].length; j++) {\r\n                this.state.time.push(dataRows[0][j].relativeTime);\r\n            }\r\n        });\r\n        var newDatasets = [];\r\n        for (var i = 0; i < this.state.sensorRow.length; i++) {\r\n            newDatasets.push(\r\n                {\r\n                    label: this.state.sensorRow[i],\r\n                    strokeColor: this.state.color[i],\r\n                    borderWidth: 1,\r\n                    data: this.state.datavalue[i],\r\n                }\r\n            );\r\n\r\n        }\r\n        const data = {\r\n            labels: this.state.time,\r\n            datasets: newDatasets\r\n        };\r\n        const options = {\r\n            datasetFill: false,\r\n            pointDotRadius: 2,\r\n            pointHitDetectionRadius: 1,\r\n            offsetGridLines: false,\r\n        };\r\n        PubSub.subscribe(\"giveLineLabels\", (usedSensorNames) => {\r\n            this.setState({ sensorRow: usedSensorNames });\r\n        });\r\n        const lineLabels = [];\r\n        for (var i = 0; i < this.state.sensorRow.length; i++) {\r\n            lineLabels.push(<font color={this.state.color[i]}>■{this.state.sensorRow[i]}<br /></font>);\r\n        }\r\n\r\n        var LineChart = require(\"react-chartjs\").Line;\r\n\r\n        return (\r\n            <div>\r\n                {lineLabels}\r\n                <LineChart data={data} options={options} width=\"425\" height=\"275\" />\r\n            </div>\r\n        );\r\n    }\r\n}",["325","326"],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\ShowDiagram\\index.jsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\DiagramList\\index.jsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\model\\Label.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\model\\DataRow.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ConstantsText\\index.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\NewProjectButton\\index.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoginWindow\\index.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoadModelButton\\index.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\Train\\index.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\model\\DataPoint.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\model\\TimeSpan.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ChangeToVisuBtn\\index.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LinkText\\index.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\QRImage\\index.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ProjectList\\index.tsx",[],"D:\\main2\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ModelList\\index.tsx",[],{"ruleId":"327","replacedBy":"328"},{"ruleId":"329","replacedBy":"330"},{"ruleId":"331","severity":1,"message":"332","line":8,"column":37,"nodeType":"333","messageId":"334","endLine":8,"endColumn":45},{"ruleId":"331","severity":1,"message":"335","line":8,"column":47,"nodeType":"333","messageId":"334","endLine":8,"endColumn":57},{"ruleId":"331","severity":1,"message":"336","line":8,"column":59,"nodeType":"333","messageId":"334","endLine":8,"endColumn":69},{"ruleId":"331","severity":1,"message":"337","line":8,"column":71,"nodeType":"333","messageId":"334","endLine":8,"endColumn":78},{"ruleId":"331","severity":1,"message":"338","line":1,"column":17,"nodeType":"333","messageId":"334","endLine":1,"endColumn":26},{"ruleId":"339","severity":1,"message":"340","line":48,"column":13,"nodeType":"341","endLine":48,"endColumn":23},{"ruleId":"331","severity":1,"message":"338","line":1,"column":17,"nodeType":"333","messageId":"334","endLine":1,"endColumn":26},{"ruleId":"331","severity":1,"message":"342","line":10,"column":10,"nodeType":"333","messageId":"334","endLine":10,"endColumn":16},{"ruleId":"343","severity":1,"message":"344","line":16,"column":13,"nodeType":"345","messageId":"346","endLine":16,"endColumn":22,"fix":"347"},{"ruleId":"331","severity":1,"message":"338","line":1,"column":17,"nodeType":"333","messageId":"334","endLine":1,"endColumn":26},{"ruleId":"331","severity":1,"message":"348","line":7,"column":10,"nodeType":"333","messageId":"334","endLine":7,"endColumn":24},{"ruleId":"331","severity":1,"message":"349","line":11,"column":8,"nodeType":"333","messageId":"334","endLine":11,"endColumn":19},{"ruleId":"350","severity":1,"message":"351","line":98,"column":50,"nodeType":"352","messageId":"353","endLine":98,"endColumn":52},{"ruleId":"339","severity":1,"message":"340","line":106,"column":13,"nodeType":"341","endLine":106,"endColumn":23},{"ruleId":"331","severity":1,"message":"338","line":1,"column":17,"nodeType":"333","messageId":"334","endLine":1,"endColumn":26},{"ruleId":"339","severity":1,"message":"340","line":55,"column":4,"nodeType":"341","endLine":55,"endColumn":14},{"ruleId":"339","severity":1,"message":"340","line":56,"column":4,"nodeType":"341","endLine":56,"endColumn":14},{"ruleId":"339","severity":1,"message":"340","line":63,"column":4,"nodeType":"341","endLine":63,"endColumn":14},{"ruleId":"354","severity":1,"message":"355","line":2,"column":26,"nodeType":"333","messageId":"356","endLine":2,"endColumn":32},{"ruleId":"331","severity":1,"message":"338","line":1,"column":17,"nodeType":"333","messageId":"334","endLine":1,"endColumn":26},{"ruleId":"339","severity":1,"message":"340","line":68,"column":13,"nodeType":"341","endLine":68,"endColumn":23},{"ruleId":"339","severity":1,"message":"340","line":69,"column":13,"nodeType":"341","endLine":69,"endColumn":23},{"ruleId":"339","severity":1,"message":"340","line":79,"column":13,"nodeType":"341","endLine":79,"endColumn":23},{"ruleId":"339","severity":1,"message":"340","line":80,"column":13,"nodeType":"341","endLine":80,"endColumn":23},{"ruleId":"357","severity":1,"message":"358","line":88,"column":45,"nodeType":"359","messageId":"360","endLine":88,"endColumn":47},{"ruleId":"339","severity":1,"message":"340","line":102,"column":13,"nodeType":"341","endLine":102,"endColumn":23},{"ruleId":"339","severity":1,"message":"340","line":103,"column":13,"nodeType":"341","endLine":103,"endColumn":23},{"ruleId":"339","severity":1,"message":"340","line":140,"column":13,"nodeType":"341","endLine":140,"endColumn":23},{"ruleId":"339","severity":1,"message":"340","line":141,"column":13,"nodeType":"341","endLine":141,"endColumn":23},{"ruleId":"339","severity":1,"message":"340","line":150,"column":13,"nodeType":"341","endLine":150,"endColumn":23},{"ruleId":"339","severity":1,"message":"340","line":157,"column":13,"nodeType":"341","endLine":157,"endColumn":23},{"ruleId":"339","severity":1,"message":"340","line":158,"column":13,"nodeType":"341","endLine":158,"endColumn":23},{"ruleId":"331","severity":1,"message":"338","line":1,"column":17,"nodeType":"333","messageId":"334","endLine":1,"endColumn":26},{"ruleId":"339","severity":1,"message":"340","line":54,"column":3,"nodeType":"341","endLine":54,"endColumn":13},{"ruleId":"339","severity":1,"message":"340","line":68,"column":4,"nodeType":"341","endLine":68,"endColumn":14},{"ruleId":"361","severity":1,"message":"362","line":40,"column":22,"nodeType":"333","messageId":"363","endLine":40,"endColumn":23},{"ruleId":"357","severity":1,"message":"364","line":50,"column":23,"nodeType":"359","messageId":"360","endLine":50,"endColumn":25},{"ruleId":"357","severity":1,"message":"364","line":53,"column":23,"nodeType":"359","messageId":"360","endLine":53,"endColumn":25},{"ruleId":"331","severity":1,"message":"365","line":3,"column":10,"nodeType":"333","messageId":"334","endLine":3,"endColumn":16},{"ruleId":"331","severity":1,"message":"366","line":3,"column":18,"nodeType":"333","messageId":"334","endLine":3,"endColumn":35},{"ruleId":"331","severity":1,"message":"332","line":3,"column":37,"nodeType":"333","messageId":"334","endLine":3,"endColumn":45},{"ruleId":"331","severity":1,"message":"335","line":3,"column":47,"nodeType":"333","messageId":"334","endLine":3,"endColumn":57},{"ruleId":"331","severity":1,"message":"336","line":3,"column":59,"nodeType":"333","messageId":"334","endLine":3,"endColumn":69},{"ruleId":"331","severity":1,"message":"337","line":3,"column":71,"nodeType":"333","messageId":"334","endLine":3,"endColumn":78},{"ruleId":"361","severity":1,"message":"362","line":31,"column":22,"nodeType":"333","messageId":"363","endLine":31,"endColumn":23},{"ruleId":"361","severity":1,"message":"367","line":61,"column":18,"nodeType":"333","messageId":"363","endLine":61,"endColumn":19},{"ruleId":"327","replacedBy":"328"},{"ruleId":"329","replacedBy":"330"},"no-native-reassign",["368"],"no-negated-in-lhs",["369"],"@typescript-eslint/no-unused-vars","'QRNumber' is defined but never used.","Identifier","unusedVar","'QRAlphaNum' is defined but never used.","'QR8BitByte' is defined but never used.","'QRKanji' is defined but never used.","'Component' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'States' is defined but never used.","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"370","text":"371"},"'MainController' is defined but never used.","'ShowDiagram' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","@typescript-eslint/no-use-before-define","'States' was used before it was defined.","noUseBeforeDefine","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-redeclare","'j' is already defined.","redeclared","Expected '===' and instead saw '=='.","'QRCode' is defined but never used.","'ErrorCorrectLevel' is defined but never used.","'i' is already defined.","no-global-assign","no-unsafe-negation",[634,634],"()"]
>>>>>>> d5317bf8dc88d1aa9443a87793b02a9e42af5c3e
