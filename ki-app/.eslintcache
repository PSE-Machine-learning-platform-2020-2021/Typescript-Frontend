[{"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\index.tsx":"1","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\reportWebVitals.ts":"2","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\controller\\MainController.tsx":"3","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\controller\\ReferringController.tsx":"4","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Facade.tsx":"5","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\State.tsx":"6","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Language.tsx":"7","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\User.tsx":"8","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\controller\\DeliveryController.tsx":"9","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\controller\\VisualizationController.tsx":"10","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\index.tsx":"11","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Device.tsx":"12","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Project.tsx":"13","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\controller\\ModelCreationController.tsx":"14","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\index.tsx":"15","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\index.tsx":"16","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\State.tsx":"17","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Session.tsx":"18","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\AIModel.tsx":"19","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Sensor.tsx":"20","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\DataSet.tsx":"21","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\State.tsx":"22","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\index.tsx":"23","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\State.tsx":"24","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Countdown\\index.tsx":"25","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Title\\index.tsx":"26","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Diagram\\index.tsx":"27","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\DataRow.tsx":"28","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Label.tsx":"29","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\DownloadButton\\index.tsx":"30","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\TrainButton\\index.tsx":"31","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\State.tsx":"32","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\TimeSpan.tsx":"33","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\DataPoint.tsx":"34","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\ImputationList\\index.tsx":"35","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\FeatureList\\index.tsx":"36","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\NormalizationList\\index.tsx":"37","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\ModelTypeList\\index.tsx":"38","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\DatasetList\\index.jsx":"39","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\AddDatasetButton\\index.jsx":"40","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\DatasetItem\\index.jsx":"41","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\FinishPage\\index.tsx":"42","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\FinishPage\\State.tsx":"43","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Body\\index.tsx":"44","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Title\\index.tsx":"45","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\index.tsx":"46","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\State.tsx":"47","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Input\\index.tsx":"48","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Title\\index.tsx":"49","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\DatabaseConnector.tsx":"50","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\index.tsx":"51","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\ShowImage\\index.tsx":"52","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\State.tsx":"53","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ConstantsText\\index.tsx":"54","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoadModelButton\\index.tsx":"55","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\NewProjectButton\\index.tsx":"56","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoginWindow\\index.tsx":"57","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\QRImage\\index.tsx":"58","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ChangeToVisuBtn\\index.tsx":"59","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LinkText\\index.tsx":"60","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ProjectList\\index.tsx":"61","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ModelList\\index.tsx":"62","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\ImageList\\index.tsx":"63","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\FinishButton\\index.tsx":"64","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Input\\Labelling\\index.tsx":"65","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\EmailList\\index.tsx":"66","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\index.tsx":"67","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\reportWebVitals.ts":"68","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\MainController.tsx":"69","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Facade.tsx":"70","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\ReferringController.tsx":"71","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\State.tsx":"72","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Language.tsx":"73","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\User.tsx":"74","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DatabaseConnector.tsx":"75","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\VisualizationController.tsx":"76","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\DeliveryController.tsx":"77","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Device.tsx":"78","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Project.tsx":"79","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\ModelCreationController.tsx":"80","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\FinishPage\\index.tsx":"81","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\index.tsx":"82","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\index.tsx":"83","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\AIModel.tsx":"84","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Sensor.tsx":"85","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DataSet.tsx":"86","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Session.tsx":"87","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\index.tsx":"88","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\FinishPage\\State.tsx":"89","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\State.tsx":"90","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\State.tsx":"91","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DataRow.tsx":"92","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Label.tsx":"93","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\State.tsx":"94","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\ImageList\\index.tsx":"95","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\ShowImage\\index.tsx":"96","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Body\\index.tsx":"97","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Title\\index.tsx":"98","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Input\\Labelling\\index.tsx":"99","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\FinishButton\\index.tsx":"100","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\EmailList\\index.tsx":"101","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\DownloadButton\\index.tsx":"102","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DataPoint.tsx":"103","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\TimeSpan.tsx":"104","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\ImputationList\\index.tsx":"105","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\NormalizationList\\index.tsx":"106","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\FeatureList\\index.tsx":"107","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\TrainButton\\index.tsx":"108","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\ModelTypeList\\index.tsx":"109","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\DatasetList\\index.jsx":"110","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\AddDatasetButton\\index.jsx":"111","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\DatasetItem\\index.jsx":"112","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\motion-sensors.js":"113","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\sensor.js":"114"},{"size":480,"mtime":1613137427588,"results":"115","hashOfConfig":"116"},{"size":440,"mtime":1613137427601,"results":"117","hashOfConfig":"116"},{"size":3062,"mtime":1613603258726,"results":"118","hashOfConfig":"116"},{"size":6098,"mtime":1613658489958,"results":"119","hashOfConfig":"116"},{"size":16890,"mtime":1613603258745,"results":"120","hashOfConfig":"116"},{"size":3673,"mtime":1613658477479,"results":"121","hashOfConfig":"116"},{"size":1875,"mtime":1613603258755,"results":"122","hashOfConfig":"116"},{"size":14228,"mtime":1613603258760,"results":"123","hashOfConfig":"116"},{"size":2285,"mtime":1613474119019,"results":"124","hashOfConfig":"116"},{"size":3510,"mtime":1613489365782,"results":"125","hashOfConfig":"116"},{"size":2628,"mtime":1613269824875,"results":"126","hashOfConfig":"116"},{"size":1767,"mtime":1613315191901,"results":"127","hashOfConfig":"116"},{"size":7572,"mtime":1613603258757,"results":"128","hashOfConfig":"116"},{"size":1451,"mtime":1613489365779,"results":"129","hashOfConfig":"116"},{"size":1621,"mtime":1613658477477,"results":"130","hashOfConfig":"116"},{"size":2373,"mtime":1613658477483,"results":"131","hashOfConfig":"116"},{"size":361,"mtime":1613269762000,"results":"132","hashOfConfig":"116"},{"size":1581,"mtime":1613317708872,"results":"133","hashOfConfig":"116"},{"size":485,"mtime":1613137897360,"results":"134","hashOfConfig":"116"},{"size":5849,"mtime":1613315191917,"results":"135","hashOfConfig":"116"},{"size":6394,"mtime":1613315191898,"results":"136","hashOfConfig":"116"},{"size":276,"mtime":1613658477470,"results":"137","hashOfConfig":"116"},{"size":3163,"mtime":1613474119060,"results":"138","hashOfConfig":"116"},{"size":297,"mtime":1613603258831,"results":"139","hashOfConfig":"116"},{"size":1074,"mtime":1613389246503,"results":"140","hashOfConfig":"116"},{"size":1002,"mtime":1613264837135,"results":"141","hashOfConfig":"116"},{"size":363,"mtime":1613265648173,"results":"142","hashOfConfig":"116"},{"size":3361,"mtime":1613315191894,"results":"143","hashOfConfig":"116"},{"size":1787,"mtime":1613137897374,"results":"144","hashOfConfig":"116"},{"size":363,"mtime":1613658477448,"results":"145","hashOfConfig":"116"},{"size":327,"mtime":1613137427646,"results":"146","hashOfConfig":"116"},{"size":578,"mtime":1613137427680,"results":"147","hashOfConfig":"116"},{"size":1370,"mtime":1613137897385,"results":"148","hashOfConfig":"116"},{"size":927,"mtime":1613137897362,"results":"149","hashOfConfig":"116"},{"size":1093,"mtime":1613137427642,"results":"150","hashOfConfig":"116"},{"size":1442,"mtime":1613137427641,"results":"151","hashOfConfig":"116"},{"size":1274,"mtime":1613137427645,"results":"152","hashOfConfig":"116"},{"size":1200,"mtime":1613137427644,"results":"153","hashOfConfig":"116"},{"size":666,"mtime":1613137427640,"results":"154","hashOfConfig":"116"},{"size":2573,"mtime":1613137427638,"results":"155","hashOfConfig":"116"},{"size":1021,"mtime":1613137427639,"results":"156","hashOfConfig":"116"},{"size":1640,"mtime":1613659623641,"results":"157","hashOfConfig":"116"},{"size":339,"mtime":1613659559327,"results":"158","hashOfConfig":"116"},{"size":594,"mtime":1613659800645,"results":"159","hashOfConfig":"116"},{"size":1000,"mtime":1613137427636,"results":"160","hashOfConfig":"116"},{"size":2311,"mtime":1613488950223,"results":"161","hashOfConfig":"116"},{"size":511,"mtime":1613488556567,"results":"162","hashOfConfig":"116"},{"size":3829,"mtime":1613489338363,"results":"163","hashOfConfig":"116"},{"size":1002,"mtime":1613137427662,"results":"164","hashOfConfig":"116"},{"size":11479,"mtime":1613658477444,"results":"165","hashOfConfig":"116"},{"size":5832,"mtime":1613603258785,"results":"166","hashOfConfig":"116"},{"size":700,"mtime":1613603258779,"results":"167","hashOfConfig":"116"},{"size":820,"mtime":1613603258783,"results":"168","hashOfConfig":"116"},{"size":229,"mtime":1613137427648,"results":"169","hashOfConfig":"116"},{"size":484,"mtime":1613474119047,"results":"170","hashOfConfig":"116"},{"size":975,"mtime":1613474119053,"results":"171","hashOfConfig":"116"},{"size":3244,"mtime":1613658477460,"results":"172","hashOfConfig":"116"},{"size":514,"mtime":1613474119058,"results":"173","hashOfConfig":"116"},{"size":397,"mtime":1613474119043,"results":"174","hashOfConfig":"116"},{"size":646,"mtime":1613474119045,"results":"175","hashOfConfig":"116"},{"size":3090,"mtime":1613474119056,"results":"176","hashOfConfig":"116"},{"size":1866,"mtime":1613658477463,"results":"177","hashOfConfig":"116"},{"size":1760,"mtime":1613603258773,"results":"178","hashOfConfig":"116"},{"size":366,"mtime":1613658477468,"results":"179","hashOfConfig":"116"},{"size":2678,"mtime":1613658477453,"results":"180","hashOfConfig":"116"},{"size":5856,"mtime":1613658477450,"results":"181","hashOfConfig":"116"},{"size":480,"mtime":1613146123193,"results":"182","hashOfConfig":"183"},{"size":440,"mtime":1613146123200,"results":"184","hashOfConfig":"183"},{"size":3062,"mtime":1613491611442,"results":"185","hashOfConfig":"183"},{"size":17018,"mtime":1613749402199,"results":"186","hashOfConfig":"183"},{"size":6098,"mtime":1613662337781,"results":"187","hashOfConfig":"183"},{"size":3731,"mtime":1613743360230,"results":"188","hashOfConfig":"183"},{"size":1875,"mtime":1613491631620,"results":"189","hashOfConfig":"183"},{"size":14228,"mtime":1613491631621,"results":"190","hashOfConfig":"183"},{"size":11502,"mtime":1613743683455,"results":"191","hashOfConfig":"183"},{"size":3510,"mtime":1613491611449,"results":"192","hashOfConfig":"183"},{"size":2286,"mtime":1613662337780,"results":"193","hashOfConfig":"183"},{"size":1767,"mtime":1613280191748,"results":"194","hashOfConfig":"183"},{"size":7572,"mtime":1613491631620,"results":"195","hashOfConfig":"183"},{"size":1451,"mtime":1613491611443,"results":"196","hashOfConfig":"183"},{"size":1640,"mtime":1613662337791,"results":"197","hashOfConfig":"183"},{"size":2373,"mtime":1613662337792,"results":"198","hashOfConfig":"183"},{"size":1621,"mtime":1613662337789,"results":"199","hashOfConfig":"183"},{"size":485,"mtime":1613280191739,"results":"200","hashOfConfig":"183"},{"size":6149,"mtime":1613755099777,"results":"201","hashOfConfig":"183"},{"size":6394,"mtime":1613280191746,"results":"202","hashOfConfig":"183"},{"size":1581,"mtime":1613291060196,"results":"203","hashOfConfig":"183"},{"size":3163,"mtime":1613491611467,"results":"204","hashOfConfig":"183"},{"size":339,"mtime":1613662337790,"results":"205","hashOfConfig":"183"},{"size":297,"mtime":1613497745957,"results":"206","hashOfConfig":"183"},{"size":276,"mtime":1613662337789,"results":"207","hashOfConfig":"183"},{"size":3361,"mtime":1613280191744,"results":"208","hashOfConfig":"183"},{"size":1787,"mtime":1613280192336,"results":"209","hashOfConfig":"183"},{"size":578,"mtime":1613146123248,"results":"210","hashOfConfig":"183"},{"size":1760,"mtime":1613497745953,"results":"211","hashOfConfig":"183"},{"size":700,"mtime":1613497745955,"results":"212","hashOfConfig":"183"},{"size":594,"mtime":1613662337784,"results":"213","hashOfConfig":"183"},{"size":1000,"mtime":1613146123218,"results":"214","hashOfConfig":"183"},{"size":2678,"mtime":1613662337785,"results":"215","hashOfConfig":"183"},{"size":366,"mtime":1613662337788,"results":"216","hashOfConfig":"183"},{"size":5856,"mtime":1613662337783,"results":"217","hashOfConfig":"183"},{"size":363,"mtime":1613662337782,"results":"218","hashOfConfig":"183"},{"size":927,"mtime":1613280191742,"results":"219","hashOfConfig":"183"},{"size":1370,"mtime":1613280192349,"results":"220","hashOfConfig":"183"},{"size":1093,"mtime":1613146123222,"results":"221","hashOfConfig":"183"},{"size":1274,"mtime":1613146123223,"results":"222","hashOfConfig":"183"},{"size":1442,"mtime":1613146123222,"results":"223","hashOfConfig":"183"},{"size":327,"mtime":1613146123224,"results":"224","hashOfConfig":"183"},{"size":1200,"mtime":1613146123223,"results":"225","hashOfConfig":"183"},{"size":666,"mtime":1613146123221,"results":"226","hashOfConfig":"183"},{"size":2573,"mtime":1613146123219,"results":"227","hashOfConfig":"183"},{"size":1021,"mtime":1613146123220,"results":"228","hashOfConfig":"183"},{"size":11909,"mtime":1578282058000,"results":"229","hashOfConfig":"183"},{"size":6130,"mtime":1578282058000,"results":"230","hashOfConfig":"183"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"234"},"14qbaph",{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"234"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"234"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"234"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"234"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"259","usedDeprecatedRules":"260"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"234"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"234"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"234"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"234"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"234"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"234"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"234"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296","usedDeprecatedRules":"260"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311","usedDeprecatedRules":"234"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"326"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"326"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"326"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"333","messages":"334","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341","usedDeprecatedRules":"342"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"347","usedDeprecatedRules":"342"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354","usedDeprecatedRules":"355"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"360","usedDeprecatedRules":"355"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"355"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"355"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"355"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"355"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"355"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"355"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"355"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"377","usedDeprecatedRules":"355"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"355"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"388","messages":"389","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"390"},"fl9nei",{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"390"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"390"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"397","usedDeprecatedRules":"390"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"390"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"390"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"390"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"390"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"408","usedDeprecatedRules":"390"},{"filePath":"409","messages":"410","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"411","usedDeprecatedRules":"390"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"414","usedDeprecatedRules":"390"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"390"},{"filePath":"417","messages":"418","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"419","usedDeprecatedRules":"390"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"390"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"424","usedDeprecatedRules":"390"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"427","usedDeprecatedRules":"390"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"430","usedDeprecatedRules":"390"},{"filePath":"431","messages":"432","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"390"},{"filePath":"433","messages":"434","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"435","messages":"436","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"390"},{"filePath":"437","messages":"438","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"390"},{"filePath":"439","messages":"440","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"390"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"443","usedDeprecatedRules":"390"},{"filePath":"444","messages":"445","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"390"},{"filePath":"446","messages":"447","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"390"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"390"},{"filePath":"450","messages":"451","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"390"},{"filePath":"452","messages":"453","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311","usedDeprecatedRules":"390"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"390"},{"filePath":"456","messages":"457","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"390"},{"filePath":"458","messages":"459","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"390"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"390"},{"filePath":"462","messages":"463","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"390"},{"filePath":"464","messages":"465","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"390"},{"filePath":"466","messages":"467","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"468","usedDeprecatedRules":"390"},{"filePath":"469","messages":"470","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"390"},{"filePath":"471","messages":"472","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"390"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"390"},{"filePath":"475","messages":"476","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"390"},{"filePath":"477","messages":"478","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"390"},{"filePath":"479","messages":"480","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"390"},{"filePath":"481","messages":"482","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"390"},{"filePath":"483","messages":"484","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"390"},{"filePath":"485","messages":"486","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"487"},{"filePath":"488","messages":"489","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"487"},{"filePath":"490","messages":"491","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"487"},{"filePath":"492","messages":"493","errorCount":4,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"494"},{"filePath":"495","messages":"496","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"497"},"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\index.tsx",["498","499"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { MainController } from './controller/MainController';\r\n\r\nMainController.getInstance().startApp();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n",["500","501"],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\reportWebVitals.ts",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\controller\\MainController.tsx",["502","503"],"import { PageController } from \"./PageController\";\r\nimport { RefferingController } from \"./ReferringController\";\r\nimport { MainControllerInterface } from \"./MainControllerInterface\";\r\nimport { IState, States } from \"../view/pages/State\";\r\nimport { Facade } from \"../model/Facade\";\r\nimport { StartController } from \"./StartController\";\r\n\r\nexport class MainController implements MainControllerInterface {\r\n  private facade: Facade;\r\n\r\n  private static mainController: MainController;\r\n\r\n  private currentPageController: PageController | undefined;\r\n\r\n  /**\r\n   * Konstruktor des MainControllers. Holt sich die Fassade.\r\n   */\r\n  constructor() {\r\n    this.facade = new Facade(\"de-de\");\r\n  }\r\n\r\n  /**\r\n   * Gibt sich selber zurück und sorgt dafür das nur ein MainController besteht.\r\n   * @returns MainController\r\n   */\r\n  static getInstance() {\r\n    if (this.mainController === undefined) {\r\n      this.mainController = new MainController();\r\n      return this.mainController;\r\n    }\r\n    return this.mainController;\r\n  }\r\n\r\n  /**\r\n   * Prüft ob das Gerät auf das Internet zugreifen kann.\r\n   * @returns Gibt true zurück falls eine Internetverbindung besteht, sonst wird false zurück gegeben.\r\n   */\r\n  checkConnection() {\r\n    return window.navigator.onLine;\r\n  }\r\n\r\n  /**\r\n   * Prüft ob der Benutzer angemeldet ist.\r\n   * @returns Gibt true zurück falls der Benutzer angemeldet ist, sonst wird false zurück gegeben.\r\n   */\r\n  checkLoginStatus() {\r\n    return false;//this.facade.checkLogin();\r\n  }\r\n\r\n  // static getSession() {\r\n  //    return false\r\n  //}\r\n\r\n  /**\r\n   * Setzt den momentanen Seitenverwalter neu\r\n   * @param destinationPageController Der neue Seitenverwalter\r\n   */\r\n  changeTo(destinationPageController: PageController) {\r\n    this.currentPageController = destinationPageController;\r\n  }\r\n\r\n  /**\r\n   * Andwendungstart für einen Desktop\r\n   */\r\n  startApp() {\r\n    let refferingController: RefferingController = new RefferingController();\r\n    this.changeTo(refferingController);\r\n  }\r\n\r\n  /**\r\n   * @returns Gibt die Fassade zurück\r\n   */\r\n  getFacade() {\r\n    return this.facade;\r\n  }\r\n\r\n  /**\r\n   * @param ids Alle ids, zu denen man die Texte möchte.\r\n   * @returns Gibt alle texte zu den übergebenen ids zurück.\r\n   */\r\n  getMessage(messages: { text: string, id: number; }[]) {\r\n    let messageIDs: number[] = [];\r\n    for (let index = 0; index < messages.length; index++) {\r\n      messageIDs.push(messages[index].id);\r\n    }\r\n    let texts: string[] = [];\r\n    for (let index = 0; index < messages.length; index++) {\r\n      messages[index].text = texts[index];\r\n      return messages;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param languageCode Das Sprachkürzel als string.\r\n   * @returns Gibt true zurück falls der wechsel erfolgt ist, sonst false.\r\n   */\r\n  setLanguage(languageCode: string) {\r\n    let nextState: States;\r\n    let success = this.getFacade().setLanguage(languageCode);\r\n    if (success) {\r\n      nextState = States.NeedMessage;\r\n    } else {\r\n      nextState = States.LoadError;\r\n    }\r\n    return nextState;\r\n  }\r\n}\r\n","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\controller\\ReferringController.tsx",["504","505","506","507","508","509","510"],"import { Page } from \"../view/pages/PageInterface\";\r\nimport { IState, States } from \"../view/pages/State\";\r\nimport { PageController } from \"./PageController\";\r\nimport { MainController } from \"./MainController\";\r\nimport { DeliveryController } from \"./DeliveryController\";\r\nimport { VisualizationController } from \"./VisualizationController\";\r\nimport { VisualizationPage } from \"../view/pages/VisualizationPage\";\r\nimport { FinishPage } from \"../view/pages/FinishPage\";\r\nimport { QRCode, ErrorCorrectLevel, QRNumber, QRAlphaNum, QR8BitByte, QRKanji } from 'qrcode-generator-ts/js';\r\n\r\n\r\nexport class RefferingController implements PageController {\r\n    private page: Page;\r\n    private state: IState;\r\n\r\n    /**\r\n     * Konstruktor des Seitenverwalters. Registriert sich als Beobachter auf seiner Seite und setzt den Start Status. \r\n     */\r\n    constructor() {\r\n        this.page = new FinishPage({});\r\n        this.page.attach(this);\r\n        this.state = this.page.getState();\r\n        this.update();\r\n    }\r\n\r\n    /**\r\n     * Die Update Methode des Seitenverwalters.\r\n     */\r\n    update() {\r\n        this.state = this.page.getState();\r\n        switch (this.state.currentState) {\r\n            case States.LoadProject:\r\n                this.loadProject();\r\n                break;\r\n            case States.NeedQRC:\r\n                this.createQR();\r\n                break;\r\n            case States.Register:\r\n                this.register();\r\n                break;\r\n            case States.Login:\r\n                this.login();\r\n                break;\r\n            case States.NewProjekt:\r\n                this.createNewProject();\r\n                break;\r\n            case States.LoadProject:\r\n                this.loadProject();\r\n                break;\r\n            case States.LoadModel:\r\n                this.loadModel();\r\n                break;\r\n            case States.SetLanguage:\r\n                this.page.setState(MainController.getInstance().setLanguage(this.state.languageCode));\r\n                break;\r\n            case States.NeedMessage:\r\n                this.page.setState(MainController.getInstance().getMessage(this.state.messages));\r\n                break;\r\n            case States.Register:\r\n                this.register();\r\n                break;\r\n            case States.ChangeToVisual:\r\n                MainController.getInstance().changeTo(new VisualizationController(this.state.currentProject!));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Logt den Benutzer ein\r\n     */\r\n    login() {\r\n        let adminData: { name: string, email: string, password: string; } = this.state.adminData!;\r\n        let loginSucess: Promise<boolean> = MainController.getInstance().getFacade().loginAdmin(adminData.email, adminData.password);\r\n        loginSucess.then((value: boolean) => {\r\n            if (value) {\r\n                let projectData: Promise<{ projectID: number; projectName: string; AIModelID: number[]; }[]> = MainController.getInstance().getFacade().getProjectMetas();\r\n                projectData.then((data: { projectID: number; projectName: string; AIModelID: number[]; }[]) => {\r\n                    this.state.projectData! = data;\r\n                });\r\n\r\n            } else {\r\n                this.state.currentState = States.LoginFail;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Registriert den Benutzer\r\n     */\r\n    register() {\r\n        let adminData: { name: string, email: string, password: string; } = this.state.adminData!;\r\n        let loginSucess: Promise<boolean> = MainController.getInstance().getFacade().registerAdmin(adminData.name, adminData.email, adminData.password);\r\n        loginSucess.then((value: boolean) => {\r\n            if (!value) {\r\n                this.state.currentState = States.LoginFail;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Erstellt ein QRCode und übergibt in an die Seite\r\n     */\r\n    createQR() {\r\n        const url = new URL(document.URL);\r\n        url.searchParams.append(\"SessionID\", MainController.getInstance().getFacade().getSessionID().toString());\r\n        let link: string = url.toString();\r\n        var qr = new QRCode();\r\n        qr.setTypeNumber(5);\r\n        qr.setErrorCorrectLevel(ErrorCorrectLevel.L);\r\n        qr.addData(link);\r\n        qr.make();\r\n        this.state.qr = qr.toDataURL();\r\n        this.state.currentState = States.SetQRC;\r\n    }\r\n\r\n    /**\r\n     * Erstelle ein neues Projekt, welches auch als momentanes Projekt gesetzt wird.\r\n     */\r\n    createNewProject() {\r\n        let sucess: Promise<boolean> = MainController.getInstance().getFacade().createProject(this.state.currentProject!.projectName);\r\n        sucess.then((value: boolean) => {\r\n            if (value) {\r\n                this.state.currentState = States.NeedQRC;\r\n            } else {\r\n                this.state.currentState = States.LoadError;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Setzt ein Projekt als momentanes Projekt\r\n     */\r\n    loadProject() {\r\n        let projectId: number = this.state.currentProject!.projectID!;\r\n        let sucess: Promise<boolean> = MainController.getInstance().getFacade().loadProject(projectId);\r\n        sucess.then((value: boolean) => {\r\n            if (value) {\r\n                this.state.currentState = States.NeedQRC;\r\n            } else {\r\n                this.state.currentState = States.LoadError;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Läde ein Modell und wechselt zur delivery Seite\r\n     */\r\n    loadModel() {\r\n        let projectId: number = this.state.currentProject!.projectID;\r\n        let sucess: Promise<boolean> = MainController.getInstance().getFacade().loadProject(projectId);\r\n        sucess.then((value: boolean) => {\r\n            if (value) {\r\n                let deliveryConroller: DeliveryController = new DeliveryController(this.state.currentProject!);\r\n                MainController.getInstance().changeTo(deliveryConroller);\r\n            } else {\r\n                this.state.currentState = States.LoadError;\r\n            }\r\n        });\r\n    }\r\n}","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Facade.tsx",["511"],"import { DeliveryFormat } from \"./DeliveryFormat\";\r\nimport { ExplorerConnector } from \"./ExplorerConnector\";\r\nimport { Language } from \"./Language\";\r\nimport { SensorData } from \"./Sensor\";\r\nimport { Session } from \"./Session\";\r\nimport { Admin, Dataminer, AIModelUser, User } from \"./User\";\r\n\r\ninterface FacadeInterface {\r\n  createDataSet(sensorTypes: string[], dataSetName: string): boolean;\r\n  sendDataPoint(dataRowID: number, value: number[]): boolean;\r\n  readDataPoint(dataRowID: number): object;\r\n  loadProject(projectID: number): boolean;\r\n  getProjectMetas(): string[];\r\n  getDataSetMeta(): string[];\r\n  getSessionID(): number;\r\n  getDataRows(dataSetID: number): number[][][];\r\n  getCurrentDataRows(): { value: number, relativeTime: number; }[];\r\n  getMessage(messageID: number): string;\r\n  setLanguage(languageCode: string): boolean;\r\n  getLanguageMetas(): object[];\r\n  getEmail(): string;\r\n  deleteDataSet(dataSetID: number): boolean;\r\n  registerAdmin(adminName: string, email: string, password: string): boolean;\r\n  registerDataminer(dataminerName: string, sessionID: number): boolean;\r\n  registerAIModelUser(aiModelUserName: string): boolean;\r\n  loginAdmin(email: string, password: string): boolean;\r\n  logoutAdmin(): boolean;\r\n  createProject(projectName: string): boolean;\r\n  setLabel(labelID: number, start: number, end: number): boolean;\r\n  createLabel(): number; //labelid von datenbank\r\n  getLabels(): object[];\r\n  checkLogin(): boolean;\r\n  classify(aiId: number, dataSetId: number, callBack: Function): void;\r\n  getAIModel(format: DeliveryFormat): object;\r\n  applyModel(modeldata: object): void;\r\n} export type { FacadeInterface };\r\n\r\n/**\r\n * Die Facade stellt alle interaktionen mit dem Model zur Verfügung\r\n */\r\nexport class Facade {\r\n  private language: Language; //Alle Nachrichten, in der geladenen Sprache\r\n  private explorerConnector: ExplorerConnector; //Die Verbindung zur Datenbank\r\n  private user?: User; //Der Benutzer, entweder Admin, Datenerfasser oder AIModelUser\r\n\r\n\r\n  /**\r\n   * Erstellt die Facade\r\n   * @param languageCode der Sprachcode von der Sprache, die geladen werden soll\r\n   */\r\n  constructor(languageCode: string) {\r\n    this.explorerConnector = new ExplorerConnector();\r\n    this.language = new Language(this.explorerConnector.loadLanguage(languageCode));\r\n  }\r\n\r\n  /**\r\n   * Erstellt ein Datensatz\r\n   * @param sensorTypeID muss der Sensor Typ ID von einem Sensor des Gerätes übereinstimmen\r\n   * @param dataSetName Name des Datensatzes\r\n   * @returns true, wenn der Datensatz erstellt wurde. Dies ist der Fall, wenn ein Benutzer existiert welcher in einer Session ist und alle Sensortypen existieren.\r\n   */\r\n  createDataSet(sensorTypeID: number[], dataSetName: string): boolean {\r\n    if (this.user != null) {\r\n      let dataminerName: string = this.user.getName();\r\n      let sessionID: number = this.getSessionID();\r\n      let dataRowSensors: SensorData[] = this.user.getDeviceSensors(sensorTypeID);\r\n      if (dataRowSensors.length > 0 && dataRowSensors.length === sensorTypeID.length && sessionID >= 0) {\r\n        let dataSetID: number = this.explorerConnector.createDataSet(sessionID, sensorTypeID, dataminerName, dataSetName);\r\n        return this.user.createDataSet(dataRowSensors, dataSetID, dataSetName);\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Sendet den Datenpunkt an die Datenbank\r\n   * @param dataRowID die ID der aktuellen Datenreihe des eingelesenen Datenpunkts\r\n   * @param value der SensorWert\r\n   * @param relativeTime die relative Zeit zum Aufnahmestart in Millisekunden\r\n   * @return true, wenn der Datenpunkt erfolgreich an die Datenbank gesendet wurde\r\n   */\r\n  sendDataPoint(dataRowID: number, value: number, relativeTime: number): boolean {\r\n    if (this.user != null) {\r\n      let sessionID: number = this.getSessionID();\r\n      let dataSetID: number = this.user.getCurrentDataSetID();\r\n      return this.explorerConnector.sendDataPoint(sessionID, dataSetID, dataRowID, value, relativeTime);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Liest für den aktuellen Datensatz den Sensor aus von der Datenreihe mit der übergebenen ID\r\n   * @param dataRowID die DatenreihenID\r\n   */\r\n  readDataPoint(dataRowID: number): { dataPoint?: { value: number, relativeTime: number; }; } {\r\n    if (this.user != null) {\r\n      return this.user.readDataPoint(dataRowID);\r\n    }\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Lädt aus der Datenbank das Projekt mit der übergebenen ID, hierfür muss der Admin angemeldet sein\r\n   * @param projectID die Projekt ID\r\n   * @returns true, wenn das Projekt erfolgreich geladen wurde dies tritt nur ein, wenn eine Verbindung zur Datenbank besteht,\r\n   *          die Projekt ID existiert und der Admin dafür angemeldet ist\r\n   */\r\n  loadProject(projectID: number): boolean {\r\n    if (this.user != null && this.user instanceof Admin && !this.user.existProject(projectID)) {\r\n      let adminEmail: string = this.user.getEmail();\r\n      return this.user.loadProject(this.explorerConnector.loadProject(adminEmail, projectID));\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Lädt vom aktuell angemeldeten Admin von seinen Projekten den Namen und die die Projekt ID\r\n   * @returns Von allen Projekten des Admins Projekt ID und Projektname\r\n   */\r\n  getProjectMetas(): { projectID: number, projectName: string, AIModelID: number[]; }[] {\r\n    return this.explorerConnector.getProjectMetas(this.getAdminEmail());\r\n  }\r\n\r\n  /**\r\n   * Gibt vom aktuellen Projekt von allen Datensätzen die Datensatz ID und der Datensatz Name zurück\r\n   */\r\n  getDataSetMetas(): { dataSetID: number, dataSetName: string; }[] {\r\n    if (this.user != null) {\r\n      return this.user.getDataSetMetas();\r\n    }\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Gibt die Session ID des aktuellen Projekts zurück, -1 falls kein aktuelles Projekt existiert\r\n   */\r\n  getSessionID(): number {\r\n    if (this.user != null) {\r\n      return this.user.getSessionID();\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Gibt vom aktuellen Projekt die Datenreihen der Datensatz ID zurück und setzt diesen Datensatz als aktuellen Datensatz\r\n   * @param dataSetID die Datensatz ID von der die Datenreihen gelesen werden sollen\r\n   * @returns die Sensordaten von der Datenreihe\r\n   */\r\n  getDataRows(dataSetID: number): { dataRows?: { value: number, relativeTime: number; }[][]; } {\r\n    if (this.user != null) {\r\n      return this.user.getDataRows(dataSetID);\r\n    }\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Gibt vom aktuellen Projekt die Datenreihen des aktuellen Datensatzes zurück\r\n   * @param dataSetID die Datensatz ID von der die Datenreihen gelesen werden sollen\r\n   * @returns die Sensordaten von der Datenreihe\r\n   */\r\n  getCurrentDataRows(): { dataRows?: { value: number, relativeTime: number; }[][]; } {\r\n    if (this.user != null) {\r\n      return this.user.getCurrentDataRows();\r\n    }\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Gibt aus der geladenen Sprache die Nachrichten die über die IDs angegeben werden\r\n   * @param messageID alle IDs, von denen die Sprachnachricht geladen werden soll\r\n   * @returns alle Nachrichten, in der gleichen Reihenfolge wie angefordert\r\n   */\r\n  getMessage(messageID: number[]): { messageID: number, message: string; }[] {\r\n    return this.language.getMessage(messageID);\r\n  }\r\n\r\n  /**\r\n   * Gibt die auswählbaren Sensoren als ID mit ihrer Art in der Passenden Sprache zurück\r\n   */\r\n  getAvailableSensors(): { sensorTypID: number, sensorType: string; }[] {\r\n    if (this.user != null) {\r\n      var sensors: { sensorTypID: number, sensorType: string; }[] = [];\r\n      let message: { messageID: number, message: string; }[] = this.language.getMessage(this.user.getAvailableSensors());\r\n      for (let i = 0; i < message.length; i++) {\r\n        sensors.push({ sensorTypID: message[i].messageID, sensorType: message[i].message });\r\n      }\r\n      return sensors;\r\n    }\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Lädt die Sprache aus der Datenbank mit dem übergebenen Sprachcode\r\n   * @param languageCode Sprachcode\r\n   * @returns true, falls die Sprache erfolgreich geladen wurde\r\n   */\r\n  setLanguage(languageCode: string): boolean {\r\n    if (languageCode !== this.language.getLanguageCode()) {\r\n      let language: string[] = this.explorerConnector.loadLanguage(languageCode);\r\n      return this.language.setLanguage(language);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Gibt von allen in der Datenbank verfügbaren Sprachen den Sprachcode sowie den Sprachennamen zurück\r\n   */\r\n  getLanguageMetas(): { languageCode: number, languageName: string; }[] {\r\n    return this.explorerConnector.getLanguageMetas();\r\n  }\r\n\r\n  /**\r\n   * Gibt die Email vom Admin zurück, diese kann leer sein falls kein Admin angemeldet ist\r\n   */\r\n  getAdminEmail(): string {\r\n    if (this.user instanceof Admin) {\r\n      return this.user.getEmail();\r\n    }\r\n    return \"\";\r\n  }\r\n\r\n  /**\r\n   * Löscht den Datensatz mit der übergebenen Datensatz ID\r\n   * @param dataSetID die Datensatz ID\r\n   * @returns true, wenn das löschen erfolgreich ist\r\n   */\r\n  deleteDataSet(dataSetID: number): boolean {\r\n    if (this.user != null) {\r\n      let projectID: number = this.user.deleteDataSet(dataSetID);\r\n      if (projectID >= 0) {\r\n        let adminEmail: string = this.getAdminEmail();\r\n        this.explorerConnector.deleteDataSet(adminEmail, projectID, dataSetID);\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  registerAdmin(adminName: string, email: string, password: string): boolean {\r\n    let IDs: { adminID: number, deviceID: number; } = this.explorerConnector.registerAdmin(adminName, email, password);\r\n    if (IDs.adminID >= 0) {\r\n      this.user = new Admin(IDs.adminID, IDs.deviceID, adminName, email);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  registerDataminer(dataminerName: string, sessionID: number): boolean {\r\n    let dataminer: {\r\n      dataminerID: number, deviceID: number, project:\r\n      { projectID: number, projectName: string, sessionID: number; };\r\n    } = this.explorerConnector.registerDataminer(dataminerName, sessionID);\r\n    if (dataminer.dataminerID >= 0 && dataminer.deviceID >= 0) {\r\n      this.user = new Dataminer(dataminer.dataminerID, dataminer.deviceID, dataminerName);\r\n      this.user.loadProject(dataminer.project);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param aiModelUserName \r\n   */\r\n  registerAIModelUser(aiModelUserName: string, modelID: number): boolean {\r\n    let aiModelUser: {\r\n      aiModelUserID: number, deviceID: number, project:\r\n      { projectID: number, projectName: string, sessionID: number; };\r\n    } = this.explorerConnector.registerAIModelUser(aiModelUserName, modelID);\r\n    if (aiModelUser.aiModelUserID >= 0 && aiModelUser.deviceID >= 0) {\r\n      this.user = new AIModelUser(aiModelUser.aiModelUserID, aiModelUser.deviceID, aiModelUserName);\r\n      this.user.loadProject(aiModelUser.project);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  loginAdmin(email: string, password: string): boolean {\r\n    if (this.user == null) {\r\n      let adminData: {\r\n        admin?: {\r\n          adminID: number, deviceID: number, adminName: string, email: string,\r\n          device: { MACADRESS: string, deviceName: string, firmware: string, generation: string, deviceType: string; };\r\n        };\r\n      } = this.explorerConnector.loginAdmin(email, password);\r\n      if (adminData.admin != null) {\r\n        //Nur umbenennen von adminData.admin zu admin\r\n        let admin: { adminID: number, deviceID: number, adminName: string, email: string, device: { MACADRESS: string, deviceName: string, firmware: string, generation: string, deviceType: string; }; } = adminData.admin;\r\n\r\n        this.user = new Admin(admin.adminID, admin.deviceID, admin.adminName, admin.email, admin.device);\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  logoutAdmin(): boolean {\r\n    if (this.user != null) {\r\n      let logout = this.explorerConnector.logoutAdmin(this.getAdminEmail());\r\n      if (logout) {\r\n        delete this.user;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  createProject(projectName: string): boolean {\r\n    if (this.user instanceof Admin) {\r\n      let project: { projectID: number, sessionID: number; } = this.explorerConnector.createProject(this.getAdminEmail(), projectName);\r\n      return this.user.createProject(project.projectID, project.sessionID, projectName);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  setLabel(labelID: number, span: { start: number, end: number; }, labelName?: string): boolean {\r\n    if (this.user != null) {\r\n      return this.user.setLabel(labelID, span, labelName);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  getLabels(): { labels?: { name: string, id: number, start: number, end: number; }[]; } {\r\n    if (this.user != null) {\r\n      return this.user.getLabels();\r\n    }\r\n    return {};\r\n  }\r\n\r\n  classify(aiId: number, dataSetId: number, callBack: Function): void {\r\n    throw new Error(\"Not implemented\");\r\n  }\r\n\r\n  getAIModel(id: number, format: DeliveryFormat): object {\r\n    throw new Error(\"Not implemented\");\r\n  }\r\n\r\n  applyModel(modeldata: object): void {\r\n    throw new Error(\"Not implemented\");\r\n  }\r\n\r\n}\r\n\r\n\r\n//AIModelUser läd da sofort das Model?\r\n\r\n\r\n  // wird aktuell nicht benutzt\r\n  // checkLogin(): boolean { }\r\n","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\State.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Language.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\User.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\controller\\DeliveryController.tsx",["512","513"],"import { PageController } from \"./PageController\";\r\nimport { MainController } from \"./MainController\";\r\nimport { Page } from \"../view/pages/PageInterface\";\r\nimport { IState, States } from \"../view/pages/State\";\r\nimport { DeliveryPage } from \"../view/pages/DeliveryPage/index\";\r\n\r\nexport class DeliveryController implements PageController {\r\n\r\n    private page: Page;\r\n    private state: IState;\r\n\r\n    /**\r\n    * Konstruktor des Seitenverwalters. Registriert sich als Beobachter auf seiner Seite und setzt den start Status.\r\n    * @param currentProject Die momentanen Projectdaten für welches man ein Model ausliefern möchte. \r\n    */\r\n    constructor(currentProject: { projectID: number, projectName: string, choosenAIModelID: number; }) {\r\n        this.page = new DeliveryPage({});\r\n        this.page.attach(this);\r\n        this.state = this.page.getState()\r\n        this.state.currentProject = currentProject\r\n        this.page.setState(this.state)\r\n    }\r\n\r\n    /**\r\n    * Die Update Methode des Seitenverwalters.\r\n    */\r\n    update() {\r\n        this.state = this.page.getState();\r\n        switch (this.state.currentState) {\r\n            case States.DeliverWeb:\r\n                this.deliverAsWebApp();\r\n                break;\r\n            case States.NeedMessage:\r\n                this.page.setState(MainController.getInstance().getMessage(this.state.messages));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Holt sich aus dem Status alle angegebene Email-Adressen und gibt diese mit Daten zum Projekt an die Fassade welche eine Email an alle Adressen sendet.\r\n    * Der Inhalt der Email gibt zugriff auf das Modell zur klassifizierung.\r\n    */\r\n    deliverAsWebApp() {\r\n        //let emails: string[] = this.page.getEMails();\r\n        let emails: string[] = [\"Darius.Seiter@outlook.com\"]\r\n        //let text: string = MainController.getInstance().getFacade().getDeliverText();\r\n        let text: string = \"TEST\"\r\n        for (let index = 0; index < emails.length; index++) {\r\n            const element: string = emails[index];\r\n            //MainController.getInstance().getFacade().sendMail(element, this.state.currentProject);\r\n        }\r\n    }\r\n\r\n    deliverAsExe() {\r\n        //todo in Quality Controll\r\n    }\r\n}","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\controller\\VisualizationController.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\index.tsx",["514"],"import React from 'react';\r\nimport PubSub from 'pubsub-js';\r\nimport Title from '../../components/DataCollectionComponents/Title';\r\nimport Countdown from '../../components/DataCollectionComponents/Countdown';\r\nimport Diagram from '../../components/DataCollectionComponents/Diagram';\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from 'react-dom';\r\nimport { States } from '../State';\r\n\r\ntype Props = {\r\n};\r\n\r\nexport class DataCollectionPage extends React.Component<Props, State> implements Page {\r\n    state = new State;\r\n    observers: PageController[] = [];\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.finishCountdown();\r\n        const VDOM = (\r\n            <div>\r\n                <Title />\r\n                <Countdown />\r\n                <Diagram />\r\n            </div>\r\n        );\r\n        ReactDOM.render(VDOM, document.getElementById('root'));\r\n    }\r\n\r\n\r\n    /**\r\n     * Diese Methode braucht nur einmal aufzurufen, Countdown geht automatisch.\r\n     * @param countdownNumber Die Countdownzahl zu zeigen.\r\n     */\r\n    showCountdownNumber(leadTime: number) {\r\n        this.setState({ leadTime: leadTime });\r\n        PubSub.publish('startCounting', this.state.leadTime);\r\n    }\r\n\r\n    /**\r\n     * Prüft ob Countdown fertig ist und ändert den Zustand.\r\n     */\r\n    finishCountdown() {\r\n        PubSub.subscribe('finishCountdwon', () => {\r\n            this.setState({ currentState: States.NeedInstantDiagram });\r\n            this.notify();\r\n        }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Diese Methode sollte während Datenerfassung jede Sekunde von Controller aufgerufen werden, um Bild zu updaten.\r\n     * @param countdownNumber Die Countdownzahl zu zeigen\r\n     */\r\n    showDiagram(diagramSvg: string) {\r\n        this.setState({ diagramSvg: diagramSvg });\r\n        PubSub.publish('startDiagram', this.state.diagramSvg);\r\n    }\r\n\r\n    /**\r\n     * Die Methoden für Beobachtermuster\r\n     * @param observer Beobachter,nähmlich Controller\r\n     */\r\n    attach(observer: PageController) {\r\n        this.observers.push(observer);\r\n    }\r\n\r\n    detach(observer: PageController) {\r\n        const index = this.observers.indexOf(observer, 0);\r\n        if (index > -1) {\r\n            this.observers.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    notify() {\r\n        for (let index = 0; index < this.observers.length; index++) {\r\n            const element = this.observers[index];\r\n            element.update();\r\n        }\r\n    }\r\n\r\n    getState() {\r\n        return this.state;\r\n    }\r\n\r\n}",["515","516"],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Device.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Project.tsx",["517"],"import { AIModel } from \"./AIModel\";\r\nimport { DataSet } from \"./DataSet\";\r\nimport { SensorData } from \"./Sensor\";\r\nimport { Session } from \"./Session\";\r\nimport { Admin } from \"./User\";\r\n\r\n/**\r\n * Diese Klasse speichert alle Informationen zu einem Projekt.\r\n * Ein Projekt beinhaltet aufgezeichnete Datensätze (DataSet) sowie Informationen zu den Datensätzen.\r\n */\r\nexport class Project {\r\n  private id: number; //Die eindeutige Projekt ID\r\n  private name: string; //Der Name des Projektes\r\n  private session: Session; //Die Session in dem das Projekt arbeitet\r\n  private aiModel: AIModel[] = []; //Das AIModel von dem Projekt\r\n  private dataSet: DataSet[] = []; //Die Datensätze, die zu dem Projekt gehören\r\n  private currentDataSet?: DataSet; //Aktueller Datensatz\r\n\r\n  /**\r\n     * Eine bereits existierendes Projekt kann wie folgt in das Model geladen werden.\r\n     * @param projectID Die Projekt ID\r\n     * @param sessionID Die Session ID\r\n     * @param projectName Der Projektnamen\r\n     * @param admin Der Besitzer dieses Projekts für die Session\r\n     * @param aiModelID Die schon existierenden AIModel IDs\r\n     * @param dataSet Die schon existierenden Datensätze\r\n     */\r\n  constructor(projectID: number, sessionID: number, projectName: string, projectData?: {\r\n    aiModelID?: number[],\r\n    dataSet?: {\r\n      dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate: number,\r\n      dataRows: {\r\n        dataRowID: number, recordingStart: number,\r\n        dataRow: { value: number, relativeTime: number; }[];\r\n      }[],\r\n      label: { name: string, labelID: number, start: number, end: number; }[];\r\n    }[];\r\n  }) {\r\n    this.id = projectID;\r\n    this.name = projectName;\r\n    this.session = new Session(sessionID);\r\n    if (projectData != null) {\r\n      if (projectData.aiModelID != null) {\r\n        for (let i = 0; i < projectData.aiModelID.length; i++) {\r\n          this.aiModel.push(new AIModel(projectData.aiModelID[i]));\r\n        }\r\n      }\r\n      if (projectData.dataSet != null) {\r\n        for (let i = 0; i < projectData.dataSet.length; i++) {\r\n          this.dataSet.push(new DataSet(projectData.dataSet[i].dataRowSensors, projectData.dataSet[i].dataSetID, projectData.dataSet[i].dataSetName, projectData.dataSet[i].generateDate, projectData.dataSet[i].dataRows, projectData.dataSet[i].label));\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Gibt den Projektnamen zurück\r\n   */\r\n  getName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  /**\r\n   * Löscht den Datensatz mit der DatensatzID\r\n   * @param dataSetID die Datensatz ID\r\n   */\r\n  deleteDataSet(dataSetID: number): boolean {\r\n    for (let i = 0; i < this.dataSet.length; i++) {\r\n      if (this.dataSet[i].getID() === dataSetID) {\r\n        delete this.dataSet[i];\r\n        if (this.currentDataSet != null && this.currentDataSet.getID() === dataSetID) {\r\n          delete this.currentDataSet;\r\n        }\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Gibt die Projekt ID zurück.\r\n   */\r\n  getID(): number {\r\n    return this.id;\r\n  }\r\n\r\n\r\n  /**\r\n   * Erstellt einen neuen Datensatz und setzt diesen als aktuellen Datensatz.\r\n   * @param dataRowSensors die Sensoren, von denen die Daten ausgelesen werden\r\n   * @param dataSetID die eindeutige Datensatz ID\r\n   * @param dataSetName der Datensatznamen\r\n   * @param generateDate die Erstellungszeit von dem Datensatz\r\n   */\r\n  createDataSet(dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate?: number): void {\r\n    var dataSet: DataSet = new DataSet(dataRowSensors, dataSetID, dataSetName, generateDate);\r\n    this.dataSet.push(dataSet);\r\n    this.currentDataSet = dataSet;\r\n  }\r\n\r\n  /**\r\n   * Gibt die aktuelle Datensatz ID zurück, falls diese nicht existiert wird -1 zurück gegeben\r\n   */\r\n  getCurrentDataSetID(): number {\r\n    if (this.currentDataSet != null) {\r\n      return this.currentDataSet.getID();\r\n    }\r\n    return -1;\r\n\r\n  }\r\n\r\n  /**\r\n   * Liest von dem aktuellen Datensatz neue Sensordaten von der Datenreihe mit der Datenreihen ID\r\n   * @param dataRowID die Datenreihen ID, von der die Daten ausgelesen werden sollen.\r\n   * @returns die gelesenen Daten von der Datenreihe. Falls die Datenreihe nicht existiert oder kein aktueller Datensatz existiert, sind die Daten leer.\r\n   */\r\n  readDataPoint(dataRowID: number): { dataPoint?: { value: number, relativeTime: number; }; } {\r\n    if (this.currentDataSet != null) {\r\n      return this.currentDataSet.readDataPoint(dataRowID);\r\n    }\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Gibt von allen Datensätzen Informationen zurück\r\n   * @returns dataSetID ist die DatensatzID und dataSetName ist der Datensatzname\r\n   */\r\n  getDataSetMetas(): { dataSetID: number, dataSetName: string; }[] {\r\n    var dataSetMetas: { dataSetID: number, dataSetName: string; }[] = [];\r\n    for (let i = 0; i < this.dataSet.length; i++) {\r\n      dataSetMetas.push({ dataSetID: this.dataSet[i].getID(), dataSetName: this.dataSet[i].getName() });\r\n    }\r\n    return dataSetMetas;\r\n  }\r\n\r\n  /**\r\n   * Gibt die Datenreihen der Datensatz ID zurück und setzt diesen Datensatz als aktuellen Datensatz\r\n   * @param dataSetID die Datensatz ID von der die Datenreihen gelesen werden sollen\r\n   * @returns die Sensordaten von der Datenreihe\r\n   */\r\n  getDataRows(dataSetID: number): { dataRows?: { value: number, relativeTime: number; }[][]; } {\r\n    for (let i = 0; i < this.dataSet.length; i++) {\r\n      if (this.dataSet[i].getID() === dataSetID) {\r\n        this.currentDataSet = this.dataSet[i];\r\n        return { dataRows: this.dataSet[i].getDataRows() };\r\n      }\r\n    }\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Gibt die Datenreihen der aktuellen Datenreihe zurück\r\n   * @returns die Sensordaten von der Datenreihe\r\n   */\r\n  getCurrentDataRows(): { dataRows?: { value: number, relativeTime: number; }[][]; } {\r\n    if (this.currentDataSet != null) {\r\n      return { dataRows: this.currentDataSet.getDataRows() };\r\n    }\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Gibt die Session ID zurück\r\n   */\r\n  getSessionID(): number {\r\n    return this.session.getId();\r\n  }\r\n\r\n  /**\r\n   * Setzt dem Label mit der übergebenen ID neue Werte.\r\n   * @param start Ist die neue Startzeit des Labels.\r\n   * @param end Ist die neue Endzeit des Labels.\r\n   * @param labelID Die Label ID, welche überarbeitet werden soll.\r\n   * @param labelName Ist bei Angabe der neue Name des Labels.\r\n   * @returns falls das Label nicht existiert oder es kein aktuellen Datensatz gibt wird false zurück gegeben\r\n   */\r\n  createLabel(start: number, end: number, labelID: number, labelName?: string): boolean {\r\n    if (this.currentDataSet != null) {\r\n      return this.currentDataSet.setLabel(labelID, { start, end }, labelName);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  setLabel(labelID: number, span: { start: number, end: number; }, labelName?: string): boolean {\r\n    if (this.currentDataSet != null) {\r\n      return this.currentDataSet.setLabel(labelID, span, labelName);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  deleteLabel(labelID: number): boolean {\r\n    if (this.currentDataSet != null) {\r\n      return this.currentDataSet.deleteLabel(labelID);\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gibt alle Daten von allen Labeln vom aktuellen Datensatz zurück.\r\n   * @returns leer, falls kein aktueller Datensatz existiert\r\n   */\r\n  getLabels(): { labels?: { name: string, id: number, start: number, end: number; }[]; } {\r\n    if (this.currentDataSet != null) {\r\n      return { labels: this.currentDataSet.getLabels() };\r\n    }\r\n    return {};\r\n  }\r\n}","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\controller\\ModelCreationController.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\index.tsx",["518","519","520","521","522","523","524"],"import React, { Component } from 'react';\r\nimport AddEmailButton from '../../components/DeliveryComponents/AddEmailButton';\r\nimport DownloadButton from '../../components/DeliveryComponents/DownloadButton';\r\nimport EmailList from '../../components/DeliveryComponents/EmailList';\r\nimport HandleAllEmail from '../../components/DeliveryComponents/HandleAllEmail';\r\nimport SendButton from '../../components/DeliveryComponents/SendButton';\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from 'react-dom';\r\n\r\ntype Props = {\r\n};\r\n\r\nexport class DeliveryPage extends React.Component<Props, State> implements Page {\r\n\r\n\tstate = new State();\r\n\tobservers: PageController[] = [];\r\n\tconstructor(props: Props) {\r\n\t\tsuper(props);\r\n\t\tconst VDOM = (\r\n\t\t\t<div className=\"deliverypage\">\r\n\t\t\t\t<div className=\"emailList-wrap\">\r\n\t\t\t\t\t<AddEmailButton addEmail={this.addEmail} deleteEmail={this.deleteEmail} />\r\n\t\t\t\t\t<EmailList emails={this.state.emails} updateEmail={this.updateEmail} deleteEmail={this.deleteEmail} />\r\n\t\t\t\t\t<HandleAllEmail emails={this.state.emails} chooseAllEmail={this.chooseAllEmail} clearAllChosen={this.clearAllChosen} />\r\n\t\t\t\t</div>\r\n\t\t\t\t<DownloadButton />\r\n\t\t\t\t<SendButton />\r\n\t\t\t</div>\r\n\t\t);\r\n\t\tReactDOM.render(VDOM, document.getElementById('root'));\r\n\t}\r\n\r\n\tattach(observer: PageController) {\r\n\t\tthis.observers.push(observer);\r\n\t}\r\n\r\n\tdetach(observer: PageController) {\r\n\t\tconst index = this.observers.indexOf(observer, 0);\r\n\t\tif (index > -1) {\r\n\t\t\tthis.observers.splice(index, 1);\r\n\t\t}\r\n\t}\r\n\r\n\tnotify() {\r\n\t\tfor (let index = 0; index < this.observers.length; index++) {\r\n\t\t\tconst element = this.observers[index];\r\n\t\t\telement.update();\r\n\t\t}\r\n\t}\r\n\r\n\tgetState() {\r\n\t\treturn this.state;\r\n\t}\r\n\r\n\t//addEmail for add new Email\r\n\taddEmail = (emailObj: { id: string, address: string, chosen: boolean }) => {\r\n\t\t//get orignal emailList\r\n\r\n\t\t//add new one\r\n\t\tconst newEmails = [emailObj, ...this.state.emails];\r\n\t\t//update emailList\r\n\t\tthis.state.emails = newEmails\r\n\t};\r\n\r\n\t//updateEmail for update EmailList\r\n\tupdateEmail = (id: string, chosen: boolean) => {\r\n\t\t//get orignal EmailList\r\n\t\t//compare id\r\n\t\tconst newEmails = this.state.emails.map((emailObj) => {\r\n\t\t\tif (emailObj.id === id) return { ...emailObj, chosen };\r\n\t\t\telse return emailObj;\r\n\t\t});\r\n\t\tthis.state.emails = newEmails\r\n\t};\r\n\r\n\t//deleteEmail for delete emailObj\r\n\tdeleteEmail = (id: string) => {\r\n\t\t//get orignal emailList\r\n\t\t//delete emailObj with id\r\n\t\tconst newEmails = this.state.emails.filter((emailObj) => {\r\n\t\t\treturn emailObj.id !== id;\r\n\t\t});\r\n\t\t//update emailList\r\n\t\tthis.state.emails = newEmails\r\n\t};\r\n\r\n\t//checkAllEmail for all chosen email\r\n\tchooseAllEmail = (chosen: boolean) => {\r\n\t\t//get orignal emailList\r\n\t\t//traverse emailList\r\n\t\tconst newEmails = this.state.emails.map((emailObj) => {\r\n\t\t\treturn { ...emailObj, chosen };\r\n\t\t});\r\n\t\t//update emailList\r\n\t\tthis.state.emails = newEmails\r\n\t};\r\n\r\n\t//clearAllChosen for delete all emails\r\n\tclearAllChosen = () => {\r\n\t\t//get orignal emailList\r\n\t\tconst { emails } = this.state;\r\n\t\t//filter datas\r\n\t\tconst newEmails = this.state.emails.filter((emailObj) => {\r\n\t\t\treturn !emailObj.chosen;\r\n\t\t});\r\n\t\t//update emailLists\r\n\t\tthis.state.emails = newEmails\r\n\t};\r\n\r\n}\r\n","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\index.tsx",["525","526","527","528"],"import React, { Component } from 'react'\r\nimport TrainButton from '../../components/ModelCreationComponents/TrainButton'\r\nimport ImageList from '../../components/VisualizationComponents/ImageList'\r\nimport eximage1 from '../../images/exImage1.svg'\r\nimport './VisualizationPage.css'\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport { MainController } from '../../../controller/MainController';\r\nimport ReactDOM from 'react-dom';\r\n\r\ntype Props = {\r\n};\r\n\r\nexport class VisualizationPage extends React.Component<Props, State> implements Page {\r\n    state = new State()\r\n\r\n    observers: PageController[] = [];\r\n    constructor(props: Props) {\r\n        super(props);\r\n        const VDOM = (\r\n            <div className=\"visualizationpage\">\r\n                <img src={this.state.imageSrc} alt=\"2\" className=\"showImage\" ></img>\r\n                <ImageList setImageSrc={this.setImageSrc} />\r\n                <TrainButton />\r\n            </div>\r\n        );\r\n        ReactDOM.render(VDOM, document.getElementById('root'));\r\n    }\r\n\r\n\r\n    attach(observer: PageController) {\r\n        this.observers.push(observer);\r\n    }\r\n\r\n    detach(observer: PageController) {\r\n        const index = this.observers.indexOf(observer, 0);\r\n        if (index > -1) {\r\n            this.observers.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    notify() {\r\n        for (let index = 0; index < this.observers.length; index++) {\r\n            const element = this.observers[index];\r\n            element.update();\r\n        }\r\n    }\r\n\r\n    getState() {\r\n        return this.state;\r\n    }\r\n\r\n\r\n    setImageSrc = (newSrc: string) => {\r\n        const newState = { imageSrc: newSrc }\r\n        this.setState({ imageSrc: newSrc })\r\n    }\r\n\r\n}\r\n","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\State.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Session.tsx",["529"],"import { Admin, User } from \"./User\";\r\n\r\n/**\r\n * Diese Klasse Speichert die Session informationen\r\n */\r\nexport class Session {\r\n  private id: number; //Die eindeutige ID der Session\r\n  private connectedUser: User[] = []; //Die User die mit der Projekt der Session interagieren\r\n\r\n  /**\r\n   * Erstellt eine Session\r\n   * @param id Diese ID muss global eindeutig sein\r\n   * @param admin Der Admin, dem diese Session gehört\r\n   */\r\n  constructor(id: number) {\r\n    this.id = id;\r\n  }\r\n\r\n  /**\r\n   * Fügt eine User als Verbundener User zu der Session hinzu\r\n   * @param user Der User, der hinzugefügt wird\r\n   */\r\n  connectUser(user: User): void {\r\n    this.connectedUser.push(user);\r\n  }\r\n\r\n  /**\r\n   * Meldet einen User von der aktuellen Session ab\r\n   * @param user Der User, der abgemeldet werdern soll\r\n   */\r\n  disconnectUser(user: User): boolean {\r\n    for (let i = 0; i < this.connectedUser.length; i++) {\r\n      if (this.connectedUser[i].getID() === user.getID()) {\r\n        delete this.connectedUser[i];\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Gibt von allen verbundenen Usern die ID und den Namen zurück\r\n   */\r\n  getConnectedUsers(): { userID: number, userName: string; }[] {\r\n    var users: { userID: number, userName: string; }[] = [];\r\n    for (let i = 0; i < this.connectedUser.length; i++) {\r\n      users.push({ userID: this.connectedUser[i].getID(), userName: this.connectedUser[i].getName() });\r\n    }\r\n    return users;\r\n  }\r\n\r\n  /**\r\n   * Gibt die Session ID zurück\r\n   */\r\n  getId(): number {\r\n    return this.id;\r\n  }\r\n}","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\AIModel.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Sensor.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\DataSet.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\State.tsx",["530"],"export class State {\r\n  currentState: States = States.NeedMessage;\r\n  languageCode: string = \"de\";\r\n  messageIDs: number[] = [];\r\n  messages: string[] = [];\r\n  emails: { id: string, address: string, chosen: boolean }[] = [{ id: 'ex', address: 'example', chosen: false }];\r\n\r\n}\r\n\r\n\r\nexport enum States {\r\n  NeedMessage,\r\n  NeedData,\r\n  GotData,\r\n  ChangePage,\r\n  Download,\r\n  Send\r\n}\r\n","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\index.tsx",["531"],"import React, { Component } from 'react'\r\nimport DatasetList from '../../components/ModelCreationComponents/DatasetList'\r\nimport AddDatasetButton from '../../components/ModelCreationComponents/AddDatasetButton'\r\nimport ImputationList from '../../components/ModelCreationComponents/ImputationList'\r\nimport NormalizationList from '../../components/ModelCreationComponents/NormalizationList'\r\nimport FeatureList from '../../components/ModelCreationComponents/FeatureList'\r\nimport ModelTypeList from '../../components/ModelCreationComponents/ModelTypeList'\r\nimport TrainButton from '../../components/ModelCreationComponents/TrainButton'\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from 'react-dom';\r\nimport './ModelCreationPage.css'\r\n\r\ntype Props = {\r\n};\r\n\r\n\r\nexport class ModelCreationPage extends React.Component<Props, State> implements Page {\r\n\tstate = new State();\r\n\tobservers: PageController[] = [];\r\n\tconstructor(props: Props) {\r\n\t\tsuper(props);\r\n\t\tconst VDOM = (\r\n\t\t\t<div className=\"modelcreationpage\">\r\n\t\t\t\t<div className=\"checklist\">\r\n\t\t\t\t\t<h3>Datasets</h3>\r\n\t\t\t\t\t<DatasetList datasets={this.state.datasets} updateDataset={this.updateDataset} deleteDataset={this.deleteDataset} />\r\n\t\t\t\t\t<AddDatasetButton datasets={this.state.datasets} addDataset={this.addDataset} deleteDataset={this.deleteDataset} />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"checklist\"><ImputationList /><NormalizationList /></div>\r\n\t\t\t\t<div className=\"checklist\"><FeatureList /><ModelTypeList /></div>\r\n\t\t\t\t<TrainButton />\r\n\t\t\t</div>\r\n\t\t);\r\n\t\tReactDOM.render(VDOM, document.getElementById('root'));\r\n\t}\r\n\r\n\tattach(observer: PageController) {\r\n\t\tthis.observers.push(observer);\r\n\t}\r\n\r\n\tdetach(observer: PageController) {\r\n\t\tconst index = this.observers.indexOf(observer, 0);\r\n\t\tif (index > -1) {\r\n\t\t\tthis.observers.splice(index, 1);\r\n\t\t}\r\n\t}\r\n\r\n\tnotify() {\r\n\t\tfor (let index = 0; index < this.observers.length; index++) {\r\n\t\t\tconst element = this.observers[index];\r\n\t\t\telement.update();\r\n\t\t}\r\n\t}\r\n\r\n\tgetState() {\r\n\t\treturn this.state;\r\n\t}\r\n\r\n\t//addDataset for add new Dataset\r\n\taddDataset = (datasetObj: { id: string, name: string, chosen: boolean }) => {\r\n\t\t//get orignal datasetList\r\n\t\tconst { datasets } = this.state\r\n\t\t//add new one\r\n\t\tconst newDatasets = [datasetObj, ...datasets]\r\n\t\t//update datasetList\r\n\t\tthis.setState({ datasets: newDatasets })\r\n\t}\r\n\r\n\t//updateDataset for update DatasetList\r\n\tupdateDataset = (id: string, chosen: boolean) => {\r\n\t\t//get orignal DatasetList\r\n\t\tconst { datasets } = this.state\r\n\t\t//compare id\r\n\t\tconst newDatasets = datasets.map((datasetObj) => {\r\n\t\t\tif (datasetObj.id === id) return { ...datasetObj, chosen }\r\n\t\t\telse return datasetObj\r\n\t\t})\r\n\t\tthis.setState({ datasets: newDatasets })\r\n\t}\r\n\r\n\t//deleteDataset for delete datasetObj\r\n\tdeleteDataset = (id: string) => {\r\n\t\t//get orignal datasetList\r\n\t\tconst { datasets } = this.state\r\n\t\t//delete datasetObj with id\r\n\t\tconst newDatasets = datasets.filter((datasetObj) => {\r\n\t\t\treturn datasetObj.id !== id\r\n\t\t})\r\n\t\t//update datasetList\r\n\t\tthis.setState({ datasets: newDatasets })\r\n\t}\r\n\r\n}\r\n","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\State.tsx",["532"],"import eximage1 from '../../images/exImage1.svg'\r\nexport class State {\r\n  currentState: States = States.NeedMessage;\r\n  languageCode: string = \"de\";\r\n  messageIDs: number[] = [];\r\n  messages: string[] = [];\r\n  imageSrc: string = eximage1\r\n}\r\n\r\n\r\nexport enum States {\r\n  NeedMessage,\r\n  NeedData,\r\n  GotData,\r\n  ChangePage,\r\n  Finish\r\n}\r\n","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Countdown\\index.tsx",["533","534","535","536"],"import { Component, useState, useEffect, useRef } from 'react';\r\nimport PubSub from 'pubsub-js';\r\n\r\nexport default class Countdown extends Component {\r\n    state = { countdownNumber: 5, startCounting: false, chosenSensors: \"\" };\r\n\r\n    componentDidMount() {\r\n        PubSub.subscribe('startCounting', (leadTime: number) => {\r\n            this.setState({ countdownNumber: leadTime, startCounting: true });\r\n        }\r\n        );\r\n\r\n        setInterval(() => {\r\n            this.updateCounting();\r\n        }, 1000);\r\n    }\r\n\r\n    updateCounting() {\r\n        this.setState({ countdownNumber: this.state.countdownNumber - 1 });\r\n        if (this.state.countdownNumber == 0) {\r\n            this.setState({ startCounting: false });\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Bereit machen zur Aufnahme!</h2>\r\n                <h2>{this.state.startCounting ? this.state.countdownNumber : \"\"}</h2>\r\n                <h2>Verwendete Sensoren:<br />{this.state.chosenSensors}</h2>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Title\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Diagram\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\DataRow.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Label.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\DownloadButton\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\TrainButton\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\State.tsx",["537"],"export class State {\r\n  currentState: States = States.NeedMessage;\r\n  languageCode: string = \"de\";\r\n  messageIDs: number[] = [];\r\n  messages: string[] = [];\r\n  datasets: { id: string, name: string, chosen: boolean }[] = [];\r\n  features: { name: string, chosen: boolean }[] = [];\r\n  imputations: { name: string, chosen: boolean }[] = [];\r\n  modeltypes: { name: string, chosen: boolean }[] = [];\r\n  normalizations: { name: string, chosen: boolean }[] = [];\r\n\r\n}\r\n\r\n\r\nexport enum States {\r\n  NeedMessage,\r\n  NeedData,\r\n  GotData,\r\n  ChangePage,\r\n  NeedParameter,\r\n  StartTrain\r\n}\r\n","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\TimeSpan.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\DataPoint.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\ImputationList\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\FeatureList\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\NormalizationList\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\ModelTypeList\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\DatasetList\\index.jsx",[],["538","539"],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\AddDatasetButton\\index.jsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\DatasetItem\\index.jsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\FinishPage\\index.tsx",["540","541"],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\FinishPage\\State.tsx",["542"],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Body\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Title\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\index.tsx",["543","544"],"import React, { Component } from 'react';\r\nimport PubSub from 'pubsub-js';\r\nimport Title from '../../components/StartComponents/Title';\r\nimport Input from '../../components/StartComponents/Input';\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from 'react-dom';\r\nimport { States } from '../State';\r\n\r\ntype Props = {\r\n\r\n};\r\n\r\nexport class StartPage extends React.Component<Props, State> implements Page {\r\n    state = new State();\r\n    observers: PageController[] = [];\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.setAvailableSensors();\r\n        this.changeSettings();\r\n        const VDOM = (\r\n            <div>\r\n                <Title />\r\n                <Input />\r\n            </div>\r\n        );\r\n        ReactDOM.render(VDOM, document.getElementById('root'));\r\n    }\r\n\r\n    setAvailableSensors() {\r\n        PubSub.publish('setAvailableSensors', (\r\n            this.state.recordingSettings.availableSensorTypes));\r\n    }\r\n\r\n    /**\r\n     * Prüft ob der Nutzer \"Start\" druckt und ändert den Zustand.\r\n     */\r\n    changeSettings() {\r\n        PubSub.subscribe('settingsFinish', (data: {\r\n            newDataSetName: string,\r\n            usedSensorTypes: number[],\r\n            waitTime: number,\r\n            readTime: number,\r\n            availableSensorTypes: { sensorTypID: number, sensorType: string, chosen: boolean; }[];\r\n        }) => {\r\n            this.setState({ recordingSettings: data });\r\n            this.state.currentState = States.ChangeToDataCollection;\r\n            this.notify();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Die Methoden für Beobachtermuster\r\n     * @param observer Beobachter,nähmlich Controller\r\n     */\r\n    attach(observer: PageController) {\r\n        this.observers.push(observer);\r\n    }\r\n\r\n    detach(observer: PageController) {\r\n        const index = this.observers.indexOf(observer, 0);\r\n        if (index > -1) {\r\n            this.observers.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    notify() {\r\n        for (let index = 0; index < this.observers.length; index++) {\r\n            const element = this.observers[index];\r\n            element.update();\r\n        }\r\n    }\r\n\r\n    getState() {\r\n        return this.state;\r\n    }\r\n\r\n}\r\n",["545","546"],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\State.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Input\\index.tsx",["547","548"],"import React, { Component } from \"react\";\r\nimport input from \"./index.module.css\";\r\n\r\nexport default class Input extends Component {\r\n  state = {\r\n    name: \"\",\r\n    usedSensorTypes: [] as number[],\r\n    leadTime: \"\",\r\n    collectionTime: \"\",\r\n    availableSensorTypes: [] as { sensorTypID: number, sensorType: string, chosen: boolean; }[]\r\n  };\r\n\r\n  setAvailableSensors() {\r\n    PubSub.subscribe('setAvailableSensors', (\r\n      data: { sensorTypID: number, sensorType: string, chosen: boolean; }[]\r\n    ) => {\r\n      this.setState({ availableSensorTypes: data });\r\n    });\r\n  }\r\n\r\n  changeLeadtime = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState(() => ({\r\n      leadTime: e.target.value,\r\n    }));\r\n  };\r\n  changeCollectionTime = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState(() => ({\r\n      collectionTime: e.target.value,\r\n    }));\r\n  };\r\n  changeSensors = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    this.setState(() => ({\r\n      chosenSensors: e.target.value,\r\n    }));\r\n  };\r\n  changeName = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState(() => ({\r\n      name: e.target.value,\r\n    }));\r\n  };\r\n\r\n  handleCheckBoxChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    let newAvailableSensorTypes = this.state.availableSensorTypes;\r\n    for (var i = 0; i < newAvailableSensorTypes.length; i++) {\r\n      if (newAvailableSensorTypes[i].sensorTypID == +e.target.value) {\r\n        newAvailableSensorTypes[i].chosen = !newAvailableSensorTypes[i].chosen;\r\n        this.setState({ availableSensorTypes: newAvailableSensorTypes, });\r\n        return;\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  submit = () => {\r\n    if (\r\n      parseInt(this.state.leadTime) <= 5 &&\r\n      parseInt(this.state.leadTime) >= 3 &&\r\n      parseInt(this.state.collectionTime) <= 10 &&\r\n      parseInt(this.state.collectionTime) >= 5\r\n    ) {\r\n      let availableSensorTypes = this.state.availableSensorTypes;\r\n      var usedSensorTypes: number[] = [];\r\n      for (var i = 0; i < availableSensorTypes.length; i++) {\r\n        if (availableSensorTypes[i].chosen == true) {\r\n          usedSensorTypes.push(availableSensorTypes[i].sensorTypID);\r\n        }\r\n      }\r\n      this.setState({ usedSensorTypes: usedSensorTypes });\r\n      PubSub.publish('settingsFinish', this.state);\r\n    } else {\r\n      alert(\"Deine Eingabe ist ungültig.\");\r\n    }\r\n  };\r\n\r\n  render() {\r\n    this.setAvailableSensors();\r\n    return (\r\n      <div className=\"input\">\r\n        <form>\r\n          Aufnahmeparameter einstellen\r\n          <br />\r\n          Vorlaufzeit:\r\n          <input\r\n            type=\"leadTime\"\r\n            value={this.state.leadTime}\r\n            onChange={this.changeLeadtime.bind(this)}\r\n          />\r\n          s<br />\r\n          Aufnahmedauer:\r\n          <input\r\n            type=\"collectionTime\"\r\n            value={this.state.collectionTime}\r\n            onChange={this.changeCollectionTime.bind(this)}\r\n          />\r\n          s<br />\r\n          Datenname:\r\n          <input\r\n            type=\"datenname\"\r\n            value={this.state.name}\r\n            onChange={this.changeName.bind(this)}\r\n          /><br />\r\n          Sensoren...\r\n          <ul className=\"todo-main\">\r\n            {\r\n              this.state.availableSensorTypes.map((type: { sensorTypID: number, sensorType: string, chosen: boolean; }) => {\r\n                return (<li key={type.sensorTypID}>\r\n                  <input\r\n                    type=\"checkbox\" value={type.sensorTypID} checked={type.chosen} onChange={(e) => this.handleCheckBoxChange(e)} />\r\n                  {type.sensorType}\r\n                </li>);\r\n              })\r\n            }\r\n          </ul>\r\n          <br />\r\n          <button type=\"button\" onClick={this.submit}>\r\n            Start\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Title\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\DatabaseConnector.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\index.tsx",["549","550","551","552","553","554","555","556","557","558","559","560","561","562","563","564"],"import React, { Component } from 'react';\r\nimport PubSub from 'pubsub-js';\r\nimport ConstantsText from '../../components/ReferringComponents/ConstantsText';\r\nimport NewProjectButton from '../../components/ReferringComponents/NewProjectButton';\r\nimport LoadModelButton from '../../components/ReferringComponents/LoadModelButton';\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from 'react-dom';\r\nimport { States } from '../State';\r\nimport LoginWindow from '../../components/ReferringComponents/LoginWindow';\r\n\r\ntype Props = {\r\n\r\n};\r\n\r\nexport class ReferringPage extends React.Component<Props, State> implements Page {\r\n\r\n    state = new State();\r\n    observers: PageController[] = [];\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.createNewProject()\r\n        this.register()\r\n        this.login()\r\n        this.getmodellist()\r\n        this.loadproject()\r\n        this.changetovisu()\r\n        this.loadmodel()\r\n        const VDOM = (\r\n            <div>\r\n                <ConstantsText />\r\n                <LoginWindow />\r\n                <NewProjectButton />\r\n                <LoadModelButton />\r\n            </div>\r\n        );\r\n        ReactDOM.render(VDOM, document.getElementById('root'));\r\n    }\r\n\r\n    attach(observer: PageController) {\r\n        this.observers.push(observer);\r\n    }\r\n\r\n    detach(observer: PageController) {\r\n        const index = this.observers.indexOf(observer, 0);\r\n        if (index > -1) {\r\n            this.observers.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    notify() {\r\n        for (let index = 0; index < this.observers.length; index++) {\r\n            const element = this.observers[index];\r\n            element.update();\r\n        }\r\n    }\r\n\r\n    getState() {\r\n        return this.state;\r\n    }\r\n\r\n    createNewProject() {\r\n        PubSub.subscribe('createnewproject', (_msg: any, data: string) => {\r\n            // console.log(this.state.currentState)\r\n            this.state.currentState = States.NewProjekt;\r\n            this.state.currentProject = { projectID: -10000, projectName: data, choosenAIModelID: -10000 }\r\n            //console.log(this.state.currentState)\r\n            //console.log(this.state.currentProject)\r\n            //console.log(this.state.currentState)\r\n            // console.log(this.state.qr)\r\n            //hier notifty for createnewProject\r\n            this.notify()\r\n            //console.log(this.state.currentState)\r\n            //console.log(this.state.qr)\r\n            //notify for needqr\r\n            this.notify()\r\n            //console.log(this.state.currentState)\r\n            //console.log(this.state.qr)\r\n            //console.log(this.state.currentState)\r\n            //console.log(this.state.qr)\r\n            PubSub.publish('getqr', this.state.qr)\r\n        })\r\n    }\r\n\r\n    register() {\r\n        PubSub.subscribe('register', (_msg: any, data: { name: string, email: string, password: string; }) => {\r\n            // console.log(this.state.currentState)\r\n            this.state.adminData = data\r\n            this.state.currentState = States.Register\r\n            //console.log(this.state.currentState)\r\n            this.notify()\r\n            //console.log(this.state.currentState)\r\n            let flag: boolean\r\n            if (this.state.currentState != States.Register) {\r\n                flag = false\r\n            } else {\r\n                flag = true\r\n            }\r\n            PubSub.publish('registerstatus', flag)\r\n\r\n        })\r\n    }\r\n\r\n    login() {\r\n        PubSub.subscribe('login', (_msg: any, data: { name: string, email: string, password: string; }) => {\r\n            // console.log(this.state.currentState)\r\n            this.state.adminData = data\r\n            this.state.currentState = States.Login\r\n            //console.log(this.state.currentState)\r\n            this.notify()\r\n            //console.log(this.state.currentState)\r\n            let flag: boolean\r\n            if (this.state.currentState != States.Login) {\r\n                flag = false\r\n            } else {\r\n                flag = true\r\n                PubSub.publish('getprojectlist', this.state.projectData)\r\n            }\r\n            PubSub.publish('loginstatus', flag)\r\n\r\n        })\r\n    }\r\n    getmodellist() {\r\n        PubSub.subscribe('needmodellist', (_msg: any, data: { projectID: number, projectName: string, AIModelID: number[]; }) => {\r\n            // console.log(this.state.currentState)\r\n            this.state.currentState = States.LoadProject\r\n            this.state.currentProject = { projectID: data.projectID, projectName: data.projectName, choosenAIModelID: -10000 }\r\n            //console.log(this.state.currentState)\r\n            this.notify()\r\n            //console.log(this.state.currentState)\r\n            PubSub.publish('getmodellist', this.state.projectData)\r\n\r\n        })\r\n    }\r\n    loadproject() {\r\n        PubSub.subscribe('loadproject', (_msg: any, data: { projectID: number, projectName: string, choosenAIModelID: number; }) => {\r\n            this.state.currentProject = { projectID: data.projectID, projectName: data.projectName, choosenAIModelID: -10000 }\r\n            this.state.currentState = States.NeedQRC\r\n            this.notify()\r\n            PubSub.publish('getqr', this.state.qr)\r\n        })\r\n    }\r\n    changetovisu() {\r\n        PubSub.subscribe('changetovisu', (_msg: any) => {\r\n            this.state.currentState = States.ChangeToVisual\r\n            this.notify()\r\n        })\r\n    }\r\n\r\n    loadmodel() {\r\n        PubSub.subscribe('loadmodel', (_msg: any, data: { projectID: number, projectName: string, choosenAIModelID: number; }) => {\r\n            this.state.currentProject = data\r\n            this.state.currentState = States.LoadModel\r\n            this.notify()\r\n        })\r\n    }\r\n}\r\n",["565","566"],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\ShowImage\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\State.tsx",["567","568","569","570","571","572"],"import { IState } from \"../State\";\r\nimport { States } from \"../State\";\r\nimport { QRCode, ErrorCorrectLevel, QRNumber, QRAlphaNum, QR8BitByte, QRKanji } from 'qrcode-generator-ts/js';\r\n\r\nexport class State implements IState {\r\n  currentState: States = States.NeedMessage;\r\n  languageCode: string = \"de\";\r\n  messages: { text: string, id: number; }[] = [];\r\n  projectData?: { projectID: number; projectName: string; AIModelID: number[]; }[];\r\n  currentProject?: { projectID: number, projectName: string, choosenAIModelID: number; };\r\n  // chosenModel?: string;\r\n  adminData?: { name: string, email: string, password: string; };\r\n  //minerData?:\r\n  aiUserData?: { name: string, result: string; };\r\n  labels?: { labelID: number, start: number, end: number; }[];\r\n  sessionID?: string;\r\n  //aiParameter?: \r\n  qr?: string;\r\n}\r\n","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ConstantsText\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoadModelButton\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\NewProjectButton\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoginWindow\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\QRImage\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ChangeToVisuBtn\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LinkText\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ProjectList\\index.tsx",["573","574","575","576","577"],"import React, { Component } from 'react'\r\nimport ChangeToVisuBtn from '../ChangeToVisuBtn';\r\nimport ModelList from '../ModelList';\r\nimport QRImage from '../QRImage';\r\n\r\nexport default class ProjectList extends Component {\r\n    state = {\r\n        value: null,\r\n        click: false,\r\n        loadclick: false,\r\n        //hier Beispiel, in componentDidMount will projectData verändern\r\n        projectData: [{\r\n            projectID: 1,\r\n            projectName: 'Projekt1',\r\n            AIModelID: [1, 2]\r\n        }, {\r\n            projectID: 2,\r\n            projectName: 'Projekt2',\r\n            AIModelID: []\r\n        }]\r\n    }\r\n\r\n    componentDidMount() {\r\n        /** controller noch nicht gegeben*/\r\n        PubSub.subscribe('getprojectlist', (_msg: any, data: { projectID: number, projectName: string, AIModelID: number[]; }[]) => {\r\n            this.setState({ projectData: data })\r\n        })\r\n\r\n    }\r\n\r\n    handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n        this.setState({\r\n            value: e.target.value\r\n        })\r\n    }\r\n    handleChoose() {\r\n        /* wait to change load model*/\r\n        if (this.state.value == null) {\r\n            alert('Sie haben noch kein Projekt gewählt!')\r\n        } else {\r\n            this.state.projectData.map((projectObj) => {\r\n                if (this.state.value == projectObj.projectID) {\r\n                    if (projectObj.AIModelID.length != 0) {\r\n                        PubSub.publish('needmodellist', projectObj)\r\n                        this.setState({ click: true })\r\n                    } else {\r\n                        this.setState({ click: false })\r\n                        alert('Es gibt keine Model in diesem Projekt!')\r\n                    }\r\n                }\r\n            })\r\n        }\r\n\r\n    }\r\n    handleLoad() {\r\n\r\n        if (this.state.value == null) {\r\n            alert('Sie haben noch kein Projekt gewählt!')\r\n        } else {\r\n            this.state.projectData.map((projectObj) => {\r\n                if (this.state.value == projectObj.projectID) {\r\n                    PubSub.publish('loadproject', projectObj)\r\n                    this.setState({ loadclick: true })\r\n                }\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <section>\r\n                <label>ProjektList</label>\r\n                <select onChange={this.handleChange}>\r\n                    <option>Projekt Wählen</option>\r\n                    {this.state.projectData.map((projectObj) => {\r\n                        return <option value={projectObj.projectID}>{projectObj.projectName}</option>\r\n                    })}\r\n                </select>\r\n                <button onClick={() => this.handleChoose()} className=\"btn\" >Wählen Modell in diesem Projekt </button>\r\n                <button onClick={() => this.handleLoad()} className=\"btn\" >Laden das Projekt!</button>\r\n                {this.state.loadclick ? <div> <QRImage /><ChangeToVisuBtn /></div> : null}\r\n                {this.state.click ? <div> <ModelList /></div> : null}\r\n            </section>\r\n\r\n        )\r\n    }\r\n}\r\n","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ModelList\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\ImageList\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\FinishButton\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Input\\Labelling\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\EmailList\\index.tsx",["578","579","580","581","582","583","584","585"],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\index.tsx",["586","587"],["588","589"],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\reportWebVitals.ts",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\MainController.tsx",["590","591"],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Facade.tsx",["592","593","594"],"import { DeliveryFormat } from \"./DeliveryFormat\";\r\nimport { DatabaseConnector } from \"./DatabaseConnector\";\r\nimport { Language } from \"./Language\";\r\nimport { AccelerometerData, MagnetometerData, SensorData } from \"./Sensor\";\r\nimport { Admin, Dataminer, AIModelUser, User } from \"./User\";\r\n\r\ninterface FacadeInterface {\r\n  createDataSet(sensorTypes: string[], dataSetName: string): boolean;\r\n  sendDataPoint(dataRowID: number, value: number[]): boolean;\r\n  readDataPoint(dataRowID: number): object;\r\n  loadProject(projectID: number): boolean;\r\n  getProjectMetas(): string[];\r\n  getDataSetMeta(): string[];\r\n  getSessionID(): number;\r\n  getDataRows(dataSetID: number): number[][][];\r\n  getCurrentDataRows(): { value: number, relativeTime: number; }[];\r\n  getMessage(messageID: number): string;\r\n  setLanguage(languageCode: string): boolean;\r\n  getLanguageMetas(): object[];\r\n  getEmail(): string;\r\n  deleteDataSet(dataSetID: number): boolean;\r\n  registerAdmin(adminName: string, email: string, password: string): boolean;\r\n  registerDataminer(dataminerName: string, sessionID: number): boolean;\r\n  registerAIModelUser(aiModelUserName: string): boolean;\r\n  loginAdmin(email: string, password: string): boolean;\r\n  logoutAdmin(): boolean;\r\n  createProject(projectName: string): boolean;\r\n  setLabel(labelID: number, start: number, end: number): boolean;\r\n  createLabel(): number; //labelid von datenbank\r\n  getLabels(): object[];\r\n  checkLogin(): boolean;\r\n  classify(aiId: number, dataSetId: number, callBack: Function): void;\r\n  getAIModel(format: DeliveryFormat): object;\r\n  applyModel(modeldata: object): void;\r\n} export type { FacadeInterface };\r\n\r\n/**\r\n * Die Facade stellt alle interaktionen mit dem Model zur Verfügung\r\n */\r\nexport class Facade {\r\n  private language: Language; //Alle Nachrichten, in der geladenen Sprache\r\n  private dbCon: DatabaseConnector; //Die Verbindung zur Datenbank\r\n  private user?: User; //Der Benutzer, entweder Admin, Datenerfasser oder AIModelUser\r\n\r\n\r\n  /**\r\n   * Erstellt die Facade\r\n   * @param languageCode der Sprachcode von der Sprache, die geladen werden soll\r\n   */\r\n  constructor(languageCode: string) {\r\n    this.dbCon = new DatabaseConnector();\r\n    this.language = new Language(this.dbCon.loadLanguage({ languageCode }));\r\n    const sensorTest = new AccelerometerData(1, \"\", \"\");\r\n  }\r\n\r\n  /**\r\n   * Erstellt ein Datensatz\r\n   * @param sensorTypeID muss der Sensor Typ ID von einem Sensor des Gerätes übereinstimmen\r\n   * @param dataSetName Name des Datensatzes\r\n   * @returns true, wenn der Datensatz erstellt wurde. Dies ist der Fall, wenn ein Benutzer existiert welcher in einer Session ist und alle Sensortypen existieren.\r\n   */\r\n  async createDataSet(sensorTypeID: number[], dataSetName: string, datarowNames?: string[]): Promise<boolean> {\r\n    if (this.user != null) {\r\n      let sessionID: number = this.getSessionID();\r\n      let dataRowSensors: SensorData[] = this.user.getDeviceSensors(sensorTypeID);\r\n      if (dataRowSensors.length > 0 && dataRowSensors.length === sensorTypeID.length && sessionID >= 0) {\r\n        let projectID: number = this.user.getCurrentProjectID();\r\n        let userID: number = this.user.getID();\r\n        let dataRow: { sensorID: number, datarowName?: string; }[] = [];\r\n        for (let i = 0; i < dataRowSensors.length; i++) {\r\n          let sensordata = dataRowSensors[i].getSensorData();\r\n          if (datarowNames != null && datarowNames.length >= i) {\r\n            dataRow.push({ sensorID: sensordata.id, datarowName: datarowNames[i] });\r\n          } else {\r\n            dataRow.push({ sensorID: sensordata.id });\r\n          }\r\n        }\r\n        let dataSetID: number = await this.dbCon.createDataSet({ sessionID, projectID, userID, dataSetName, dataRow });\r\n        if (dataSetID > 0) {\r\n          return this.user.createDataSet(dataRowSensors, dataSetID, dataSetName);\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Sendet den Datenpunkt an die Datenbank\r\n   * @param dataRowID die ID der aktuellen Datenreihe des eingelesenen Datenpunkts\r\n   * @param value der SensorWert\r\n   * @param relativeTime die relative Zeit zum Aufnahmestart in Millisekunden\r\n   * @return true, wenn der Datenpunkt erfolgreich an die Datenbank gesendet wurde\r\n   */\r\n  async sendDataPoint(dataRowID: number, value: number, relativeTime: number): Promise<boolean> {\r\n    if (this.user != null) {\r\n      let sessionID: number = this.getSessionID();\r\n      let userID: number = this.user.getID();\r\n      let dataSetID: number = this.user.getCurrentDataSetID();\r\n      return this.dbCon.sendDataPoint({ sessionID, userID, dataSetID, dataRowID, datapoint: { value, relativeTime } });\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Liest für den aktuellen Datensatz den Sensor aus von der Datenreihe mit der übergebenen ID\r\n   * @param dataRowID die DatenreihenID\r\n   */\r\n  readDataPoint(dataRowID: number): { dataPoint?: { value: number, relativeTime: number; }; } {\r\n    if (this.user != null) {\r\n      return this.user.readDataPoint(dataRowID);\r\n    }\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Lädt aus der Datenbank das Projekt mit der übergebenen ID, hierfür muss der Admin angemeldet sein\r\n   * @param projectID die Projekt ID\r\n   * @returns true, wenn das Projekt erfolgreich geladen wurde dies tritt nur ein, wenn eine Verbindung zur Datenbank besteht,\r\n   *          die Projekt ID existiert und der Admin dafür angemeldet ist\r\n   */\r\n  async loadProject(projectID: number): Promise<boolean> {\r\n    if (this.user != null && this.user instanceof Admin && !this.user.existProject(projectID)) {\r\n      let adminEmail: string = this.user.getEmail();\r\n      let userID: number = this.user.getID();\r\n      return this.user.loadProject(await this.dbCon.loadProject({ userID, adminEmail, projectID }));\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Lädt vom aktuell angemeldeten Admin von seinen Projekten den Namen und die die Projekt ID\r\n   * @returns Von allen Projekten des Admins Projekt ID und Projektname\r\n   */\r\n  async getProjectMetas(): Promise<{ projectID: number, projectName: string, AIModelID: number[]; }[]> {\r\n    if (this.user != null) {\r\n      let userID: number = this.user.getID();\r\n      return await this.dbCon.getProjectMetas({ userID, adminEmail: this.getAdminEmail() });\r\n    }\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Gibt vom aktuellen Projekt von allen Datensätzen die Datensatz ID und der Datensatz Name zurück\r\n   */\r\n  getDataSetMetas(): { dataSetID: number, dataSetName: string; }[] {\r\n    if (this.user != null) {\r\n      return this.user.getDataSetMetas();\r\n    }\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Gibt die Session ID des aktuellen Projekts zurück, -1 falls kein aktuelles Projekt existiert\r\n   */\r\n  getSessionID(): number {\r\n    if (this.user != null) {\r\n      return this.user.getSessionID();\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Gibt vom aktuellen Projekt die Datenreihen der Datensatz ID zurück und setzt diesen Datensatz als aktuellen Datensatz\r\n   * @param dataSetID die Datensatz ID von der die Datenreihen gelesen werden sollen\r\n   * @returns die Sensordaten von der Datenreihe\r\n   */\r\n  getDataRows(dataSetID: number): { dataRows?: { value: number, relativeTime: number; }[][]; } {\r\n    if (this.user != null) {\r\n      return this.user.getDataRows(dataSetID);\r\n    }\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Gibt vom aktuellen Projekt die Datenreihen des aktuellen Datensatzes zurück\r\n   * @param dataSetID die Datensatz ID von der die Datenreihen gelesen werden sollen\r\n   * @returns die Sensordaten von der Datenreihe\r\n   */\r\n  getCurrentDataRows(): { dataRows?: { value: number, relativeTime: number; }[][]; } {\r\n    if (this.user != null) {\r\n      return this.user.getCurrentDataRows();\r\n    }\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Gibt aus der geladenen Sprache die Nachrichten die über die IDs angegeben werden\r\n   * @param messageID alle IDs, von denen die Sprachnachricht geladen werden soll\r\n   * @returns alle Nachrichten, in der gleichen Reihenfolge wie angefordert\r\n   */\r\n  getMessage(messageID: number[]): Promise<{ messageID: number, message: string; }[]> {\r\n    return this.language.getMessage(messageID);\r\n  }\r\n\r\n  /**\r\n   * Gibt die auswählbaren Sensoren als ID mit ihrer Art in der Passenden Sprache zurück\r\n   */\r\n  async getAvailableSensors(): Promise<{ sensorTypID: number, sensorType: string; }[]> {\r\n    if (this.user != null) {\r\n      var sensors: { sensorTypID: number, sensorType: string; }[] = [];\r\n      let message: { messageID: number, message: string; }[] = await this.language.getMessage(this.user.getAvailableSensors());\r\n      for (let i = 0; i < message.length; i++) {\r\n        sensors.push({ sensorTypID: message[i].messageID, sensorType: message[i].message });\r\n      }\r\n      return sensors;\r\n    }\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Lädt die Sprache aus der Datenbank mit dem übergebenen Sprachcode\r\n   * @param languageCode Sprachcode\r\n   * @returns true, falls die Sprache erfolgreich geladen wurde\r\n   */\r\n  async setLanguage(languageCode: string): Promise<boolean> {\r\n    if (languageCode !== await this.language.getLanguageCode()) {\r\n      return this.language.setLanguagePromise(this.dbCon.loadLanguage({ languageCode }));\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Gibt von allen in der Datenbank verfügbaren Sprachen den Sprachcode sowie den Sprachennamen zurück\r\n   */\r\n  getLanguageMetas(): Promise<{ languageCode: number, languageName: string; }[]> {\r\n    return this.dbCon.getLanguageMetas();\r\n  };\r\n\r\n  /**\r\n   * Gibt die Email vom Admin zurück, diese kann leer sein falls kein Admin angemeldet ist\r\n   */\r\n  getAdminEmail(): string {\r\n    if (this.user instanceof Admin) {\r\n      return this.user.getEmail();\r\n    }\r\n    return \"\";\r\n  }\r\n\r\n  /**\r\n   * Löscht den Datensatz mit der übergebenen Datensatz ID\r\n   * @param dataSetID die Datensatz ID\r\n   * @returns true, wenn das löschen erfolgreich ist\r\n   */\r\n  async deleteDataSet(dataSetID: number): Promise<boolean> {\r\n    if (this.user != null) {\r\n      let projectID: number = this.user.deleteDataSet(dataSetID);\r\n      if (projectID >= 0) {\r\n        let adminEmail: string = this.getAdminEmail();\r\n        let userID = this.user.getID();\r\n        return this.dbCon.deleteDataSet({ userID, adminEmail, projectID, dataSetID });\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n\r\n  //wann Device erstellen ??? + constructor in User anpassen mit neuem Device parameter \r\n  async registerAdmin(adminName: string, adminEmail: string, password: string): Promise<boolean> {\r\n    //TODO\r\n    let device: { deviceID?: number, deviceName: string, deviceType: string, firmware: string, generation: string, MACADRESS: string, sensorInformation: { sensorTypeID: number, sensorName: string, sensorUniqueID: number; }[]; } = { deviceID: -1, deviceName: \"\", deviceType: \"\", firmware: \"\", generation: \"\", MACADRESS: \"\", sensorInformation: [] };\r\n    let IDs: { adminID: number, device: { deviceID: number, sensorID: number[]; }; } = await this.dbCon.registerAdmin({ adminName, adminEmail, password, device });\r\n    if (IDs.adminID >= 0) {\r\n      this.user = new Admin(IDs.adminID, IDs.device.deviceID, adminName, adminEmail);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  async registerDataminer(dataminerName: string, sessionID: number): Promise<boolean> {\r\n    //TODO\r\n    let device: { deviceID?: number, deviceName: string, deviceType: string, firmware: string, generation: string, MACADRESS: string, sensorInformation: { sensorTypeID: number, sensorName: string, sensorUniqueID: number; }[]; } = { deviceID: -1, deviceName: \"\", deviceType: \"\", firmware: \"\", generation: \"\", MACADRESS: \"\", sensorInformation: [] };\r\n    let dataminer: { dataminerID: number, device: { deviceID: number, sensorID: number[]; }, project: { projectID: number, projectName: string, sessionID: number; }; } = await this.dbCon.registerDataminer({ dataminerName, sessionID, device });\r\n    if (dataminer.dataminerID >= 0 && dataminer.device.deviceID >= 0) {\r\n      this.user = new Dataminer(dataminer.dataminerID, dataminer.device.deviceID, dataminerName);\r\n      this.user.loadProject(dataminer.project);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param aiModelUserName \r\n   */\r\n  async registerAIModelUser(aiModelUserName: string, modelID: number): Promise<boolean> {\r\n    //TODO\r\n    let device: { deviceID?: number, deviceName: string, deviceType: string, firmware: string, generation: string, MACADRESS: string, sensorInformation: { sensorTypeID: number, sensorName: string, sensorUniqueID: number; }[]; } = { deviceID: -1, deviceName: \"\", deviceType: \"\", firmware: \"\", generation: \"\", MACADRESS: \"\", sensorInformation: [] };\r\n    let aiModelUser: { aiModelUserID: number, device: { deviceID: number, sensorID: number[]; }, project: { projectID: number, projectName: string, sessionID: -1; }; } = await this.dbCon.registerAIModelUser({ aiModelUserName, modelID, device });\r\n    if (aiModelUser.aiModelUserID >= 0 && aiModelUser.device.deviceID >= 0) {\r\n      this.user = new AIModelUser(aiModelUser.aiModelUserID, aiModelUser.device.deviceID, aiModelUserName);\r\n      this.user.loadProject(aiModelUser.project);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  async loginAdmin(adminEmail: string, password: string): Promise<boolean> {\r\n    if (this.user == null) {\r\n      let adminData: { admin: { adminID: number, deviceID: number, adminName: string, email: string, device: { deviceID?: number, deviceName: string, deviceType: string, firmware: string, generation: string, MACADRESS: string, sensorInformation: { sensorTypeID: number, sensorName: string, sensorUniqueID: number; }[]; }; }; } = await this.dbCon.loginAdmin({ adminEmail, password });\r\n      if (adminData.admin != null && adminData.admin.adminID != -1) {\r\n        let admin = adminData.admin;\r\n        this.user = new Admin(admin.adminID, admin.deviceID, admin.adminName, admin.email, admin.device);\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /* eventuell implementieren\r\n    logoutAdmin(): boolean {\r\n      if (this.user != null) {\r\n        let logout = this.dbCon.logoutAdmin(this.getAdminEmail());\r\n        if (logout) {\r\n          delete this.user;\r\n        } else {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n    */\r\n\r\n  async createProject(projectName: string): Promise<boolean> {\r\n    if (this.user instanceof Admin) {\r\n      let userID = this.user.getID();\r\n      let adminEmail = this.getAdminEmail();\r\n      let project: { projectID: number, sessionID: number; } = await this.dbCon.createProject({ userID, adminEmail, projectName });\r\n      return this.user.createProject(project.projectID, project.sessionID, projectName);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  async createLabel(span: { start: number, end: number; }, labelName: string): Promise<number> {\r\n    if (this.user != null) {\r\n      let sessionID: number = this.getSessionID();\r\n      let userID: number = this.user.getID();\r\n      let datasetID: number = this.user.getCurrentDataSetID();\r\n      let labelID: number = await this.dbCon.createLabel({ sessionID, userID, datasetID, label: { span, labelName } });\r\n      if (labelID >= 0) {\r\n        let created: boolean = this.user.createLabel(labelID, span, labelName);\r\n        if (created) {\r\n          return labelID;\r\n        }\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  async setLabel(labelID: number, span: { start: number, end: number; }, labelName?: string): Promise<boolean> {\r\n    if (this.user != null) {\r\n      let setted: boolean = this.user.setLabel(labelID, span, labelName);\r\n      if (setted) {\r\n        let sessionID: number = this.getSessionID();\r\n        let userID: number = this.user.getID();\r\n        let datasetID: number = this.user.getCurrentDataSetID();\r\n        return this.dbCon.setLabel({ sessionID, userID, datasetID, label: { labelID, span, labelName } });\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  async deleteLabel(labelID: number): Promise<boolean> {\r\n    if (this.user != null) {\r\n      let deleted: boolean = this.user.deleteLabel(labelID);\r\n      if (deleted) {\r\n        let sessionID: number = this.getSessionID();\r\n        let userID: number = this.user.getID();\r\n        let datasetID: number = this.user.getCurrentDataSetID();\r\n        return this.dbCon.deleteLabel({ sessionID, userID, datasetID, labelID });\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n\r\n  getLabels(): { labels?: { name: string, id: number, start: number, end: number; }[]; } {\r\n    if (this.user != null) {\r\n      return this.user.getLabels();\r\n    }\r\n    return {};\r\n  }\r\n\r\n  classify(aiId: number, dataSetId: number, callBack: Function): void {\r\n    throw new Error(\"Not implemented\");\r\n  };\r\n\r\n  getAIModel(id: number, format: DeliveryFormat): object {\r\n    throw new Error(\"Not implemented\");\r\n  }\r\n\r\n  applyModel(modeldata: object): void {\r\n    throw new Error(\"Not implemented\");\r\n  }\r\n\r\n}\r\n\r\n\r\n//AIModelUser läd da sofort das Model?\r\n// wird aktuell nicht benutzt\r\n// checkLogin(): boolean { }\r\n","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\ReferringController.tsx",["595","596","597","598","599","600","601"],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\State.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Language.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\User.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DatabaseConnector.tsx",["602"],"import { Language } from \"./Language\";\r\n\r\n//Die Schnittstelle zur Datenbank.\r\nexport class DatabaseConnector {\r\n  private static readonly databasePHPURL: string = \"/src/database/index.php\";\r\n\r\n  /**\r\n   * Gibt Name und Code jeder verfügbaren Sprache zurück\r\n   */\r\n  async getLanguageMetas(): Promise<{ languageCode: number, languageName: string; }[]> {\r\n    const result: { languageCode: number, languageName: string; }[] = await this.sendRequest(\"get_language_metas\");\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Läd die Sprache mit dem gegebenen Sprachcode, falls dieser in der Datenbank verfügbar ist\r\n   * @param languageCode Sprachcode\r\n   * @returns die Sprache\r\n   */\r\n  async loadLanguage(requestData: { languageCode: string; }): Promise<string[]> {\r\n    const result: string[] = await this.sendRequest(\"load_language\", requestData);\r\n    return result;\r\n  }\r\n\r\n  //Erzeugt ein neues Projekt und setzt dieses als das momentan benutzte Projekt. Der Parameter projectName beinhaltet den Namen des neuen Projektes.\r\n  /**\r\n   * Erzeugt ein neues Projekt in der Datenbank\r\n   * @param userID von dem Admin, der das Projekt erstellt\r\n   * @param adminEmail zur Sicherheit, muss zur ID übereinstimmen\r\n   * @param projectName der Name des neuen Projekts (Projekte dürfen nicht gleich heißen wie ein bestehendes Projekt)\r\n   * @returns ProjektID und die SessionID, falls das Projekt nicht erstellt werden konnte beides -1\r\n   */\r\n  async createProject(requestData: { userID: number, adminEmail: string, projectName: string; }): Promise<{ projectID: number, sessionID: number; }> {\r\n    const result: { projectID: number, sessionID: number; } = await this.sendRequest(\"createProject\", requestData);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Erzeugt einen leeren Datensatz in der Datenbank\r\n   * @param sessionID die SessionID des Projekts (Implizit die AdminID)\r\n   * @param projektID zur Sicherheit, muss zur SessionID übereinstimmen\r\n   * @param userID die UserID, der Daten anlegen möchte\r\n   * @param dataSetName der Name des Datensatzes\r\n   * @param dataRow die zu erzeugenden Datenreihen, die sensorID muss schon existieren\r\n   * @returns dataSetID (dataRowID ist implizit, da es die ID der Position im Array von dataRow ist (beginnend mit 0))\r\n   *          bei fehler, -1\r\n   */\r\n  async createDataSet(requestData: { sessionID: number, projectID: number, userID: number, dataSetName: string, dataRow: { sensorID: number, datarowName?: string; }[]; }): Promise<number> {\r\n    const result: number = await this.sendRequest(\"createDataSet\", requestData);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Sendet den Datenpunkt mit den übergebenen Parametern\r\n   * @param sessionID die Session ID\r\n   * @param userID zur Sicherheit, muss zur SessionID und zur DatensatzID übereinstimmen\r\n   * @param datSetID \r\n   * @param dataRowID \r\n   * @param datapoint \r\n   */\r\n  async sendDataPoint(requestData: { sessionID: number, userID: number, dataSetID: number, dataRowID: number, datapoint: { value: number, relativeTime: number; }; }): Promise<boolean> {\r\n    const result: boolean = await this.sendRequest(\"sendDataPoint\", requestData);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Lädt das Projekt mit der ensprechenden userID und ProjektID.\r\n   * @param userID \r\n   * @param adminEmail zur Sicherheit, muss zur UserID übereinstimmen\r\n   * @param projectID \r\n   * @returns Gibt die Daten zurück, als Fehler werden alle IDs auf -1 gesetzt\r\n   */\r\n  async loadProject(requestData: { userID: number, adminEmail: string, projectID: number; }): Promise<{\r\n    projectID: number, sessionID: number, projectName: string, aiModelID: number[],\r\n    dataSet: {\r\n      dataRowSensors: Sensor[], dataSetID: number, dataSetName: string, generateDate: number,\r\n      dataRows: {\r\n        dataRowID: number, recordingStart: number,\r\n        dataRow: { value: number, relativeTime: number; }[];\r\n      }[],\r\n      label: { name: string, labelID: number, start: number, end: number; }[];\r\n    }[];\r\n  }> {\r\n    const result: {\r\n      projectID: number, sessionID: number, projectName: string, aiModelID: number[],\r\n      dataSet: {\r\n        dataRowSensors: Sensor[], dataSetID: number, dataSetName: string, generateDate: number,\r\n        dataRows: {\r\n          dataRowID: number, recordingStart: number,\r\n          dataRow: { value: number, relativeTime: number; }[];\r\n        }[],\r\n        label: { name: string, labelID: number, start: number, end: number; }[];\r\n      }[];\r\n    } = await this.sendRequest(\"loadProject\", requestData);\r\n    return result;\r\n  }\r\n\r\n  //Gibt von allen Projekten des angemeldeten Ad-mins, mit der Email adminEmail, die Projekt ID und den Projekt Namen zurück\r\n  /**\r\n   * Gibt von allen Projekten des Admins\r\n   * @param userID\r\n   * @param adminEmail zur Sicherheit, muss zur UserID übereinstimmen\r\n   */\r\n  async getProjectMetas(requestData: { userID: number, adminEmail: string; }): Promise<{ projectID: number, projectName: string, AIModelID: number[]; }[]> {\r\n    const result: { projectID: number, projectName: string, AIModelID: number[]; }[] = await this.sendRequest(\"getProjectMetas\", requestData);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Löscht den Datensatz im Projekt welcher die angegebene ID besitzt\r\n   * @param userID\r\n   * @param adminEmail zur Sicherheit, muss zur UserID übereinstimmen\r\n   * @param projectID \r\n   * @param dataSetID \r\n   * @returns ob der Datenset erfolgreich gelöscht wurde\r\n   */\r\n  async deleteDataSet(requestData: { userID: number, adminEmail: string, projectID: number, dataSetID: number; }): Promise<boolean> {\r\n    const result: boolean = await this.sendRequest(\"deleteDataSet\", requestData);\r\n    return result;\r\n  }\r\n\r\n  //Der Parameter adminName bestimmt den Namen des Projektleiters, email bestimmt die E-Mail des Projektleiters und password bestimmt das Passwort des Projektleiters.\r\n  /**\r\n   * Registriert einen neuen Projektleiter. \r\n   * @param adminName \r\n   * @param adminEmail \r\n   * @param password \r\n   * @param device \r\n   * @returns Gibt die Daten zurück, als Fehler werden alle IDs auf -1 gesetzt\r\n   */\r\n  async registerAdmin(requestData: { adminName: string, adminEmail: string, password: string, device: { deviceID?: number, deviceName: string, deviceType: string, firmware: string, generation: string, MACADRESS: string, sensorInformation: { sensorTypeID: number, sensorName: string, sensorUniqueID: number; }[]; }; }): Promise<{ adminID: number, device: { deviceID: number, sensorID: number[]; }; }> {\r\n    const result: { adminID: number, device: { deviceID: number, sensorID: number[]; }; } = await this.sendRequest(\"registerAdmin\", requestData);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Registriert einen Datenerfasser.\r\n   * @param dataminerName \r\n   * @param sessionID die SessionID, mit der der Datenerfasser verknüpft ist, diese bestimmt in welchem Projekt die Daten abgelegt werden\r\n   * @param device \r\n   * @returns Gibt die Daten zurück, als Fehler werden alle IDs auf -1 gesetzt\r\n   */\r\n  async registerDataminer(requestData: { dataminerName: string, sessionID: number, device: { deviceID?: number, deviceName: string, deviceType: string, firmware: string, generation: string, MACADRESS: string, sensorInformation: { sensorTypeID: number, sensorName: string, sensorUniqueID: number; }[]; }; }): Promise<{ dataminerID: number, device: { deviceID: number, sensorID: number[]; }, project: { projectID: number, projectName: string, sessionID: number; }; }> {\r\n    const result: { dataminerID: number, device: { deviceID: number, sensorID: number[]; }, project: { projectID: number, projectName: string, sessionID: number; }; } = await this.sendRequest(\"registerDataminer\", requestData);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Registriert einen KI-Anwender\r\n   * @param aiModelUserName \r\n   * @param modelID \r\n   * @param device \r\n   * @returns Gibt die Daten zurück, als Fehler werden alle IDs auf -1 gesetzt\r\n   */\r\n  async registerAIModelUser(requestData: { aiModelUserName: string, modelID: number, device: { deviceID?: number, deviceName: string, deviceType: string, firmware: string, generation: string, MACADRESS: string, sensorInformation: { sensorTypeID: number, sensorName: string, sensorUniqueID: number; }[]; }; }): Promise<{ aiModelUserID: number, device: { deviceID: number, sensorID: number[]; }, project: { projectID: number, projectName: string, sessionID: -1; }; }> {\r\n    const result: { aiModelUserID: number, device: { deviceID: number, sensorID: number[]; }, project: { projectID: number, projectName: string, sessionID: -1; }; } = await this.sendRequest(\"registerAIModelUser\", requestData);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Meldet den Admin an. \r\n   * @param email \r\n   * @param password \r\n   */\r\n  async loginAdmin(requestData: { adminEmail: string, password: string; }): Promise<{ admin: { adminID: number, deviceID: number, adminName: string, email: string, device: { deviceID?: number, deviceName: string, deviceType: string, firmware: string, generation: string, MACADRESS: string, sensorInformation: { sensorTypeID: number, sensorName: string, sensorUniqueID: number; }[]; }; }; }> {\r\n    const result: { admin: { adminID: number, deviceID: number, adminName: string, email: string, device: { deviceID?: number, deviceName: string, deviceType: string, firmware: string, generation: string, MACADRESS: string, sensorInformation: { sensorTypeID: number, sensorName: string, sensorUniqueID: number; }[]; }; }; } = await this.sendRequest(\"loginAdmin\", requestData);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Erstellt ein Label\r\n   * @param sessionID \r\n   * @param userID \r\n   * @param datasetID \r\n   * @param label \r\n   * @returns labelID\r\n   */\r\n  async createLabel(requestData: { sessionID: number, userID: number, datasetID: number, label: { span: { start: number, end: number; }, labelName: string; }; }): Promise<number> {\r\n    const result: number = await this.sendRequest(\"createLabel\", requestData);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Setzt dem bestehenden Label neue Werte\r\n   * @param sessionID \r\n   * @param userID \r\n   * @param datasetID \r\n   * @param label \r\n   */\r\n  async setLabel(requestData: { sessionID: number, userID: number, datasetID: number, label: { labelID: number, span: { start?: number, end?: number; }, labelName?: string; }; }): Promise<boolean> {\r\n    const result: boolean = await this.sendRequest(\"setLabel\", requestData);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Löscht das Label\r\n   * @param sessionID \r\n   * @param userID \r\n   * @param datasetID \r\n   * @param labelID \r\n   */\r\n  async deleteLabel(requestData: { sessionID: number, userID: number, datasetID: number, labelID: number; }): Promise<boolean> {\r\n    const result: boolean = await this.sendRequest(\"deleteLabel\", requestData);\r\n    return result;\r\n  }\r\n\r\n  private async sendRequest(action: string, requestData?: object): Promise<any> {\r\n    const headers = { 'Content-Type': 'application/json' };\r\n    var obj;\r\n    await fetch(DatabaseConnector.databasePHPURL + \"?action=\" + action, { method: 'POST', headers, body: JSON.stringify(requestData) }).then(response => response.json()).then(data => { obj = data; });\r\n    return obj;\r\n  }\r\n}\r\n\r\n\r\n////////////////////IDs als Parameter immer auf >= 0 prüfen, da -1 eine Fehlermeldung ist. Sowie Admin Email auf inhalt prüfen, \"\" ist nicht angemeldet\r\n\r\n\r\n///////////////////Wird Logout Admin benötigt?\r\n/*\r\n    //Meldet den momentan angemeldeten Admin ab\r\n    logoutAdmin(email: string): boolean {\r\n      return true;\r\n    }\r\n  */","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\VisualizationController.tsx",["603"],"import { PageController } from \"./PageController\";\r\nimport { VisualizationPage } from \"../view/pages/VisualizationPage/index\";\r\nimport { MainController } from \"./MainController\";\r\nimport { ModelCreationController } from \"./ModelCreationController\";\r\nimport { Page } from \"../view/pages/PageInterface\";\r\nimport { IState, States } from \"../view/pages/State\";\r\nimport { State } from \"../view/pages/DeliveryPage/State\";\r\n\r\nexport class VisualizationController implements PageController {\r\n    private page: Page;\r\n    private state: IState;\r\n\r\n    /**\r\n     * Konstruktor des Seitenverwalters. Registriert sich als Beobachter auf seiner Seite und setzt den start Status.\r\n     * Dieser Seitenverwalter benötigt einen SensorManager, welcher schon initilisiert wurde. \r\n     */\r\n    constructor(currentProjekt: { projectID: number, projectName: string, choosenAIModelID: number; }) {\r\n        this.page = new VisualizationPage({});\r\n        this.page.attach(this);\r\n        this.state = this.page.getState()\r\n        this.state.currentProject = currentProjekt\r\n        this.page.setState(this.state)\r\n    }\r\n\r\n    /**\r\n     * Die Update Methode des Seitenverwalters.\r\n     */\r\n    update() {\r\n        this.state = this.page.getState();\r\n        switch (this.state.currentState) {\r\n            case States.NeedMessage:\r\n                this.page.setState(MainController.getInstance().getMessage(this.state.messages));\r\n                break;\r\n            case States.ChangeToCreation:\r\n                MainController.getInstance().changeTo(new ModelCreationController())\r\n                break;\r\n            case States.ChangeLabel:\r\n                this.changeDataLabel();\r\n                break;\r\n            case States.NewLabel:\r\n                this.newDataLabel();\r\n                break;\r\n            case States.DeleteDataLabel:\r\n                this.deleteDataLabel();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    SetDataRows() {\r\n        let data = [this.state.dataSets!]//MainController.getInstance().getFacade().getMinerData();\r\n        for (let index = 0; index < data.length; index++) {\r\n            this.state.dataSets! = data[index];\r\n            this.state.currentState = States.SetDataRows\r\n            this.page.setState(this.state)\r\n        }\r\n    }\r\n\r\n    alertConnectionError() {\r\n        this.state.currentState = States.LoadError\r\n        this.page.setState(this.state)\r\n    }\r\n\r\n    /**\r\n     * Ändert die Einstellungen eines DatenLabels gemäß den Änderungen aus der momentanen Seite.\r\n     */\r\n    private changeDataLabel() {\r\n        let label = this.state.currentLabel!\r\n        MainController.getInstance().getFacade().setLabel(label.labelID, {start: label.start, end: label.end}, label.name);\r\n    }\r\n\r\n    /**\r\n     * Erstellt ein neues Datenlabel. Dafür werden die neuen Daten des Labels aus der momentanene Seite an das\r\n     * Modell geleitet. Die ID des neuen Labels wird darauf an die momentane Seite übergeben.\r\n     */\r\n    private newDataLabel() {\r\n        let label = this.state.currentLabel!\r\n        //label.labelID = MainController.getInstance().getFacade().creatLabel(label.start, label.end);\r\n        this.state.currentLabel! = label\r\n    }\r\n\r\n    /**\r\n     * Löscht das Label welches gemäß der Methode getDeleteLabelID von der momentanen Seite angegeben wurde.\r\n     */\r\n    private deleteDataLabel() {\r\n        //MainController.getInstance().getFacade().deleteLabel(this.state.currentLabel!.labelID);\r\n    }\r\n}","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\DeliveryController.tsx",["604","605"],"import { PageController } from \"./PageController\";\r\nimport { MainController } from \"./MainController\";\r\nimport { Page } from \"../view/pages/PageInterface\";\r\nimport { IState, States } from \"../view/pages/State\";\r\nimport { DeliveryPage } from \"../view/pages/DeliveryPage/index\";\r\n\r\nexport class DeliveryController implements PageController {\r\n\r\n    private page: Page;\r\n    private state: IState;\r\n\r\n    /**\r\n    * Konstruktor des Seitenverwalters. Registriert sich als Beobachter auf seiner Seite und setzt den start Status.\r\n    * @param currentProject Die momentanen Projectdaten für welches man ein Model ausliefern möchte. \r\n    */\r\n    constructor(currentProject: { projectID: number, projectName: string, choosenAIModelID: number; }) {\r\n        this.page = new DeliveryPage({});\r\n        this.page.attach(this);\r\n        this.state = this.page.getState()\r\n        this.state.currentProject = currentProject\r\n        this.page.setState(this.state)\r\n    }\r\n\r\n    /**\r\n    * Die Update Methode des Seitenverwalters.\r\n    */\r\n    update() {\r\n        this.state = this.page.getState();\r\n        switch (this.state.currentState) {\r\n            case States.DeliverWeb:\r\n                this.deliverAsWebApp();\r\n                break;\r\n            case States.NeedMessage:\r\n                this.page.setState(MainController.getInstance().getMessage(this.state.messages));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Holt sich aus dem Status alle angegebene Email-Adressen und gibt diese mit Daten zum Projekt an die Fassade welche eine Email an alle Adressen sendet.\r\n    * Der Inhalt der Email gibt zugriff auf das Modell zur klassifizierung.\r\n    */\r\n    deliverAsWebApp() {\r\n        //let emails: string[] = this.state.currentMail;\r\n        let emails: string[] = [\"Darius.Seiter@outlook.com\"]\r\n        //let text: string = MainController.getInstance().getFacade().getDeliverText();\r\n        let text: string = \"TEST\"\r\n        for (let index = 0; index < emails.length; index++) {\r\n            const element: string = emails[index];\r\n            //MainController.getInstance().getFacade().sendMail(element, this.state.currentProject);\r\n        }\r\n    }\r\n\r\n    deliverAsExe() {\r\n        //todo in Quality Controll\r\n    }\r\n}","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Device.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Project.tsx",["606"],"import { AIModel } from \"./AIModel\";\r\nimport { DataSet } from \"./DataSet\";\r\nimport { SensorData } from \"./Sensor\";\r\nimport { Session } from \"./Session\";\r\nimport { Admin } from \"./User\";\r\n\r\n/**\r\n * Diese Klasse speichert alle Informationen zu einem Projekt.\r\n * Ein Projekt beinhaltet aufgezeichnete Datensätze (DataSet) sowie Informationen zu den Datensätzen.\r\n */\r\nexport class Project {\r\n  private id: number; //Die eindeutige Projekt ID\r\n  private name: string; //Der Name des Projektes\r\n  private session: Session; //Die Session in dem das Projekt arbeitet\r\n  private aiModel: AIModel[] = []; //Das AIModel von dem Projekt\r\n  private dataSet: DataSet[] = []; //Die Datensätze, die zu dem Projekt gehören\r\n  private currentDataSet?: DataSet; //Aktueller Datensatz\r\n\r\n  /**\r\n     * Eine bereits existierendes Projekt kann wie folgt in das Model geladen werden.\r\n     * @param projectID Die Projekt ID\r\n     * @param sessionID Die Session ID\r\n     * @param projectName Der Projektnamen\r\n     * @param admin Der Besitzer dieses Projekts für die Session\r\n     * @param aiModelID Die schon existierenden AIModel IDs\r\n     * @param dataSet Die schon existierenden Datensätze\r\n     */\r\n  constructor(projectID: number, sessionID: number, projectName: string, projectData?: {\r\n    aiModelID?: number[],\r\n    dataSet?: {\r\n      dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate: number,\r\n      dataRows: {\r\n        dataRowID: number, recordingStart: number,\r\n        dataRow: { value: number, relativeTime: number; }[];\r\n      }[],\r\n      label: { name: string, labelID: number, start: number, end: number; }[];\r\n    }[];\r\n  }) {\r\n    this.id = projectID;\r\n    this.name = projectName;\r\n    this.session = new Session(sessionID);\r\n    if (projectData != null) {\r\n      if (projectData.aiModelID != null) {\r\n        for (let i = 0; i < projectData.aiModelID.length; i++) {\r\n          this.aiModel.push(new AIModel(projectData.aiModelID[i]));\r\n        }\r\n      }\r\n      if (projectData.dataSet != null) {\r\n        for (let i = 0; i < projectData.dataSet.length; i++) {\r\n          this.dataSet.push(new DataSet(projectData.dataSet[i].dataRowSensors, projectData.dataSet[i].dataSetID, projectData.dataSet[i].dataSetName, projectData.dataSet[i].generateDate, projectData.dataSet[i].dataRows, projectData.dataSet[i].label));\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Gibt den Projektnamen zurück\r\n   */\r\n  getName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  /**\r\n   * Löscht den Datensatz mit der DatensatzID\r\n   * @param dataSetID die Datensatz ID\r\n   */\r\n  deleteDataSet(dataSetID: number): boolean {\r\n    for (let i = 0; i < this.dataSet.length; i++) {\r\n      if (this.dataSet[i].getID() === dataSetID) {\r\n        delete this.dataSet[i];\r\n        if (this.currentDataSet != null && this.currentDataSet.getID() === dataSetID) {\r\n          delete this.currentDataSet;\r\n        }\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Gibt die Projekt ID zurück.\r\n   */\r\n  getID(): number {\r\n    return this.id;\r\n  }\r\n\r\n\r\n  /**\r\n   * Erstellt einen neuen Datensatz und setzt diesen als aktuellen Datensatz.\r\n   * @param dataRowSensors die Sensoren, von denen die Daten ausgelesen werden\r\n   * @param dataSetID die eindeutige Datensatz ID\r\n   * @param dataSetName der Datensatznamen\r\n   * @param generateDate die Erstellungszeit von dem Datensatz\r\n   */\r\n  createDataSet(dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate?: number): void {\r\n    var dataSet: DataSet = new DataSet(dataRowSensors, dataSetID, dataSetName, generateDate);\r\n    this.dataSet.push(dataSet);\r\n    this.currentDataSet = dataSet;\r\n  }\r\n\r\n  /**\r\n   * Gibt die aktuelle Datensatz ID zurück, falls diese nicht existiert wird -1 zurück gegeben\r\n   */\r\n  getCurrentDataSetID(): number {\r\n    if (this.currentDataSet != null) {\r\n      return this.currentDataSet.getID();\r\n    }\r\n    return -1;\r\n\r\n  }\r\n\r\n  /**\r\n   * Liest von dem aktuellen Datensatz neue Sensordaten von der Datenreihe mit der Datenreihen ID\r\n   * @param dataRowID die Datenreihen ID, von der die Daten ausgelesen werden sollen.\r\n   * @returns die gelesenen Daten von der Datenreihe. Falls die Datenreihe nicht existiert oder kein aktueller Datensatz existiert, sind die Daten leer.\r\n   */\r\n  readDataPoint(dataRowID: number): { dataPoint?: { value: number, relativeTime: number; }; } {\r\n    if (this.currentDataSet != null) {\r\n      return this.currentDataSet.readDataPoint(dataRowID);\r\n    }\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Gibt von allen Datensätzen Informationen zurück\r\n   * @returns dataSetID ist die DatensatzID und dataSetName ist der Datensatzname\r\n   */\r\n  getDataSetMetas(): { dataSetID: number, dataSetName: string; }[] {\r\n    var dataSetMetas: { dataSetID: number, dataSetName: string; }[] = [];\r\n    for (let i = 0; i < this.dataSet.length; i++) {\r\n      dataSetMetas.push({ dataSetID: this.dataSet[i].getID(), dataSetName: this.dataSet[i].getName() });\r\n    }\r\n    return dataSetMetas;\r\n  }\r\n\r\n  /**\r\n   * Gibt die Datenreihen der Datensatz ID zurück und setzt diesen Datensatz als aktuellen Datensatz\r\n   * @param dataSetID die Datensatz ID von der die Datenreihen gelesen werden sollen\r\n   * @returns die Sensordaten von der Datenreihe\r\n   */\r\n  getDataRows(dataSetID: number): { dataRows?: { value: number, relativeTime: number; }[][]; } {\r\n    for (let i = 0; i < this.dataSet.length; i++) {\r\n      if (this.dataSet[i].getID() === dataSetID) {\r\n        this.currentDataSet = this.dataSet[i];\r\n        return { dataRows: this.dataSet[i].getDataRows() };\r\n      }\r\n    }\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Gibt die Datenreihen der aktuellen Datenreihe zurück\r\n   * @returns die Sensordaten von der Datenreihe\r\n   */\r\n  getCurrentDataRows(): { dataRows?: { value: number, relativeTime: number; }[][]; } {\r\n    if (this.currentDataSet != null) {\r\n      return { dataRows: this.currentDataSet.getDataRows() };\r\n    }\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Gibt die Session ID zurück\r\n   */\r\n  getSessionID(): number {\r\n    return this.session.getId();\r\n  }\r\n\r\n  /**\r\n   * Setzt dem Label mit der übergebenen ID neue Werte.\r\n   * @param start Ist die neue Startzeit des Labels.\r\n   * @param end Ist die neue Endzeit des Labels.\r\n   * @param labelID Die Label ID, welche überarbeitet werden soll.\r\n   * @param labelName Ist bei Angabe der neue Name des Labels.\r\n   * @returns falls das Label nicht existiert oder es kein aktuellen Datensatz gibt wird false zurück gegeben\r\n   */\r\n  createLabel(labelID: number, span: { start: number, end: number; }, labelName: string): boolean {\r\n    if (this.currentDataSet != null) {\r\n      return this.currentDataSet.setLabel(labelID, span, labelName);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  setLabel(labelID: number, span: { start: number, end: number; }, labelName?: string): boolean {\r\n    if (this.currentDataSet != null) {\r\n      return this.currentDataSet.setLabel(labelID, span, labelName);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  deleteLabel(labelID: number): boolean {\r\n    if (this.currentDataSet != null) {\r\n      return this.currentDataSet.deleteLabel(labelID);\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gibt alle Daten von allen Labeln vom aktuellen Datensatz zurück.\r\n   * @returns leer, falls kein aktueller Datensatz existiert\r\n   */\r\n  getLabels(): { labels?: { name: string, id: number, start: number, end: number; }[]; } {\r\n    if (this.currentDataSet != null) {\r\n      return { labels: this.currentDataSet.getLabels() };\r\n    }\r\n    return {};\r\n  }\r\n}","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\ModelCreationController.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\FinishPage\\index.tsx",["607","608"],"import React, { Component } from \"react\";\r\nimport PubSub from 'pubsub-js';\r\nimport Title from \"../../components/FinishComponents/Title\";\r\nimport Body from \"../../components/FinishComponents/Body\";\r\nimport Labelling from \"../../components/FinishComponents/Input/Labelling\";\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { States } from \"../State\";\r\n\r\ntype IProps = {\r\n};\r\n\r\nexport class FinishPage extends React.Component<IProps, State> implements Page {\r\n  state = new State();\r\n  observers: PageController[] = [];\r\n\r\n  constructor(props: IProps) {\r\n    super(props);\r\n    this.giveDiagram();\r\n    const VDOM = (\r\n      <div>\r\n        <Title />\r\n        <Body />\r\n        <div className=\"label-container\">\r\n          <Labelling />\r\n        </div>\r\n      </div>\r\n    );\r\n    ReactDOM.render(VDOM, document.getElementById(\"root\"));\r\n  }\r\n\r\n  giveDiagram() {\r\n    PubSub.publish(\"giveDiagram\", this.state.diagramSvg);\r\n  }\r\n\r\n\r\n  /**\r\n   * Die Methoden für Beobachtermuster\r\n   * @param observer Beobachter,nähmlich Controller\r\n  */\r\n  attach(observer: PageController) {\r\n    this.observers.push(observer);\r\n  }\r\n\r\n  detach(observer: PageController) {\r\n    const index = this.observers.indexOf(observer, 0);\r\n    if (index > -1) {\r\n      this.observers.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  notify() {\r\n    for (let index = 0; index < this.observers.length; index++) {\r\n      const element = this.observers[index];\r\n      element.update();\r\n    }\r\n  }\r\n\r\n  getState() {\r\n    return this.state;\r\n  }\r\n}","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\index.tsx",["609","610","611","612","613","614"],"import React, { Component } from 'react'\r\nimport PubSub from 'pubsub-js';\r\nimport ImageList from '../../components/VisualizationComponents/ImageList'\r\nimport eximage1 from '../../images/exImage1.svg'\r\nimport './VisualizationPage.css'\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport { MainController } from '../../../controller/MainController';\r\nimport ReactDOM from 'react-dom';\r\nimport ShowImage from '../../components/VisualizationComponents/ShowImage';\r\nimport { States } from '../State';\r\nimport FinishButton from '../../components/VisualizationComponents/FinishButton';\r\n\r\ntype Props = {\r\n};\r\n\r\nexport class VisualizationPage extends React.Component<Props, State> implements Page {\r\n    state = new State()\r\n    observers: PageController[] = [];\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.getimagelist()\r\n        this.changeimg()\r\n        this.changetonextpage()\r\n        const VDOM = (\r\n            <div className=\"visualizationpage\">\r\n                <ShowImage />\r\n                <ImageList />\r\n                <FinishButton />\r\n            </div>\r\n        );\r\n        ReactDOM.render(VDOM, document.getElementById('root'));\r\n    }\r\n\r\n\r\n    attach(observer: PageController) {\r\n        this.observers.push(observer);\r\n    }\r\n\r\n    detach(observer: PageController) {\r\n        const index = this.observers.indexOf(observer, 0);\r\n        if (index > -1) {\r\n            this.observers.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    notify() {\r\n        for (let index = 0; index < this.observers.length; index++) {\r\n            const element = this.observers[index];\r\n            element.update();\r\n        }\r\n    }\r\n\r\n    getState() {\r\n        return this.state;\r\n    }\r\n\r\n    getimagelist() {\r\n        this.state.currentState = States.NeedImageList\r\n        this.notify()\r\n        PubSub.publish('getimagelist', this.state.imageList)\r\n    }\r\n    changeimg() {\r\n        PubSub.subscribe('changeimg', (_msg: any, data: string) => {\r\n            this.state.currentImg = data\r\n            //console.log(this.state.currentImg)\r\n        })\r\n    }\r\n    changetonextpage() {\r\n        PubSub.subscribe('changepage', (_msg: any) => {\r\n            this.state.currentState = States.ChangeToCreation\r\n            this.notify()\r\n\r\n        })\r\n    }\r\n}\r\n","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\index.tsx",["615","616","617","618"],"import React, { Component } from 'react';\r\nimport DownloadButton from '../../components/DeliveryComponents/DownloadButton';\r\nimport EmailList from '../../components/DeliveryComponents/EmailList';\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from 'react-dom';\r\nimport { States } from '../State';\r\n\r\ntype Props = {\r\n};\r\n\r\nexport class DeliveryPage extends React.Component<Props, State> implements Page {\r\n\r\n\tstate = new State();\r\n\tobservers: PageController[] = [];\r\n\tconstructor(props: Props) {\r\n\t\tsuper(props);\r\n\t\tthis.delivery()\r\n\t\tthis.download()\r\n\t\tconst VDOM = (\r\n\t\t\t<div className=\"deliverypage\">\r\n\t\t\t\t<EmailList />\r\n\t\t\t\t<DownloadButton />\r\n\t\t\t</div>\r\n\t\t);\r\n\t\tReactDOM.render(VDOM, document.getElementById('root'));\r\n\t}\r\n\r\n\tattach(observer: PageController) {\r\n\t\tthis.observers.push(observer);\r\n\t}\r\n\r\n\tdetach(observer: PageController) {\r\n\t\tconst index = this.observers.indexOf(observer, 0);\r\n\t\tif (index > -1) {\r\n\t\t\tthis.observers.splice(index, 1);\r\n\t\t}\r\n\t}\r\n\r\n\tnotify() {\r\n\t\tfor (let index = 0; index < this.observers.length; index++) {\r\n\t\t\tconst element = this.observers[index];\r\n\t\t\telement.update();\r\n\t\t}\r\n\t}\r\n\r\n\tgetState() {\r\n\t\treturn this.state;\r\n\t}\r\n\r\n\tdelivery() {\r\n\t\tPubSub.subscribe('delivery', (_msg: any, data: string[]) => {\r\n\t\t\tthis.state.currentState = States.DeliverWeb\r\n\t\t\tthis.state.chosenEmails = data\r\n\t\t\tthis.notify()\r\n\t\t})\r\n\t}\r\n\r\n\tdownload() {\r\n\t\tPubSub.subscribe('download', (_msg: any) => {\r\n\t\t\tthis.state.currentState = States.NeedDownload\r\n\t\t\tthis.notify()\r\n\t\t})\r\n\t}\r\n\r\n\r\n}\r\n","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\AIModel.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Sensor.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DataSet.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Session.tsx",["619"],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\index.tsx",["620"],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\FinishPage\\State.tsx",["621"],"export class State {\r\n  currentState: States = States.NeedMessage;\r\n  languageCode: string = \"de\";\r\n  messageIDs: number[] = [];\r\n  messages: string[] = [];\r\n  diagramSvg: string = \"\";\r\n  labels: { id: string, start: number, end: number, name: string; }[] = [];\r\n}\r\n\r\nexport enum States {\r\n  NeedMessage,\r\n  NeedDiagram,\r\n  ChangePage\r\n}\r\n","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\State.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\State.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DataRow.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Label.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\State.tsx",["622"],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\ImageList\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\ShowImage\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Body\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Title\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Input\\Labelling\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\FinishButton\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\EmailList\\index.tsx",["623","624","625","626","627","628","629","630"],"import React, { Component } from 'react'\r\nimport { nanoid } from 'nanoid';\r\n\r\nexport default class EmailList extends Component {\r\n\tstate = {\r\n\t\tmouse: false,\r\n\t\taddButtonClick: false,\r\n\t\tinputempty: true,\r\n\t\tinputemail: {\r\n\t\t\tid: '',\r\n\t\t\taddress: '',\r\n\t\t\tchosen: false\r\n\t\t},\r\n\t\temails: [{\r\n\t\t\tid: 'example',\r\n\t\t\taddress: 'xxxxx@xxx.xx(Beispiel, nach erstmal Addieren automatisch gelöscht)',\r\n\t\t\tchosen: false\r\n\t\t}]\r\n\t}\r\n\r\n\thandleCreate = () => {\r\n\t\tthis.setState({ addButtonClick: true });\r\n\t};\r\n\r\n\tinputchange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\tif (e.target.value == '') {\r\n\t\t\tthis.setState({ inputempty: true })\r\n\t\t} else {\r\n\t\t\tthis.setState({ inputemail: { id: nanoid(), address: e.target.value, chosen: false }, inputempty: false })\r\n\t\t}\r\n\r\n\t}\r\n\thandleKeyUp = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n\t\tthis.deleteEmail('example')\r\n\t\tconst { keyCode } = e;\r\n\t\t//check ENTER-key\r\n\t\tif (keyCode !== 13) return;\r\n\t\t//cant add empty email\r\n\t\tconst { inputemail, inputempty, emails } = this.state\r\n\t\tif (inputempty) {\r\n\t\t\talert('Eingabe darf nicht leer sein!');\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet exist = false\r\n\t\temails.map((emailObj) => {\r\n\t\t\tif (emailObj.address == inputemail.address) exist = true\r\n\t\t})\r\n\t\tif (exist) {\r\n\t\t\talert('Es gibt schon Emailadresse in List!');\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar pattern = /^([A-Za-z0-9_\\-\\.])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z])+$/\r\n\t\tif (pattern.test(inputemail.address)) {\r\n\t\t\tthis.addEmail(inputemail);\r\n\t\t} else {\r\n\t\t\talert('Sie müssen eine Emailadresse eingeben!');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t//hide inputbox\r\n\t\tthis.setState({ addButtonClick: false });\r\n\t};\r\n\r\n\t//handle emailItem\r\n\thandleMouse = (flag: boolean) => {\r\n\t\treturn () => {\r\n\t\t\tthis.setState({ mouse: flag });\r\n\t\t};\r\n\t};\r\n\r\n\thandleCheck = (id: string, chosen: boolean) => {\r\n\t\tconst { emails } = this.state\r\n\t\tconst newEmails = emails.map((emailObj) => {\r\n\t\t\tif (emailObj.id == id) return { ...emailObj, chosen };\r\n\t\t\telse return emailObj;\r\n\t\t})\r\n\t\tthis.setState({ emails: newEmails })\r\n\t};\r\n\r\n\thandleDelete = (id: string) => {\r\n\t\tif (window.confirm('Sind Sie sicher, die gewählt Emailadresse zu löschen?')) {\r\n\t\t\tconst { emails } = this.state\r\n\t\t\tconst newEmails = emails.filter((emailObj) => {\r\n\t\t\t\treturn emailObj.id !== id;\r\n\t\t\t});\r\n\t\t\t//update emailList\r\n\t\t\tthis.setState({ emails: newEmails })\r\n\t\t}\r\n\t};\r\n\r\n\t//addEmail for add new Email\r\n\taddEmail = (emailObj: { id: string, address: string, chosen: boolean }) => {\r\n\t\t//add new one\r\n\t\tconst { emails } = this.state\r\n\t\tconst newEmails = [emailObj, ...emails];\r\n\t\t//update emailList\r\n\t\tthis.setState({ emails: newEmails })\r\n\t};\r\n\r\n\t//deleteEmail for delete emailObj\r\n\tdeleteEmail = (id: string) => {\r\n\t\t//get orignal emailList\r\n\t\t//delete emailObj with id\r\n\t\tconst { emails } = this.state\r\n\t\tconst newEmails = emails.filter((emailObj) => {\r\n\t\t\treturn emailObj.id !== id;\r\n\t\t});\r\n\t\t//update emailList\r\n\t\tthis.setState({ emails: newEmails })\r\n\t};\r\n\r\n\t//checkAllEmail for all chosen email\r\n\tchooseAllEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\t//get orignal emailList\r\n\t\tconst chosen = e.target.checked\r\n\t\tconst { emails } = this.state\r\n\t\tconst newEmails = emails.map((emailObj) => {\r\n\t\t\treturn { ...emailObj, chosen };\r\n\t\t});\r\n\t\t//update emailList\r\n\t\tthis.setState({ emails: newEmails })\r\n\t};\r\n\r\n\t//clearAllChosen for delete all emails\r\n\tclearAllChosen = () => {\r\n\t\tif (window.confirm('Sind Sie sicher, alle gewähte Emailadressen zu löschen?')) {\r\n\t\t\t//get orignal emailList\r\n\t\t\tconst { emails } = this.state;\r\n\t\t\t//filter datas\r\n\t\t\tconst newEmails = emails.filter((emailObj) => {\r\n\t\t\t\treturn !emailObj.chosen;\r\n\t\t\t});\r\n\t\t\t//update emailLists\r\n\t\t\tthis.setState({ emails: newEmails })\r\n\t\t}\r\n\t};\r\n\t//sendmethod\r\n\tdelivery = () => {\r\n\t\tconst { emails } = this.state;\r\n\t\tlet emailaddressList: string[] = []\r\n\t\temails.map((emailObj) => {\r\n\t\t\tif (emailObj.chosen) emailaddressList.push(emailObj.address)\r\n\t\t});\r\n\t\tconsole.log(emailaddressList)\r\n\t\tPubSub.publish('delivery', emailaddressList)\r\n\t}\r\n\trender() {\r\n\t\tconst { mouse, emails } = this.state\r\n\t\tconst chosenCount = emails.reduce((pre, email) => pre + (email.chosen ? 1 : 0), 0)\r\n\t\t//total amount\r\n\t\tconst total = emails.length\r\n\t\treturn (\r\n\t\t\t<div className=\"email-main\">\r\n\t\t\t\t<div className=\"addemailbutton\">\r\n\t\t\t\t\t<button onClick={() => this.handleCreate()} className=\"btn\" >Addieren eine neue Emailadresse!(Addieren Eingaben mit 'Enter'-Taste)</button>\r\n\t\t\t\t\t{this.state.addButtonClick ?\r\n\t\t\t\t\t\t<div className=\"inputbox\">\r\n\t\t\t\t\t\t\t<input onKeyUp={this.handleKeyUp} onChange={this.inputchange} type=\"text\" placeholder=\"input email address with ENTER-key\" />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t: null}\r\n\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{emails.map(emailObj => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<li style={{ backgroundColor: mouse ? '#ddd' : 'white' }} onMouseEnter={this.handleMouse(true)} onMouseLeave={this.handleMouse(false)}>\r\n\t\t\t\t\t\t\t\t<label>\r\n\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" checked={emailObj.chosen} onChange={(e: React.ChangeEvent<HTMLInputElement>): void => this.handleCheck(emailObj.id, e.target.checked)} />\r\n\t\t\t\t\t\t\t\t\t<span>{emailObj.address}</span>\r\n\t\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t\t\t<button onClick={() => this.handleDelete(emailObj.id)} className=\"btn-item\" style={{ display: mouse ? 'block' : 'none' }}>Löschen</button>\r\n\t\t\t\t\t\t\t</li></div>\r\n\t\t\t\t\t)\r\n\t\t\t\t})}\r\n\r\n\t\t\t\t<div className=\"handleallemail\">\r\n\t\t\t\t\t<label>\r\n\t\t\t\t\t\t<input type=\"checkbox\" onChange={this.chooseAllEmail} checked={chosenCount === total && total !== 0 ? true : false} />\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t<span>Gewählt: {chosenCount}</span> / Insegesamt: {total}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\t<button onClick={() => this.clearAllChosen()} className=\"btn-clear\">Löschen alle gewählte Emailadressen!</button>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"deliverybutton\">\r\n\t\t\t\t\t<button onClick={() => this.delivery()} className=\"btn\" >Liefern Aus!</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\DownloadButton\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DataPoint.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\TimeSpan.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\ImputationList\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\NormalizationList\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\FeatureList\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\TrainButton\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\ModelTypeList\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\DatasetList\\index.jsx",[],["631","632"],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\AddDatasetButton\\index.jsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\DatasetItem\\index.jsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\motion-sensors.js",["633","634","635","636"],"// @ts-check\nimport {\n  Sensor,\n  defineReadonlyProperties,\n  __sensor__,\n  notifyError,\n  notifyActivatedState,\n  activateCallback,\n  deactivateCallback,\n} from './sensor.js';\n\nconst slot = __sensor__;\nconst handleEventCallback = Symbol('handleEvent');\n\nlet orientation;\n\n// @ts-ignore\nif (screen.orientation) {\n  // @ts-ignore\n  orientation = screen.orientation;\n} else if (screen.msOrientation) {\n  orientation = screen.msOrientation;\n} else {\n  orientation = {};\n  Object.defineProperty(orientation, 'angle', {\n    get: () => {\n return (window.orientation || 0);\n},\n  });\n}\n\nconst rotationToRadian = (function() {\n  // Returns Chrome version, or null if not Chrome.\n  const match = navigator.userAgent.match(/.*Chrome\\/([0-9]+)/);\n  const chromeVersion = match ? parseInt(match[1], 10) : null;\n\n  // DeviceMotion/Orientation API return deg/s (except Chrome,\n  // but fixing in M66). Gyroscope needs rad/s.\n  const returnsDegrees = chromeVersion === null || chromeVersion >= 66;\n  const conversion = returnsDegrees ? Math.PI / 180 : 1.0;\n  return function(value) {\n    return value * conversion;\n  };\n})();\n\nconst DeviceOrientationMixin = (superclass, ...eventNames) => class extends superclass {\n  constructor(...args) {\n    // @ts-ignore\n    super(args);\n\n    for (const eventName of eventNames) {\n      if (`on${eventName}` in window) {\n        this[slot].eventName = eventName;\n        break;\n      }\n    }\n  }\n\n  [activateCallback]() {\n    window.addEventListener(this[slot].eventName, this[handleEventCallback].bind(this), {capture: true});\n  }\n\n  [deactivateCallback]() {\n    window.removeEventListener(this[slot].eventName, this[handleEventCallback].bind(this), {capture: true});\n  }\n};\n\nfunction toQuaternionFromEuler(alpha, beta, gamma) {\n  const degToRad = Math.PI / 180;\n\n  const x = (beta || 0) * degToRad;\n  const y = (gamma || 0) * degToRad;\n  const z = (alpha || 0) * degToRad;\n\n  const cZ = Math.cos(z * 0.5);\n  const sZ = Math.sin(z * 0.5);\n  const cY = Math.cos(y * 0.5);\n  const sY = Math.sin(y * 0.5);\n  const cX = Math.cos(x * 0.5);\n  const sX = Math.sin(x * 0.5);\n\n  const qx = sX * cY * cZ - cX * sY * sZ;\n  const qy = cX * sY * cZ + sX * cY * sZ;\n  const qz = cX * cY * sZ + sX * sY * cZ;\n  const qw = cX * cY * cZ - sX * sY * sZ;\n\n  return [qx, qy, qz, qw];\n}\n\nfunction rotateQuaternionByAxisAngle(quat, axis, angle) {\n  const sHalfAngle = Math.sin(angle / 2);\n  const cHalfAngle = Math.cos(angle / 2);\n\n  const transformQuat = [\n    axis[0] * sHalfAngle,\n    axis[1] * sHalfAngle,\n    axis[2] * sHalfAngle,\n    cHalfAngle,\n  ];\n\n  function multiplyQuaternion(a, b) {\n    const qx = a[0] * b[3] + a[3] * b[0] + a[1] * b[2] - a[2] * b[1];\n    const qy = a[1] * b[3] + a[3] * b[1] + a[2] * b[0] - a[0] * b[2];\n    const qz = a[2] * b[3] + a[3] * b[2] + a[0] * b[1] - a[1] * b[0];\n    const qw = a[3] * b[3] - a[0] * b[0] - a[1] * b[1] - a[2] * b[2];\n\n    return [qx, qy, qz, qw];\n  }\n\n  function normalizeQuaternion(quat) {\n    const length = Math.sqrt(quat[0] ** 2 + quat[1] ** 2 + quat[2] ** 2 + quat[3] ** 2);\n    if (length === 0) {\n      return [0, 0, 0, 1];\n    }\n\n    return quat.map((v) => v / length);\n  }\n\n  return normalizeQuaternion(multiplyQuaternion(quat, transformQuat));\n}\n\nfunction toMat4FromQuat(mat, q) {\n  const typed = mat instanceof Float32Array || mat instanceof Float64Array;\n\n  if (typed && mat.length >= 16) {\n    mat[0] = 1 - 2 * (q[1] ** 2 + q[2] ** 2);\n    mat[1] = 2 * (q[0] * q[1] - q[2] * q[3]);\n    mat[2] = 2 * (q[0] * q[2] + q[1] * q[3]);\n    mat[3] = 0;\n\n    mat[4] = 2 * (q[0] * q[1] + q[2] * q[3]);\n    mat[5] = 1 - 2 * (q[0] ** 2 + q[2] ** 2);\n    mat[6] = 2 * (q[1] * q[2] - q[0] * q[3]);\n    mat[7] = 0;\n\n    mat[8] = 2 * (q[0] * q[2] - q[1] * q[3]);\n    mat[9] = 2 * (q[1] * q[2] + q[0] * q[3]);\n    mat[10] = 1 - 2 * (q[0] ** 2 + q[1] ** 2);\n    mat[11] = 0;\n\n    mat[12] = 0;\n    mat[13] = 0;\n    mat[14] = 0;\n    mat[15] = 1;\n  }\n\n  return mat;\n}\n\nfunction deviceToScreen(quaternion) {\n  return !quaternion ? null :\n    rotateQuaternionByAxisAngle(\n      quaternion,\n      [0, 0, 1],\n      - orientation.angle * Math.PI / 180\n    );\n}\n\n// @ts-ignore\nexport const RelativeOrientationSensor = window.RelativeOrientationSensor ||\nclass RelativeOrientationSensor extends DeviceOrientationMixin(Sensor, 'deviceorientation') {\n  constructor(options = {}) {\n    super(options);\n\n    switch (options.referenceFrame || 'device') {\n      case 'screen':\n        Object.defineProperty(this, 'quaternion', {\n          get: () => deviceToScreen(this[slot].quaternion),\n        });\n        break;\n      default: // incl. case 'device'\n        Object.defineProperty(this, 'quaternion', {\n          get: () => this[slot].quaternion,\n        });\n    }\n  }\n\n  [handleEventCallback](event) {\n    // If there is no sensor we will get values equal to null.\n    if (event.absolute || event.alpha === null) {\n      // Spec: The implementation can still decide to provide\n      // absolute orientation if relative is not available or\n      // the resulting data is more accurate. In either case,\n      // the absolute property must be set accordingly to reflect\n      // the choice.\n      this[notifyError]('Could not connect to a sensor', 'NotReadableError');\n      return;\n    }\n\n    if (!this[slot].activated) {\n      this[notifyActivatedState]();\n    }\n\n    this[slot].timestamp = performance.now();\n\n    this[slot].quaternion = toQuaternionFromEuler(\n      event.alpha,\n      event.beta,\n      event.gamma\n    );\n\n    this[slot].hasReading = true;\n    this.dispatchEvent(new Event('reading'));\n  }\n\n  [deactivateCallback]() {\n    super[deactivateCallback]();\n    this[slot].quaternion = null;\n  }\n\n  populateMatrix(mat) {\n    toMat4FromQuat(mat, this.quaternion);\n  }\n};\n\n// @ts-ignore\nexport const AbsoluteOrientationSensor = window.AbsoluteOrientationSensor ||\nclass AbsoluteOrientationSensor extends DeviceOrientationMixin(\n  Sensor, 'deviceorientationabsolute', 'deviceorientation') {\n  constructor(options = {}) {\n    super(options);\n\n    switch (options.referenceFrame || 'device') {\n      case 'screen':\n        Object.defineProperty(this, 'quaternion', {\n          get: () => deviceToScreen(this[slot].quaternion),\n        });\n        break;\n      default: // incl. case 'device'\n        Object.defineProperty(this, 'quaternion', {\n          get: () => this[slot].quaternion,\n        });\n    }\n  }\n\n  [handleEventCallback](event) {\n    // If absolute is set, or webkitCompassHeading exists,\n    // absolute values should be available.\n    const isAbsolute = event.absolute === true || 'webkitCompassHeading' in event;\n    const hasValue = event.alpha !== null || event.webkitCompassHeading !== undefined;\n\n    if (!isAbsolute || !hasValue) {\n      // Spec: If an implementation can never provide absolute\n      // orientation information, the event should be fired with\n      // the alpha, beta and gamma attributes set to null.\n      this[notifyError]('Could not connect to a sensor', 'NotReadableError');\n      return;\n    }\n\n    if (!this[slot].activated) {\n      this[notifyActivatedState]();\n    }\n\n    this[slot].hasReading = true;\n    this[slot].timestamp = performance.now();\n\n    const heading = event.webkitCompassHeading != null ? 360 - event.webkitCompassHeading : event.alpha;\n\n    this[slot].quaternion = toQuaternionFromEuler(\n      heading,\n      event.beta,\n      event.gamma\n    );\n\n    this.dispatchEvent(new Event('reading'));\n  }\n\n  [deactivateCallback]() {\n    super[deactivateCallback]();\n    this[slot].quaternion = null;\n  }\n\n  populateMatrix(mat) {\n    toMat4FromQuat(mat, this.quaternion);\n  }\n};\n\n// @ts-ignore\nexport const Gyroscope = window.Gyroscope ||\nclass Gyroscope extends DeviceOrientationMixin(Sensor, 'devicemotion') {\n  constructor(options) {\n    super(options);\n    defineReadonlyProperties(this, slot, {\n      x: null,\n      y: null,\n      z: null,\n    });\n  }\n\n  [handleEventCallback](event) {\n    // If there is no sensor we will get values equal to null.\n    if (event.rotationRate.alpha === null) {\n      this[notifyError]('Could not connect to a sensor', 'NotReadableError');\n      return;\n    }\n\n    if (!this[slot].activated) {\n      this[notifyActivatedState]();\n    }\n\n    this[slot].timestamp = performance.now();\n\n    this[slot].x = rotationToRadian(event.rotationRate.alpha);\n    this[slot].y = rotationToRadian(event.rotationRate.beta);\n    this[slot].z = rotationToRadian(event.rotationRate.gamma);\n\n    this[slot].hasReading = true;\n    this.dispatchEvent(new Event('reading'));\n  }\n\n  [deactivateCallback]() {\n    super[deactivateCallback]();\n    this[slot].x = null;\n    this[slot].y = null;\n    this[slot].z = null;\n  }\n};\n\n// @ts-ignore\nexport const Accelerometer = window.Accelerometer ||\nclass Accelerometer extends DeviceOrientationMixin(Sensor, 'devicemotion') {\n  constructor(options) {\n    super(options);\n    defineReadonlyProperties(this, slot, {\n      x: null,\n      y: null,\n      z: null,\n    });\n  }\n\n  [handleEventCallback](event) {\n    // If there is no sensor we will get values equal to null.\n    if (event.accelerationIncludingGravity.x === null) {\n      this[notifyError]('Could not connect to a sensor', 'NotReadableError');\n      return;\n    }\n\n    if (!this[slot].activated) {\n      this[notifyActivatedState]();\n    }\n\n    this[slot].timestamp = performance.now();\n\n    this[slot].x = event.accelerationIncludingGravity.x;\n    this[slot].y = event.accelerationIncludingGravity.y;\n    this[slot].z = event.accelerationIncludingGravity.z;\n\n    this[slot].hasReading = true;\n    this.dispatchEvent(new Event('reading'));\n  }\n\n  [deactivateCallback]() {\n    super[deactivateCallback]();\n    this[slot].x = null;\n    this[slot].y = null;\n    this[slot].z = null;\n  }\n};\n\n// @ts-ignore\nexport const LinearAccelerationSensor = window.LinearAccelerationSensor ||\nclass LinearAccelerationSensor extends DeviceOrientationMixin(Sensor, 'devicemotion') {\n  constructor(options) {\n    super(options);\n    defineReadonlyProperties(this, slot, {\n      x: null,\n      y: null,\n      z: null,\n    });\n  }\n\n  [handleEventCallback](event) {\n    // If there is no sensor we will get values equal to null.\n    if (event.acceleration.x === null) {\n      this[notifyError]('Could not connect to a sensor', 'NotReadableError');\n      return;\n    }\n\n    if (!this[slot].activated) {\n      this[notifyActivatedState]();\n    }\n\n    this[slot].timestamp = performance.now();\n\n    this[slot].x = event.acceleration.x;\n    this[slot].y = event.acceleration.y;\n    this[slot].z = event.acceleration.z;\n\n    this[slot].hasReading = true;\n    this.dispatchEvent(new Event('reading'));\n  }\n\n  [deactivateCallback]() {\n    super[deactivateCallback]();\n    this[slot].x = null;\n    this[slot].y = null;\n    this[slot].z = null;\n  }\n};\n\n// @ts-ignore\nexport const GravitySensor = window.GravitySensor ||\n class GravitySensor extends DeviceOrientationMixin(Sensor, 'devicemotion') {\n  constructor(options) {\n    super(options);\n    defineReadonlyProperties(this, slot, {\n      x: null,\n      y: null,\n      z: null,\n    });\n  }\n\n  [handleEventCallback](event) {\n    // If there is no sensor we will get values equal to null.\n    if (event.acceleration.x === null || event.accelerationIncludingGravity.x === null) {\n      this[notifyError]('Could not connect to a sensor', 'NotReadableError');\n      return;\n    }\n\n    if (!this[slot].activated) {\n      this[notifyActivatedState]();\n    }\n\n    this[slot].timestamp = performance.now();\n\n    this[slot].x = event.accelerationIncludingGravity.x - event.acceleration.x;\n    this[slot].y = event.accelerationIncludingGravity.y - event.acceleration.y;\n    this[slot].z = event.accelerationIncludingGravity.z - event.acceleration.z;\n\n    this[slot].hasReading = true;\n    this.dispatchEvent(new Event('reading'));\n  }\n\n  [deactivateCallback]() {\n    super[deactivateCallback]();\n    this[slot].x = null;\n    this[slot].y = null;\n    this[slot].z = null;\n  }\n};\n","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\sensor.js",["637"],"// @ts-check\n\nfunction defineProperties(target, descriptions) {\n  /* eslint-disable-next-line guard-for-in */\n  for (const property in descriptions) {\n    Object.defineProperty(target, property, {\n      configurable: true,\n      value: descriptions[property],\n    });\n  }\n}\n\nconst privates = new WeakMap();\n\nexport const EventTargetMixin = (superclass, ...eventNames) => class extends superclass {\n  constructor(...args) {\n    // @ts-ignore\n    super(args);\n    const eventTarget = document.createDocumentFragment();\n    privates.set(this, eventTarget);\n  }\n\n  addEventListener(type, ...args) {\n    const eventTarget = privates.get(this);\n    return eventTarget.addEventListener(type, ...args);\n  }\n\n  removeEventListener(...args) {\n    const eventTarget = privates.get(this);\n    // @ts-ignore\n    return eventTarget.removeEventListener(...args);\n  }\n\n  dispatchEvent(event) {\n    defineProperties(event, {currentTarget: this});\n    if (!event.target) {\n      defineProperties(event, {target: this});\n    }\n\n    const eventTarget = privates.get(this);\n    const retValue = eventTarget.dispatchEvent(event);\n\n    if (retValue && this.parentNode) {\n      this.parentNode.dispatchEvent(event);\n    }\n\n    defineProperties(event, {currentTarget: null, target: null});\n\n    return retValue;\n  }\n};\n\nexport class EventTarget extends EventTargetMixin(Object) {}\n\nconst __abort__ = Symbol('__abort__');\n\nexport class AbortSignal extends EventTarget {\n  constructor() {\n    super();\n\n    this[__abort__] = {\n      aborted: false,\n    };\n\n    defineOnEventListener(this, 'abort');\n    Object.defineProperty(this, 'aborted', {\n      get: () => this[__abort__].aborted,\n    });\n  }\n\n  dispatchEvent(event) {\n    if (event.type === 'abort') {\n      this[__abort__].aborted = true;\n\n      const methodName = `on${event.type}`;\n      if (typeof this[methodName] == 'function') {\n          this[methodName](event);\n      }\n    }\n    super.dispatchEvent(event);\n  }\n\n  toString() {\n    return '[object AbortSignal]';\n  }\n}\n\nexport class AbortController {\n  constructor() {\n    const signal = new AbortSignal();\n    Object.defineProperty(this, 'signal', {\n      get: () => signal,\n    });\n  }\n\n  abort() {\n    let abort = new Event('abort');\n    this.signal.dispatchEvent(abort);\n  }\n\n  toString() {\n    return '[object AbortController]';\n  }\n}\n\nfunction defineOnEventListener(target, name) {\n  Object.defineProperty(target, `on${name}`, {\n    enumerable: true,\n    configurable: false,\n    writable: true,\n    value: null,\n  });\n}\n\nexport function defineReadonlyProperties(target, slot, descriptions) {\n  const propertyBag = target[slot];\n  /* eslint-disable-next-line guard-for-in */\n  for (const property in descriptions) {\n    propertyBag[property] = descriptions[property];\n    Object.defineProperty(target, property, {\n      get: () => propertyBag[property],\n    });\n  }\n}\n\nexport class SensorErrorEvent extends Event {\n  constructor(type, errorEventInitDict) {\n    super(type, errorEventInitDict);\n\n    if (!errorEventInitDict || !(errorEventInitDict.error instanceof DOMException)) {\n      throw TypeError(\n        'Failed to construct \\'SensorErrorEvent\\':' +\n        '2nd argument much contain \\'error\\' property'\n      );\n    }\n\n    Object.defineProperty(this, 'error', {\n      configurable: false,\n      writable: false,\n      value: errorEventInitDict.error,\n    });\n  }\n}\n\nconst SensorState = {\n  IDLE: 1,\n  ACTIVATING: 2,\n  ACTIVE: 3,\n};\n\nexport const __sensor__ = Symbol('__sensor__');\nconst slot = __sensor__;\n\nexport const notifyError = Symbol('Sensor.notifyError');\nexport const notifyActivatedState = Symbol('Sensor.notifyActivatedState');\n\nexport const activateCallback = Symbol('Sensor.activateCallback');\nexport const deactivateCallback = Symbol('Sensor.deactivateCallback');\n\nexport class Sensor extends EventTarget {\n  [activateCallback]() {}\n  [deactivateCallback]() {}\n\n  [notifyError](message, name) {\n    let error = new SensorErrorEvent('error', {\n      error: new DOMException(message, name),\n    });\n    this.dispatchEvent(error);\n    this.stop();\n  }\n\n  [notifyActivatedState]() {\n    let activate = new Event('activate');\n    this[slot].activated = true;\n    this.dispatchEvent(activate);\n    this[slot].state = SensorState.ACTIVE;\n  }\n\n  constructor(options) {\n    super();\n\n    this[__sensor__] = {\n      // Internal slots\n      state: SensorState.IDLE,\n      frequency: null,\n\n      // Property backing\n      activated: false,\n      hasReading: false,\n      timestamp: null,\n    };\n\n    defineOnEventListener(this, 'reading');\n    defineOnEventListener(this, 'activate');\n    defineOnEventListener(this, 'error');\n\n    Object.defineProperty(this, 'activated', {\n      get: () => this[slot].activated,\n    });\n    Object.defineProperty(this, 'hasReading', {\n      get: () => this[slot].hasReading,\n    });\n    Object.defineProperty(this, 'timestamp', {\n      get: () => this[slot].timestamp,\n    });\n\n    if (window && window.parent != window.top) {\n      throw new DOMException(\n        'Only instantiable in a top-level browsing context',\n        'SecurityError'\n      );\n    }\n\n    if (options && typeof(options.frequency) == 'number') {\n      if (options.frequency > 60) {\n        this.frequency = options.frequency;\n      }\n    }\n  }\n\n  dispatchEvent(event) {\n    switch (event.type) {\n      case 'reading':\n      case 'error':\n      case 'activate':\n      {\n        const methodName = `on${event.type}`;\n        if (typeof this[methodName] == 'function') {\n          this[methodName](event);\n        }\n        super.dispatchEvent(event);\n        break;\n      }\n      default:\n        super.dispatchEvent(event);\n    }\n  }\n\n  start() {\n    if (this[slot].state === SensorState.ACTIVATING ||\n        this[slot].state === SensorState.ACTIVE) {\n      return;\n    }\n    this[slot].state = SensorState.ACTIVATING;\n    this[activateCallback]();\n  }\n\n  stop() {\n    if (this[slot].state === SensorState.IDLE) {\n      return;\n    }\n    this[slot].activated = false;\n    this[slot].hasReading = false;\n    this[slot].timestamp = null;\n    this[deactivateCallback]();\n\n    this[slot].state = SensorState.IDLE;\n  }\n}\n",{"ruleId":"638","severity":1,"message":"639","line":1,"column":8,"nodeType":"640","messageId":"641","endLine":1,"endColumn":13},{"ruleId":"638","severity":1,"message":"642","line":2,"column":8,"nodeType":"640","messageId":"641","endLine":2,"endColumn":16},{"ruleId":"643","replacedBy":"644"},{"ruleId":"645","replacedBy":"646"},{"ruleId":"638","severity":1,"message":"647","line":4,"column":10,"nodeType":"640","messageId":"641","endLine":4,"endColumn":16},{"ruleId":"638","severity":1,"message":"648","line":6,"column":10,"nodeType":"640","messageId":"641","endLine":6,"endColumn":25},{"ruleId":"638","severity":1,"message":"649","line":7,"column":10,"nodeType":"640","messageId":"641","endLine":7,"endColumn":27},{"ruleId":"638","severity":1,"message":"650","line":9,"column":37,"nodeType":"640","messageId":"641","endLine":9,"endColumn":45},{"ruleId":"638","severity":1,"message":"651","line":9,"column":47,"nodeType":"640","messageId":"641","endLine":9,"endColumn":57},{"ruleId":"638","severity":1,"message":"652","line":9,"column":59,"nodeType":"640","messageId":"641","endLine":9,"endColumn":69},{"ruleId":"638","severity":1,"message":"653","line":9,"column":71,"nodeType":"640","messageId":"641","endLine":9,"endColumn":78},{"ruleId":"654","severity":1,"message":"655","line":47,"column":13,"nodeType":"656","messageId":"657","endLine":49,"endColumn":23},{"ruleId":"654","severity":1,"message":"655","line":59,"column":13,"nodeType":"656","messageId":"657","endLine":61,"endColumn":23},{"ruleId":"638","severity":1,"message":"658","line":5,"column":10,"nodeType":"640","messageId":"641","endLine":5,"endColumn":17},{"ruleId":"638","severity":1,"message":"659","line":49,"column":13,"nodeType":"640","messageId":"641","endLine":49,"endColumn":25},{"ruleId":"638","severity":1,"message":"660","line":51,"column":19,"nodeType":"640","messageId":"641","endLine":51,"endColumn":34},{"ruleId":"661","severity":1,"message":"662","line":16,"column":13,"nodeType":"663","messageId":"664","endLine":16,"endColumn":22,"fix":"665"},{"ruleId":"643","replacedBy":"666"},{"ruleId":"645","replacedBy":"667"},{"ruleId":"638","severity":1,"message":"668","line":5,"column":10,"nodeType":"640","messageId":"641","endLine":5,"endColumn":15},{"ruleId":"638","severity":1,"message":"669","line":1,"column":17,"nodeType":"640","messageId":"641","endLine":1,"endColumn":26},{"ruleId":"670","severity":1,"message":"671","line":64,"column":3,"nodeType":"672","endLine":64,"endColumn":13},{"ruleId":"670","severity":1,"message":"671","line":75,"column":3,"nodeType":"672","endLine":75,"endColumn":13},{"ruleId":"670","severity":1,"message":"671","line":86,"column":3,"nodeType":"672","endLine":86,"endColumn":13},{"ruleId":"670","severity":1,"message":"671","line":97,"column":3,"nodeType":"672","endLine":97,"endColumn":13},{"ruleId":"638","severity":1,"message":"673","line":103,"column":11,"nodeType":"640","messageId":"641","endLine":103,"endColumn":17},{"ruleId":"670","severity":1,"message":"671","line":109,"column":3,"nodeType":"672","endLine":109,"endColumn":13},{"ruleId":"638","severity":1,"message":"669","line":1,"column":17,"nodeType":"640","messageId":"641","endLine":1,"endColumn":26},{"ruleId":"638","severity":1,"message":"674","line":4,"column":8,"nodeType":"640","messageId":"641","endLine":4,"endColumn":16},{"ruleId":"638","severity":1,"message":"675","line":9,"column":10,"nodeType":"640","messageId":"641","endLine":9,"endColumn":24},{"ruleId":"638","severity":1,"message":"676","line":56,"column":15,"nodeType":"640","messageId":"641","endLine":56,"endColumn":23},{"ruleId":"638","severity":1,"message":"668","line":1,"column":10,"nodeType":"640","messageId":"641","endLine":1,"endColumn":15},{"ruleId":"677","severity":1,"message":"678","line":2,"column":26,"nodeType":"640","messageId":"679","endLine":2,"endColumn":32},{"ruleId":"638","severity":1,"message":"669","line":1,"column":17,"nodeType":"640","messageId":"641","endLine":1,"endColumn":26},{"ruleId":"677","severity":1,"message":"678","line":3,"column":26,"nodeType":"640","messageId":"679","endLine":3,"endColumn":32},{"ruleId":"638","severity":1,"message":"680","line":1,"column":21,"nodeType":"640","messageId":"641","endLine":1,"endColumn":29},{"ruleId":"638","severity":1,"message":"681","line":1,"column":31,"nodeType":"640","messageId":"641","endLine":1,"endColumn":40},{"ruleId":"638","severity":1,"message":"682","line":1,"column":42,"nodeType":"640","messageId":"641","endLine":1,"endColumn":48},{"ruleId":"683","severity":1,"message":"684","line":20,"column":40,"nodeType":"685","messageId":"657","endLine":20,"endColumn":42},{"ruleId":"677","severity":1,"message":"678","line":2,"column":26,"nodeType":"640","messageId":"679","endLine":2,"endColumn":32},{"ruleId":"643","replacedBy":"644"},{"ruleId":"645","replacedBy":"646"},{"ruleId":"638","severity":1,"message":"669","line":1,"column":17,"nodeType":"640","messageId":"641","endLine":1,"endColumn":26},{"ruleId":"638","severity":1,"message":"686","line":10,"column":10,"nodeType":"640","messageId":"641","endLine":10,"endColumn":16},{"ruleId":"677","severity":1,"message":"678","line":2,"column":26,"nodeType":"640","messageId":"679","endLine":2,"endColumn":32},{"ruleId":"638","severity":1,"message":"669","line":1,"column":17,"nodeType":"640","messageId":"641","endLine":1,"endColumn":26},{"ruleId":"670","severity":1,"message":"671","line":48,"column":13,"nodeType":"672","endLine":48,"endColumn":23},{"ruleId":"643","replacedBy":"687"},{"ruleId":"645","replacedBy":"688"},{"ruleId":"683","severity":1,"message":"684","line":45,"column":50,"nodeType":"685","messageId":"657","endLine":45,"endColumn":52},{"ruleId":"683","severity":1,"message":"684","line":64,"column":44,"nodeType":"685","messageId":"657","endLine":64,"endColumn":46},{"ruleId":"638","severity":1,"message":"669","line":1,"column":17,"nodeType":"640","messageId":"641","endLine":1,"endColumn":26},{"ruleId":"670","severity":1,"message":"671","line":66,"column":13,"nodeType":"672","endLine":66,"endColumn":23},{"ruleId":"670","severity":1,"message":"671","line":67,"column":13,"nodeType":"672","endLine":67,"endColumn":23},{"ruleId":"670","severity":1,"message":"671","line":89,"column":13,"nodeType":"672","endLine":89,"endColumn":23},{"ruleId":"670","severity":1,"message":"671","line":90,"column":13,"nodeType":"672","endLine":90,"endColumn":23},{"ruleId":"683","severity":1,"message":"689","line":95,"column":41,"nodeType":"685","messageId":"657","endLine":95,"endColumn":43},{"ruleId":"670","severity":1,"message":"671","line":108,"column":13,"nodeType":"672","endLine":108,"endColumn":23},{"ruleId":"670","severity":1,"message":"671","line":109,"column":13,"nodeType":"672","endLine":109,"endColumn":23},{"ruleId":"683","severity":1,"message":"689","line":114,"column":41,"nodeType":"685","messageId":"657","endLine":114,"endColumn":43},{"ruleId":"670","severity":1,"message":"671","line":127,"column":13,"nodeType":"672","endLine":127,"endColumn":23},{"ruleId":"670","severity":1,"message":"671","line":128,"column":13,"nodeType":"672","endLine":128,"endColumn":23},{"ruleId":"670","severity":1,"message":"671","line":138,"column":13,"nodeType":"672","endLine":138,"endColumn":23},{"ruleId":"670","severity":1,"message":"671","line":139,"column":13,"nodeType":"672","endLine":139,"endColumn":23},{"ruleId":"670","severity":1,"message":"671","line":146,"column":13,"nodeType":"672","endLine":146,"endColumn":23},{"ruleId":"670","severity":1,"message":"671","line":153,"column":13,"nodeType":"672","endLine":153,"endColumn":23},{"ruleId":"670","severity":1,"message":"671","line":154,"column":13,"nodeType":"672","endLine":154,"endColumn":23},{"ruleId":"643","replacedBy":"690"},{"ruleId":"645","replacedBy":"691"},{"ruleId":"638","severity":1,"message":"692","line":3,"column":10,"nodeType":"640","messageId":"641","endLine":3,"endColumn":16},{"ruleId":"638","severity":1,"message":"693","line":3,"column":18,"nodeType":"640","messageId":"641","endLine":3,"endColumn":35},{"ruleId":"638","severity":1,"message":"650","line":3,"column":37,"nodeType":"640","messageId":"641","endLine":3,"endColumn":45},{"ruleId":"638","severity":1,"message":"651","line":3,"column":47,"nodeType":"640","messageId":"641","endLine":3,"endColumn":57},{"ruleId":"638","severity":1,"message":"652","line":3,"column":59,"nodeType":"640","messageId":"641","endLine":3,"endColumn":69},{"ruleId":"638","severity":1,"message":"653","line":3,"column":71,"nodeType":"640","messageId":"641","endLine":3,"endColumn":78},{"ruleId":"694","severity":1,"message":"695","line":41,"column":53,"nodeType":"696","messageId":"697","endLine":41,"endColumn":55},{"ruleId":"683","severity":1,"message":"684","line":42,"column":38,"nodeType":"685","messageId":"657","endLine":42,"endColumn":40},{"ruleId":"683","severity":1,"message":"689","line":43,"column":53,"nodeType":"685","messageId":"657","endLine":43,"endColumn":55},{"ruleId":"694","severity":1,"message":"695","line":60,"column":53,"nodeType":"696","messageId":"697","endLine":60,"endColumn":55},{"ruleId":"683","severity":1,"message":"684","line":61,"column":38,"nodeType":"685","messageId":"657","endLine":61,"endColumn":40},{"ruleId":"683","severity":1,"message":"684","line":26,"column":22,"nodeType":"685","messageId":"657","endLine":26,"endColumn":24},{"ruleId":"694","severity":1,"message":"695","line":45,"column":25,"nodeType":"696","messageId":"697","endLine":45,"endColumn":27},{"ruleId":"683","severity":1,"message":"684","line":46,"column":25,"nodeType":"685","messageId":"657","endLine":46,"endColumn":27},{"ruleId":"698","severity":1,"message":"699","line":52,"column":33,"nodeType":"700","messageId":"701","endLine":52,"endColumn":34,"suggestions":"702"},{"ruleId":"698","severity":1,"message":"703","line":52,"column":38,"nodeType":"700","messageId":"701","endLine":52,"endColumn":39,"suggestions":"704"},{"ruleId":"698","severity":1,"message":"699","line":52,"column":54,"nodeType":"700","messageId":"701","endLine":52,"endColumn":55,"suggestions":"705"},{"ruleId":"683","severity":1,"message":"684","line":74,"column":20,"nodeType":"685","messageId":"657","endLine":74,"endColumn":22},{"ruleId":"694","severity":1,"message":"695","line":141,"column":25,"nodeType":"696","messageId":"697","endLine":141,"endColumn":27},{"ruleId":"638","severity":1,"message":"639","line":1,"column":8,"nodeType":"640","messageId":"641","endLine":1,"endColumn":13},{"ruleId":"638","severity":1,"message":"642","line":2,"column":8,"nodeType":"640","messageId":"641","endLine":2,"endColumn":16},{"ruleId":"643","replacedBy":"706"},{"ruleId":"645","replacedBy":"707"},{"ruleId":"638","severity":1,"message":"647","line":4,"column":10,"nodeType":"640","messageId":"641","endLine":4,"endColumn":16},{"ruleId":"638","severity":1,"message":"648","line":6,"column":10,"nodeType":"640","messageId":"641","endLine":6,"endColumn":25},{"ruleId":"638","severity":1,"message":"708","line":4,"column":29,"nodeType":"640","messageId":"641","endLine":4,"endColumn":45},{"ruleId":"638","severity":1,"message":"709","line":53,"column":11,"nodeType":"640","messageId":"641","endLine":53,"endColumn":21},{"ruleId":"683","severity":1,"message":"689","line":300,"column":62,"nodeType":"685","messageId":"657","endLine":300,"endColumn":64},{"ruleId":"638","severity":1,"message":"649","line":7,"column":10,"nodeType":"640","messageId":"641","endLine":7,"endColumn":27},{"ruleId":"638","severity":1,"message":"650","line":9,"column":37,"nodeType":"640","messageId":"641","endLine":9,"endColumn":45},{"ruleId":"638","severity":1,"message":"651","line":9,"column":47,"nodeType":"640","messageId":"641","endLine":9,"endColumn":57},{"ruleId":"638","severity":1,"message":"652","line":9,"column":59,"nodeType":"640","messageId":"641","endLine":9,"endColumn":69},{"ruleId":"638","severity":1,"message":"653","line":9,"column":71,"nodeType":"640","messageId":"641","endLine":9,"endColumn":78},{"ruleId":"654","severity":1,"message":"655","line":47,"column":13,"nodeType":"656","messageId":"657","endLine":49,"endColumn":23},{"ruleId":"654","severity":1,"message":"655","line":59,"column":13,"nodeType":"656","messageId":"657","endLine":61,"endColumn":23},{"ruleId":"638","severity":1,"message":"710","line":1,"column":10,"nodeType":"640","messageId":"641","endLine":1,"endColumn":18},{"ruleId":"638","severity":1,"message":"711","line":7,"column":10,"nodeType":"640","messageId":"641","endLine":7,"endColumn":15},{"ruleId":"638","severity":1,"message":"659","line":49,"column":13,"nodeType":"640","messageId":"641","endLine":49,"endColumn":25},{"ruleId":"638","severity":1,"message":"660","line":51,"column":19,"nodeType":"640","messageId":"641","endLine":51,"endColumn":34},{"ruleId":"638","severity":1,"message":"668","line":5,"column":10,"nodeType":"640","messageId":"641","endLine":5,"endColumn":15},{"ruleId":"638","severity":1,"message":"669","line":1,"column":17,"nodeType":"640","messageId":"641","endLine":1,"endColumn":26},{"ruleId":"638","severity":1,"message":"686","line":10,"column":10,"nodeType":"640","messageId":"641","endLine":10,"endColumn":16},{"ruleId":"638","severity":1,"message":"669","line":1,"column":17,"nodeType":"640","messageId":"641","endLine":1,"endColumn":26},{"ruleId":"638","severity":1,"message":"674","line":4,"column":8,"nodeType":"640","messageId":"641","endLine":4,"endColumn":16},{"ruleId":"638","severity":1,"message":"675","line":9,"column":10,"nodeType":"640","messageId":"641","endLine":9,"endColumn":24},{"ruleId":"670","severity":1,"message":"671","line":60,"column":9,"nodeType":"672","endLine":60,"endColumn":19},{"ruleId":"670","severity":1,"message":"671","line":66,"column":13,"nodeType":"672","endLine":66,"endColumn":23},{"ruleId":"670","severity":1,"message":"671","line":72,"column":13,"nodeType":"672","endLine":72,"endColumn":23},{"ruleId":"638","severity":1,"message":"669","line":1,"column":17,"nodeType":"640","messageId":"641","endLine":1,"endColumn":26},{"ruleId":"670","severity":1,"message":"671","line":54,"column":4,"nodeType":"672","endLine":54,"endColumn":14},{"ruleId":"670","severity":1,"message":"671","line":55,"column":4,"nodeType":"672","endLine":55,"endColumn":14},{"ruleId":"670","severity":1,"message":"671","line":62,"column":4,"nodeType":"672","endLine":62,"endColumn":14},{"ruleId":"638","severity":1,"message":"668","line":1,"column":10,"nodeType":"640","messageId":"641","endLine":1,"endColumn":15},{"ruleId":"638","severity":1,"message":"669","line":1,"column":17,"nodeType":"640","messageId":"641","endLine":1,"endColumn":26},{"ruleId":"677","severity":1,"message":"678","line":2,"column":26,"nodeType":"640","messageId":"679","endLine":2,"endColumn":32},{"ruleId":"677","severity":1,"message":"678","line":2,"column":26,"nodeType":"640","messageId":"679","endLine":2,"endColumn":32},{"ruleId":"683","severity":1,"message":"684","line":26,"column":22,"nodeType":"685","messageId":"657","endLine":26,"endColumn":24},{"ruleId":"694","severity":1,"message":"695","line":45,"column":25,"nodeType":"696","messageId":"697","endLine":45,"endColumn":27},{"ruleId":"683","severity":1,"message":"684","line":46,"column":25,"nodeType":"685","messageId":"657","endLine":46,"endColumn":27},{"ruleId":"698","severity":1,"message":"699","line":52,"column":33,"nodeType":"700","messageId":"701","endLine":52,"endColumn":34,"suggestions":"712"},{"ruleId":"698","severity":1,"message":"703","line":52,"column":38,"nodeType":"700","messageId":"701","endLine":52,"endColumn":39,"suggestions":"713"},{"ruleId":"698","severity":1,"message":"699","line":52,"column":54,"nodeType":"700","messageId":"701","endLine":52,"endColumn":55,"suggestions":"714"},{"ruleId":"683","severity":1,"message":"684","line":74,"column":20,"nodeType":"685","messageId":"657","endLine":74,"endColumn":22},{"ruleId":"694","severity":1,"message":"695","line":141,"column":25,"nodeType":"696","messageId":"697","endLine":141,"endColumn":27},{"ruleId":"643","replacedBy":"706"},{"ruleId":"645","replacedBy":"707"},{"ruleId":"715","severity":2,"message":"716","line":18,"column":5,"nodeType":"640","messageId":"717","endLine":18,"endColumn":11},{"ruleId":"715","severity":2,"message":"716","line":20,"column":17,"nodeType":"640","messageId":"717","endLine":20,"endColumn":23},{"ruleId":"715","severity":2,"message":"716","line":21,"column":12,"nodeType":"640","messageId":"717","endLine":21,"endColumn":18},{"ruleId":"715","severity":2,"message":"716","line":22,"column":17,"nodeType":"640","messageId":"717","endLine":22,"endColumn":23},{"ruleId":"683","severity":1,"message":"689","line":207,"column":33,"nodeType":"685","messageId":"657","endLine":207,"endColumn":35},"@typescript-eslint/no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","'ReactDOM' is defined but never used.","no-native-reassign",["718"],"no-negated-in-lhs",["719"],"'IState' is defined but never used.","'StartController' is defined but never used.","'VisualizationPage' is defined but never used.","'QRNumber' is defined but never used.","'QRAlphaNum' is defined but never used.","'QR8BitByte' is defined but never used.","'QRKanji' is defined but never used.","no-duplicate-case","Duplicate case label.","SwitchCase","unexpected","'Session' is defined but never used.","'text' is assigned a value but never used.","'element' is assigned a value but never used.","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"720","text":"721"},["718"],["719"],"'Admin' is defined but never used.","'Component' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'emails' is assigned a value but never used.","'eximage1' is defined but never used.","'MainController' is defined but never used.","'newState' is assigned a value but never used.","@typescript-eslint/no-use-before-define","'States' was used before it was defined.","noUseBeforeDefine","'useState' is defined but never used.","'useEffect' is defined but never used.","'useRef' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'States' is defined but never used.",["718"],["719"],"Expected '!==' and instead saw '!='.",["718"],["719"],"'QRCode' is defined but never used.","'ErrorCorrectLevel' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["722","723"],"Unnecessary escape character: \\@.",["724","725"],["726","727"],["718"],["719"],"'MagnetometerData' is defined but never used.","'sensorTest' is assigned a value but never used.","'Language' is defined but never used.","'State' is defined but never used.",["728","729"],["730","731"],["732","733"],"no-restricted-globals","Unexpected use of 'screen'.","defaultMessage","no-global-assign","no-unsafe-negation",[634,634],"()",{"messageId":"734","fix":"735","desc":"736"},{"messageId":"737","fix":"738","desc":"739"},{"messageId":"734","fix":"740","desc":"736"},{"messageId":"737","fix":"741","desc":"739"},{"messageId":"734","fix":"742","desc":"736"},{"messageId":"737","fix":"743","desc":"739"},{"messageId":"734","fix":"744","desc":"736"},{"messageId":"737","fix":"745","desc":"739"},{"messageId":"734","fix":"746","desc":"736"},{"messageId":"737","fix":"747","desc":"739"},{"messageId":"734","fix":"748","desc":"736"},{"messageId":"737","fix":"749","desc":"739"},"removeEscape",{"range":"750","text":"751"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"752","text":"753"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"754","text":"751"},{"range":"755","text":"753"},{"range":"756","text":"751"},{"range":"757","text":"753"},{"range":"758","text":"751"},{"range":"759","text":"753"},{"range":"760","text":"751"},{"range":"761","text":"753"},{"range":"762","text":"751"},{"range":"763","text":"753"},[1336,1337],"",[1336,1336],"\\",[1341,1342],[1341,1341],[1357,1358],[1357,1357],[1336,1337],[1336,1336],[1341,1342],[1341,1341],[1357,1358],[1357,1357]]