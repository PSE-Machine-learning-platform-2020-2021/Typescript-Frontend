[{"D:\\main1\\Typescript-Frontend\\ki-app\\src\\index.tsx":"1","D:\\main1\\Typescript-Frontend\\ki-app\\src\\reportWebVitals.ts":"2","D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\MainController.tsx":"3","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Facade.tsx":"4","D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\ReferringController.tsx":"5","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\State.tsx":"6","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\ExplorerConnector.tsx":"7","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Language.tsx":"8","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\User.tsx":"9","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\index.tsx":"10","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Device.tsx":"11","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Project.tsx":"12","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\State.tsx":"13","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\AIModel.tsx":"14","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Session.tsx":"15","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Sensor.tsx":"16","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\DataSet.tsx":"17","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ConstantsText\\index.tsx":"18","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\NewProjectButton\\index.tsx":"19","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoadModelButton\\index.tsx":"20","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoginWindow\\index.tsx":"21","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Label.tsx":"22","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\QRImage\\index.tsx":"23","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LinkText\\index.tsx":"24","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\DataRow.tsx":"25","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\TimeSpan.tsx":"26","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ProjectList\\index.tsx":"27","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\DataPoint.tsx":"28","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ModelList\\index.tsx":"29","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ChangeToVisuBtn\\index.tsx":"30","D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\DeliveryController.tsx":"31","D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\VisualizationController.tsx":"32","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\index.tsx":"33","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\index.tsx":"34","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\State.tsx":"35","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\State.tsx":"36","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\SendButton\\index.tsx":"37","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\DownloadButton\\index.tsx":"38","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\TrainButton\\index.tsx":"39","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\HandleAllEmail\\index.jsx":"40","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\AddEmailButton\\index.jsx":"41","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\EmailList\\index.jsx":"42","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\ImageList\\index.jsx":"43","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\EmailItem\\index.jsx":"44"},{"size":480,"mtime":1613136673047,"results":"45","hashOfConfig":"46"},{"size":440,"mtime":1613136674313,"results":"47","hashOfConfig":"46"},{"size":3063,"mtime":1613139545008,"results":"48","hashOfConfig":"46"},{"size":13291,"mtime":1613436561566,"results":"49","hashOfConfig":"46"},{"size":5282,"mtime":1613437620813,"results":"50","hashOfConfig":"46"},{"size":3223,"mtime":1613436561810,"results":"51","hashOfConfig":"46"},{"size":5260,"mtime":1613317369224,"results":"52","hashOfConfig":"46"},{"size":1673,"mtime":1613315191438,"results":"53","hashOfConfig":"46"},{"size":14034,"mtime":1613315191683,"results":"54","hashOfConfig":"46"},{"size":5839,"mtime":1613437588067,"results":"55","hashOfConfig":"46"},{"size":1767,"mtime":1613315191241,"results":"56","hashOfConfig":"46"},{"size":7572,"mtime":1613315191505,"results":"57","hashOfConfig":"46"},{"size":1164,"mtime":1613344289278,"results":"58","hashOfConfig":"46"},{"size":485,"mtime":1613141165378,"results":"59","hashOfConfig":"46"},{"size":1581,"mtime":1613317369311,"results":"60","hashOfConfig":"46"},{"size":5849,"mtime":1613315191572,"results":"61","hashOfConfig":"46"},{"size":6394,"mtime":1613315191139,"results":"62","hashOfConfig":"46"},{"size":229,"mtime":1613136676421,"results":"63","hashOfConfig":"46"},{"size":975,"mtime":1613434828475,"results":"64","hashOfConfig":"46"},{"size":484,"mtime":1613338796154,"results":"65","hashOfConfig":"46"},{"size":3005,"mtime":1613437588001,"results":"66","hashOfConfig":"46"},{"size":1787,"mtime":1613141165915,"results":"67","hashOfConfig":"46"},{"size":514,"mtime":1613341342032,"results":"68","hashOfConfig":"46"},{"size":646,"mtime":1613341342037,"results":"69","hashOfConfig":"46"},{"size":3361,"mtime":1613315191061,"results":"70","hashOfConfig":"46"},{"size":1370,"mtime":1613141166127,"results":"71","hashOfConfig":"46"},{"size":3090,"mtime":1613436047035,"results":"72","hashOfConfig":"46"},{"size":927,"mtime":1613141165498,"results":"73","hashOfConfig":"46"},{"size":1872,"mtime":1613434949710,"results":"74","hashOfConfig":"46"},{"size":397,"mtime":1613435433589,"results":"75","hashOfConfig":"46"},{"size":1640,"mtime":1613436367354,"results":"76","hashOfConfig":"46"},{"size":2813,"mtime":1613436562000,"results":"77","hashOfConfig":"46"},{"size":3301,"mtime":1613259346061,"results":"78","hashOfConfig":"46"},{"size":1803,"mtime":1613136678901,"results":"79","hashOfConfig":"46"},{"size":384,"mtime":1613231544891,"results":"80","hashOfConfig":"46"},{"size":337,"mtime":1613136678754,"results":"81","hashOfConfig":"46"},{"size":372,"mtime":1613136675176,"results":"82","hashOfConfig":"46"},{"size":380,"mtime":1613136674887,"results":"83","hashOfConfig":"46"},{"size":327,"mtime":1613136676335,"results":"84","hashOfConfig":"46"},{"size":914,"mtime":1613136675110,"results":"85","hashOfConfig":"46"},{"size":1247,"mtime":1613234510355,"results":"86","hashOfConfig":"46"},{"size":635,"mtime":1613259346472,"results":"87","hashOfConfig":"46"},{"size":1461,"mtime":1613136677482,"results":"88","hashOfConfig":"46"},{"size":1168,"mtime":1613252016992,"results":"89","hashOfConfig":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"93"},"yiqgwz",{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"93"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"93"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"93"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"93"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"93"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"93"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"93"},{"filePath":"161","messages":"162","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"163","messages":"164","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"93"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"93"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"93"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"93"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\main1\\Typescript-Frontend\\ki-app\\src\\index.tsx",["192","193"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { MainController } from './controller/MainController';\r\n\r\nMainController.getInstance().startApp();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n",["194","195"],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\reportWebVitals.ts",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\MainController.tsx",["196"],"import { PageController } from \"./PageController\";\r\n//import { StartController } from \"./StartController\";\r\nimport { RefferingController } from \"./ReferringController\";\r\nimport { MainControllerInterface } from \"./MainControllerInterface\";\r\nimport { IState, States } from \"../view/pages/State\";\r\nimport { Facade } from \"../model/Facade\";\r\n\r\nexport class MainController implements MainControllerInterface {\r\n  private facade: Facade;\r\n\r\n  private static mainController: MainController;\r\n\r\n  private currentPageController: PageController | undefined;\r\n\r\n  /**\r\n   * Konstruktor des MainControllers. Holt sich die Fassade.\r\n   */\r\n  constructor() {\r\n    this.facade = new Facade(\"de\");\r\n  }\r\n\r\n  /**\r\n   * Gibt sich selber zurück und sorgt dafür das nur ein MainController besteht.\r\n   * @returns MainController\r\n   */\r\n  static getInstance() {\r\n    if (this.mainController === undefined) {\r\n      this.mainController = new MainController();\r\n      return this.mainController;\r\n    }\r\n    return this.mainController;\r\n  }\r\n\r\n  /**\r\n   * Prüft ob das Gerät auf das Internet zugreifen kann.\r\n   * @returns Gibt true zurück falls eine Internetverbindung besteht, sonst wird false zurück gegeben.\r\n   */\r\n  checkConnection() {\r\n    return window.navigator.onLine;\r\n  }\r\n\r\n  /**\r\n   * Prüft ob der Benutzer angemeldet ist.\r\n   * @returns Gibt true zurück falls der Benutzer angemeldet ist, sonst wird false zurück gegeben.\r\n   */\r\n  checkLoginStatus() {\r\n    return false;//this.facade.checkLogin();\r\n  }\r\n\r\n  // static getSession() {\r\n  //    return false\r\n  //}\r\n\r\n  /**\r\n   * Setzt den momentanen Seitenverwalter neu\r\n   * @param destinationPageController Der neue Seitenverwalter\r\n   */\r\n  changeTo(destinationPageController: PageController) {\r\n    this.currentPageController = destinationPageController;\r\n  }\r\n\r\n  /**\r\n   * Andwendungstart für einen Desktop\r\n   */\r\n  startApp() {\r\n    let refferingController: RefferingController = new RefferingController();\r\n    this.changeTo(refferingController);\r\n  }\r\n\r\n\r\n  /**\r\n   * @returns Gibt die Fassade zurück\r\n   */\r\n  getFacade() {\r\n    return this.facade;\r\n  }\r\n\r\n  /**\r\n   * @param ids Alle ids, zu denen man die Texte möchte.\r\n   * @returns Gibt alle texte zu den übergebenen ids zurück.\r\n   */\r\n  getMessage(messages: { text: string, id: number; }[]) {\r\n    let messageIDs: number[] = [];\r\n    for (let index = 0; index < messages.length; index++) {\r\n      messageIDs.push(messages[index].id);\r\n    }\r\n    let texts: string[] = [];\r\n    for (let index = 0; index < messages.length; index++) {\r\n      messages[index].text = texts[index];\r\n      return messages;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param languageCode Das Sprachkürzel als string.\r\n   * @returns Gibt true zurück falls der wechsel erfolgt ist, sonst false.\r\n   */\r\n  setLanguage(languageCode: string) {\r\n    let nextState: States;\r\n    let success = this.getFacade().setLanguage(languageCode);\r\n    if (success) {\r\n      nextState = States.NeedMessage;\r\n    } else {\r\n      nextState = States.LoadError;\r\n    }\r\n    return nextState;\r\n  }\r\n}\r\n","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Facade.tsx",["197"],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\ReferringController.tsx",["198","199","200","201","202","203"],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\State.tsx",["204","205","206","207","208","209"],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\ExplorerConnector.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Language.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\User.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\index.tsx",["210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228"],"import React, { Component } from 'react';\r\nimport PubSub from 'pubsub-js';\r\nimport ConstantsText from '../../components/ReferringComponents/ConstantsText';\r\nimport NewProjectButton from '../../components/ReferringComponents/NewProjectButton';\r\nimport LoadModelButton from '../../components/ReferringComponents/LoadModelButton';\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from 'react-dom';\r\nimport { States } from '../State';\r\nimport LoginWindow from '../../components/ReferringComponents/LoginWindow';\r\n\r\ntype Props = {\r\n\r\n};\r\n\r\nexport class ReferringPage extends React.Component<Props, State> implements Page {\r\n\r\n    state = new State();\r\n    observers: PageController[] = [];\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.createNewProject()\r\n        this.register()\r\n        this.login()\r\n        this.getmodellist()\r\n        this.loadproject()\r\n        this.changetovisu()\r\n        this.loadmodel()\r\n        const VDOM = (\r\n            <div>\r\n                <ConstantsText />\r\n                <NewProjectButton />\r\n                <LoginWindow />\r\n                <LoadModelButton />\r\n            </div>\r\n        );\r\n        ReactDOM.render(VDOM, document.getElementById('root'));\r\n    }\r\n\r\n    attach(observer: PageController) {\r\n        this.observers.push(observer);\r\n    }\r\n\r\n    detach(observer: PageController) {\r\n        const index = this.observers.indexOf(observer, 0);\r\n        if (index > -1) {\r\n            this.observers.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    notify() {\r\n        for (let index = 0; index < this.observers.length; index++) {\r\n            const element = this.observers[index];\r\n            element.update();\r\n        }\r\n    }\r\n\r\n    getState() {\r\n        return this.state;\r\n    }\r\n\r\n    createNewProject() {\r\n        PubSub.subscribe('createnewproject', (_msg: any, data: string) => {\r\n            // console.log(this.state.currentState)\r\n            this.state.currentState = States.NewProjekt;\r\n            this.state.currentProject = { projectID: -10000, projectName: data, choosenAIModelID: -10000 }\r\n            //console.log(this.state.currentState)\r\n            //console.log(this.state.currentProject)\r\n            //console.log(this.state.currentState)\r\n            // console.log(this.state.qr)\r\n            //hier notifty for createnewProject\r\n            this.notify()\r\n            //console.log(this.state.currentState)\r\n            //console.log(this.state.qr)\r\n            //notify for needqr\r\n            this.notify()\r\n            //console.log(this.state.currentState)\r\n            //console.log(this.state.qr)\r\n            //console.log(this.state.currentState)\r\n            //console.log(this.state.qr)\r\n            PubSub.publish('getqr', this.state.qr)\r\n        })\r\n    }\r\n\r\n    register() {\r\n        PubSub.subscribe('register', (_msg: any, data: { name: string, email: string, password: string; }) => {\r\n            // console.log(this.state.currentState)\r\n            this.state.adminData = data\r\n            this.state.currentState = States.Register\r\n            //console.log(this.state.currentState)\r\n            this.notify()\r\n            //console.log(this.state.currentState)\r\n            let flag: boolean\r\n            if (this.state.currentState != States.Register) {\r\n                flag = false\r\n            } else {\r\n                flag = true\r\n            }\r\n            PubSub.publish('registerstatus', flag)\r\n\r\n        })\r\n    }\r\n\r\n    login() {\r\n        PubSub.subscribe('login', (_msg: any, data: { name: string, email: string, password: string; }) => {\r\n            // console.log(this.state.currentState)\r\n            this.state.adminData = data\r\n            this.state.currentState = States.Login\r\n            //console.log(this.state.currentState)\r\n            this.notify()\r\n            //console.log(this.state.currentState)\r\n            let flag: boolean\r\n            if (this.state.currentState != States.Login) {\r\n                flag = false\r\n            } else {\r\n                flag = true\r\n                PubSub.publish('getprojectlist', this.state.projectData)\r\n            }\r\n            PubSub.publish('loginstatus', flag)\r\n\r\n        })\r\n    }\r\n    getmodellist() {\r\n        PubSub.subscribe('needmodellist', (_msg: any, data: { projectID: number, projectName: string, AIModelID: number[]; }) => {\r\n            // console.log(this.state.currentState)\r\n            this.state.currentState = States.LoadProject\r\n            this.state.currentProject = { projectID: data.projectID, projectName: data.projectName, choosenAIModelID: -10000 }\r\n            //console.log(this.state.currentState)\r\n            this.notify()\r\n            //console.log(this.state.currentState)\r\n            PubSub.publish('getmodellist', this.state.projectData)\r\n\r\n        })\r\n    }\r\n    loadproject() {\r\n        PubSub.subscribe('loadproject', (_msg: any, data: { projectID: number, projectName: string, choosenAIModelID: number; }) => {\r\n            this.state.currentProject = { projectID: data.projectID, projectName: data.projectName, choosenAIModelID: -10000 }\r\n            this.state.currentState = States.NeedQRC\r\n            this.notify()\r\n            PubSub.publish('getqr', this.state.qr)\r\n        })\r\n    }\r\n    changetovisu() {\r\n        PubSub.subscribe('changetovisu', (_msg: any) => {\r\n            this.state.currentState = States.ChangeToVisualization\r\n            this.notify()\r\n        })\r\n    }\r\n\r\n    loadmodel() {\r\n        PubSub.subscribe('loadmodel', (_msg: any, data: { projectID: number, projectName: string, choosenAIModelID: number; }) => {\r\n            this.state.currentProject = data\r\n            this.state.currentState = States.LoadModel\r\n            this.notify()\r\n        })\r\n    }\r\n}\r\n","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Device.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Project.tsx",["229"],"import { AIModel } from \"./AIModel\";\r\nimport { DataSet } from \"./DataSet\";\r\nimport { SensorData } from \"./Sensor\";\r\nimport { Session } from \"./Session\";\r\nimport { Admin } from \"./User\";\r\n\r\n/**\r\n * Diese Klasse speichert alle Informationen zu einem Projekt.\r\n * Ein Projekt beinhaltet aufgezeichnete Datensätze (DataSet) sowie Informationen zu den Datensätzen.\r\n */\r\nexport class Project {\r\n  private id: number; //Die eindeutige Projekt ID\r\n  private name: string; //Der Name des Projektes\r\n  private session: Session; //Die Session in dem das Projekt arbeitet\r\n  private aiModel: AIModel[] = []; //Das AIModel von dem Projekt\r\n  private dataSet: DataSet[] = []; //Die Datensätze, die zu dem Projekt gehören\r\n  private currentDataSet?: DataSet; //Aktueller Datensatz\r\n\r\n  /**\r\n     * Eine bereits existierendes Projekt kann wie folgt in das Model geladen werden.\r\n     * @param projectID Die Projekt ID\r\n     * @param sessionID Die Session ID\r\n     * @param projectName Der Projektnamen\r\n     * @param admin Der Besitzer dieses Projekts für die Session\r\n     * @param aiModelID Die schon existierenden AIModel IDs\r\n     * @param dataSet Die schon existierenden Datensätze\r\n     */\r\n  constructor(projectID: number, sessionID: number, projectName: string, projectData?: {\r\n    aiModelID?: number[],\r\n    dataSet?: {\r\n      dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate: number,\r\n      dataRows: {\r\n        dataRowID: number, recordingStart: number,\r\n        dataRow: { value: number, relativeTime: number; }[];\r\n      }[],\r\n      label: { name: string, labelID: number, start: number, end: number; }[];\r\n    }[];\r\n  }) {\r\n    this.id = projectID;\r\n    this.name = projectName;\r\n    this.session = new Session(sessionID);\r\n    if (projectData != null) {\r\n      if (projectData.aiModelID != null) {\r\n        for (let i = 0; i < projectData.aiModelID.length; i++) {\r\n          this.aiModel.push(new AIModel(projectData.aiModelID[i]));\r\n        }\r\n      }\r\n      if (projectData.dataSet != null) {\r\n        for (let i = 0; i < projectData.dataSet.length; i++) {\r\n          this.dataSet.push(new DataSet(projectData.dataSet[i].dataRowSensors, projectData.dataSet[i].dataSetID, projectData.dataSet[i].dataSetName, projectData.dataSet[i].generateDate, projectData.dataSet[i].dataRows, projectData.dataSet[i].label));\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Gibt den Projektnamen zurück\r\n   */\r\n  getName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  /**\r\n   * Löscht den Datensatz mit der DatensatzID\r\n   * @param dataSetID die Datensatz ID\r\n   */\r\n  deleteDataSet(dataSetID: number): boolean {\r\n    for (let i = 0; i < this.dataSet.length; i++) {\r\n      if (this.dataSet[i].getID() === dataSetID) {\r\n        delete this.dataSet[i];\r\n        if (this.currentDataSet != null && this.currentDataSet.getID() === dataSetID) {\r\n          delete this.currentDataSet;\r\n        }\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Gibt die Projekt ID zurück.\r\n   */\r\n  getID(): number {\r\n    return this.id;\r\n  }\r\n\r\n\r\n  /**\r\n   * Erstellt einen neuen Datensatz und setzt diesen als aktuellen Datensatz.\r\n   * @param dataRowSensors die Sensoren, von denen die Daten ausgelesen werden\r\n   * @param dataSetID die eindeutige Datensatz ID\r\n   * @param dataSetName der Datensatznamen\r\n   * @param generateDate die Erstellungszeit von dem Datensatz\r\n   */\r\n  createDataSet(dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate?: number): void {\r\n    var dataSet: DataSet = new DataSet(dataRowSensors, dataSetID, dataSetName, generateDate);\r\n    this.dataSet.push(dataSet);\r\n    this.currentDataSet = dataSet;\r\n  }\r\n\r\n  /**\r\n   * Gibt die aktuelle Datensatz ID zurück, falls diese nicht existiert wird -1 zurück gegeben\r\n   */\r\n  getCurrentDataSetID(): number {\r\n    if (this.currentDataSet != null) {\r\n      return this.currentDataSet.getID();\r\n    }\r\n    return -1;\r\n\r\n  }\r\n\r\n  /**\r\n   * Liest von dem aktuellen Datensatz neue Sensordaten von der Datenreihe mit der Datenreihen ID\r\n   * @param dataRowID die Datenreihen ID, von der die Daten ausgelesen werden sollen.\r\n   * @returns die gelesenen Daten von der Datenreihe. Falls die Datenreihe nicht existiert oder kein aktueller Datensatz existiert, sind die Daten leer.\r\n   */\r\n  readDataPoint(dataRowID: number): { dataPoint?: { value: number, relativeTime: number; }; } {\r\n    if (this.currentDataSet != null) {\r\n      return this.currentDataSet.readDataPoint(dataRowID);\r\n    }\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Gibt von allen Datensätzen Informationen zurück\r\n   * @returns dataSetID ist die DatensatzID und dataSetName ist der Datensatzname\r\n   */\r\n  getDataSetMetas(): { dataSetID: number, dataSetName: string; }[] {\r\n    var dataSetMetas: { dataSetID: number, dataSetName: string; }[] = [];\r\n    for (let i = 0; i < this.dataSet.length; i++) {\r\n      dataSetMetas.push({ dataSetID: this.dataSet[i].getID(), dataSetName: this.dataSet[i].getName() });\r\n    }\r\n    return dataSetMetas;\r\n  }\r\n\r\n  /**\r\n   * Gibt die Datenreihen der Datensatz ID zurück und setzt diesen Datensatz als aktuellen Datensatz\r\n   * @param dataSetID die Datensatz ID von der die Datenreihen gelesen werden sollen\r\n   * @returns die Sensordaten von der Datenreihe\r\n   */\r\n  getDataRows(dataSetID: number): { dataRows?: { value: number, relativeTime: number; }[][]; } {\r\n    for (let i = 0; i < this.dataSet.length; i++) {\r\n      if (this.dataSet[i].getID() === dataSetID) {\r\n        this.currentDataSet = this.dataSet[i];\r\n        return { dataRows: this.dataSet[i].getDataRows() };\r\n      }\r\n    }\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Gibt die Datenreihen der aktuellen Datenreihe zurück\r\n   * @returns die Sensordaten von der Datenreihe\r\n   */\r\n  getCurrentDataRows(): { dataRows?: { value: number, relativeTime: number; }[][]; } {\r\n    if (this.currentDataSet != null) {\r\n      return { dataRows: this.currentDataSet.getDataRows() };\r\n    }\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Gibt die Session ID zurück\r\n   */\r\n  getSessionID(): number {\r\n    return this.session.getId();\r\n  }\r\n\r\n  /**\r\n   * Setzt dem Label mit der übergebenen ID neue Werte.\r\n   * @param start Ist die neue Startzeit des Labels.\r\n   * @param end Ist die neue Endzeit des Labels.\r\n   * @param labelID Die Label ID, welche überarbeitet werden soll.\r\n   * @param labelName Ist bei Angabe der neue Name des Labels.\r\n   * @returns falls das Label nicht existiert oder es kein aktuellen Datensatz gibt wird false zurück gegeben\r\n   */\r\n  createLabel(start: number, end: number, labelID: number, labelName?: string): boolean {\r\n    if (this.currentDataSet != null) {\r\n      return this.currentDataSet.setLabel(labelID, { start, end }, labelName);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  setLabel(labelID: number, span: { start: number, end: number; }, labelName?: string): boolean {\r\n    if (this.currentDataSet != null) {\r\n      return this.currentDataSet.setLabel(labelID, span, labelName);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  deleteLabel(labelID: number): boolean {\r\n    if (this.currentDataSet != null) {\r\n      return this.currentDataSet.deleteLabel(labelID);\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gibt alle Daten von allen Labeln vom aktuellen Datensatz zurück.\r\n   * @returns leer, falls kein aktueller Datensatz existiert\r\n   */\r\n  getLabels(): { labels?: { name: string, id: number, start: number, end: number; }[]; } {\r\n    if (this.currentDataSet != null) {\r\n      return { labels: this.currentDataSet.getLabels() };\r\n    }\r\n    return {};\r\n  }\r\n}","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\State.tsx",["230","231","232","233","234","235"],"import { IState } from \"../State\";\r\nimport { States } from \"../State\";\r\nimport { QRCode, ErrorCorrectLevel, QRNumber, QRAlphaNum, QR8BitByte, QRKanji } from 'qrcode-generator-ts/js';\r\n\r\nexport class State implements IState {\r\n  currentState: States = States.NeedMessage;\r\n  languageCode: string = \"de\";\r\n  messages: { text: string, id: number; }[] = [];\r\n  projectData?: { projectID: number; projectName: string; AIModelID: number[]; }[];\r\n  currentProject?: { projectID: number, projectName: string, choosenAIModelID: number; };\r\n  chosenModel?: string;\r\n  adminData?: { name: string, email: string, password: string; };\r\n  //minerData?:\r\n  aiUserData?: { name: string, result: string; };\r\n  labels?: { labelID: number, start: number, end: number; }[];\r\n  sessionID?: string;\r\n  //aiParameter?: \r\n  dataPoints?: { dataPoint?: { value: number; relativeTime: number; }; }[];\r\n  dataRows?: { dataSetID: number, data: number[][][]; };\r\n  dataSets?: { sensorTypes: string[], dataSetName: string; }[];\r\n  qr?: string;\r\n  recordingSettings?: { newDataSetName: string, usedSensorTypes: number[], availableSensorTypes: number[], readTime: number, waitTime: number; };\r\n}\r\n","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\AIModel.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Session.tsx",["236"],"import { Admin, User } from \"./User\";\r\n\r\n/**\r\n * Diese Klasse Speichert die Session informationen\r\n */\r\nexport class Session {\r\n  private id: number; //Die eindeutige ID der Session\r\n  private connectedUser: User[] = []; //Die User die mit der Projekt der Session interagieren\r\n\r\n  /**\r\n   * Erstellt eine Session\r\n   * @param id Diese ID muss global eindeutig sein\r\n   * @param admin Der Admin, dem diese Session gehört\r\n   */\r\n  constructor(id: number) {\r\n    this.id = id;\r\n  }\r\n\r\n  /**\r\n   * Fügt eine User als Verbundener User zu der Session hinzu\r\n   * @param user Der User, der hinzugefügt wird\r\n   */\r\n  connectUser(user: User): void {\r\n    this.connectedUser.push(user);\r\n  }\r\n\r\n  /**\r\n   * Meldet einen User von der aktuellen Session ab\r\n   * @param user Der User, der abgemeldet werdern soll\r\n   */\r\n  disconnectUser(user: User): boolean {\r\n    for (let i = 0; i < this.connectedUser.length; i++) {\r\n      if (this.connectedUser[i].getID() === user.getID()) {\r\n        delete this.connectedUser[i];\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Gibt von allen verbundenen Usern die ID und den Namen zurück\r\n   */\r\n  getConnectedUsers(): { userID: number, userName: string; }[] {\r\n    var users: { userID: number, userName: string; }[] = [];\r\n    for (let i = 0; i < this.connectedUser.length; i++) {\r\n      users.push({ userID: this.connectedUser[i].getID(), userName: this.connectedUser[i].getName() });\r\n    }\r\n    return users;\r\n  }\r\n\r\n  /**\r\n   * Gibt die Session ID zurück\r\n   */\r\n  getId(): number {\r\n    return this.id;\r\n  }\r\n}","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Sensor.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\DataSet.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ConstantsText\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\NewProjectButton\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoadModelButton\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoginWindow\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Label.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\QRImage\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LinkText\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\DataRow.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\TimeSpan.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ProjectList\\index.tsx",["237","238","239","240","241"],"import React, { Component } from 'react'\r\nimport ChangeToVisuBtn from '../ChangeToVisuBtn';\r\nimport ModelList from '../ModelList';\r\nimport QRImage from '../QRImage';\r\n\r\nexport default class ProjectList extends Component {\r\n    state = {\r\n        value: null,\r\n        click: false,\r\n        loadclick: false,\r\n        //hier Beispiel, in componentDidMount will projectData verändern\r\n        projectData: [{\r\n            projectID: 1,\r\n            projectName: 'Projekt1',\r\n            AIModelID: [1, 2]\r\n        }, {\r\n            projectID: 2,\r\n            projectName: 'Projekt2',\r\n            AIModelID: []\r\n        }]\r\n    }\r\n\r\n    componentDidMount() {\r\n        /** controller noch nicht gegeben*/\r\n        PubSub.subscribe('getprojectlist', (_msg: any, data: { projectID: number, projectName: string, AIModelID: number[]; }[]) => {\r\n            this.setState({ projectData: data })\r\n        })\r\n\r\n    }\r\n\r\n    handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n        this.setState({\r\n            value: e.target.value\r\n        })\r\n    }\r\n    handleChoose() {\r\n        /* wait to change load model*/\r\n        if (this.state.value == null) {\r\n            alert('Sie haben noch kein Projekt gewählt!')\r\n        } else {\r\n            this.state.projectData.map((projectObj) => {\r\n                if (this.state.value == projectObj.projectID) {\r\n                    if (projectObj.AIModelID.length != 0) {\r\n                        PubSub.publish('needmodellist', projectObj)\r\n                        this.setState({ click: true })\r\n                    } else {\r\n                        this.setState({ click: false })\r\n                        alert('Es gibt keine Model in diesem Projekt!')\r\n                    }\r\n                }\r\n            })\r\n        }\r\n\r\n    }\r\n    handleLoad() {\r\n\r\n        if (this.state.value == null) {\r\n            alert('Sie haben noch kein Projekt gewählt!')\r\n        } else {\r\n            this.state.projectData.map((projectObj) => {\r\n                if (this.state.value == projectObj.projectID) {\r\n                    PubSub.publish('loadproject', projectObj)\r\n                    this.setState({ loadclick: true })\r\n                }\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <section>\r\n                <label>ProjektList</label>\r\n                <select onChange={this.handleChange}>\r\n                    <option>Projekt Wählen</option>\r\n                    {this.state.projectData.map((projectObj) => {\r\n                        return <option value={projectObj.projectID}>{projectObj.projectName}</option>\r\n                    })}\r\n                </select>\r\n                <button onClick={() => this.handleChoose()} className=\"btn\" >Wählen Modell in diesem Projekt </button>\r\n                <button onClick={() => this.handleLoad()} className=\"btn\" >Laden das Projekt!</button>\r\n                {this.state.loadclick ? <div> <QRImage /><ChangeToVisuBtn /></div> : null}\r\n                {this.state.click ? <div> <ModelList /></div> : null}\r\n            </section>\r\n\r\n        )\r\n    }\r\n}\r\n","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\DataPoint.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ModelList\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ChangeToVisuBtn\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\DeliveryController.tsx",["242"],"import { PageController } from \"./PageController\";\r\nimport { MainController } from \"./MainController\";\r\nimport { DeliveryPage } from \"../view/pages/DeliveryPage\";\r\n\r\nexport class DeliveryController implements PageController {\r\n\r\n    private page = new DeliveryPage();\r\n\r\n    /**\r\n     * Konstruktor des Seitenverwalters. Registriert sich als Beobachter auf seiner Seite und setzt den start Status.\r\n     * Dieser Seitenverwalter benötigt einen SensorManager, welcher schon initilisiert wurde. \r\n     */\r\n    constructor() {\r\n        this.page.attach(this);\r\n        this.page.setState(\"needMessage\");\r\n    }\r\n\r\n    /**\r\n     * Die Update Methode des Seitenverwalters.\r\n     */\r\n    update() {\r\n        let state = this.page.getState();\r\n        switch (state.action) {\r\n            case \"deliverWebApp\":\r\n                this.deliverAsWebApp();\r\n                break;\r\n            case \"deliverExe\":\r\n                this.deliverAsExe();\r\n                break;\r\n            case \"needMessage\":\r\n                let ids = this.page.getIds();\r\n                this.page.setMessages(MainController.getInstance().getMessage(ids));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    deliverAsWebApp() {\r\n        let emails: string[] = this.page.getEMails();\r\n        let link: string = MainController.getInstance().getFacade().getModelLink();\r\n        for (let index = 0; index < emails.length; index++) {\r\n            const element: string = emails[index];\r\n            MainController.getInstance().getFacade().sendMail(element);\r\n        }\r\n    }\r\n\r\n    deliverAsExe() {\r\n        //todo\r\n    }\r\n}","D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\VisualizationController.tsx",["243"],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\index.tsx",["244","245","246","247","248","249","250"],"import React, { Component } from 'react';\r\nimport AddEmailButton from '../../components/DeliveryComponents/AddEmailButton';\r\nimport DownloadButton from '../../components/DeliveryComponents/DownloadButton';\r\nimport EmailList from '../../components/DeliveryComponents/EmailList';\r\nimport HandleAllEmail from '../../components/DeliveryComponents/HandleAllEmail';\r\nimport SendButton from '../../components/DeliveryComponents/SendButton';\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from 'react-dom';\r\n\r\ntype Props = {\r\n};\r\n\r\nexport class DeliveryPage extends React.Component<Props, State> implements Page {\r\n\r\n\tstate = new State();\r\n\tobservers: PageController[] = [];\r\n\tconstructor(props: Props) {\r\n\t\tsuper(props);\r\n\t\tconst VDOM = (\r\n\t\t\t<div className=\"deliverypage\">\r\n\t\t\t\t<div className=\"emailList-wrap\">\r\n\t\t\t\t\t<AddEmailButton addEmail={this.addEmail} deleteEmail={this.deleteEmail} />\r\n\t\t\t\t\t<EmailList emails={this.state.emails} updateEmail={this.updateEmail} deleteEmail={this.deleteEmail} />\r\n\t\t\t\t\t<HandleAllEmail emails={this.state.emails} chooseAllEmail={this.chooseAllEmail} clearAllChosen={this.clearAllChosen} />\r\n\t\t\t\t</div>\r\n\t\t\t\t<DownloadButton />\r\n\t\t\t\t<SendButton />\r\n\t\t\t</div>\r\n\t\t);\r\n\t\tReactDOM.render(VDOM, document.getElementById('root'));\r\n\t}\r\n\r\n\tattach(observer: PageController) {\r\n\t\tthis.observers.push(observer);\r\n\t}\r\n\r\n\tdetach(observer: PageController) {\r\n\t\tconst index = this.observers.indexOf(observer, 0);\r\n\t\tif (index > -1) {\r\n\t\t\tthis.observers.splice(index, 1);\r\n\t\t}\r\n\t}\r\n\r\n\tnotify() {\r\n\t\tfor (let index = 0; index < this.observers.length; index++) {\r\n\t\t\tconst element = this.observers[index];\r\n\t\t\telement.update();\r\n\t\t}\r\n\t}\r\n\r\n\tgetState() {\r\n\t\treturn this.state;\r\n\t}\r\n\r\n\t//addEmail for add new Email\r\n\taddEmail = (emailObj: { id: string, address: string, chosen: boolean }) => {\r\n\t\t//get orignal emailList\r\n\r\n\t\t//add new one\r\n\t\tconst newEmails = [emailObj, ...this.state.emails];\r\n\t\t//update emailList\r\n\t\tthis.state.emails = newEmails\r\n\t};\r\n\r\n\t//updateEmail for update EmailList\r\n\tupdateEmail = (id: string, chosen: boolean) => {\r\n\t\t//get orignal EmailList\r\n\t\t//compare id\r\n\t\tconst newEmails = this.state.emails.map((emailObj) => {\r\n\t\t\tif (emailObj.id === id) return { ...emailObj, chosen };\r\n\t\t\telse return emailObj;\r\n\t\t});\r\n\t\tthis.state.emails = newEmails\r\n\t};\r\n\r\n\t//deleteEmail for delete emailObj\r\n\tdeleteEmail = (id: string) => {\r\n\t\t//get orignal emailList\r\n\t\t//delete emailObj with id\r\n\t\tconst newEmails = this.state.emails.filter((emailObj) => {\r\n\t\t\treturn emailObj.id !== id;\r\n\t\t});\r\n\t\t//update emailList\r\n\t\tthis.state.emails = newEmails\r\n\t};\r\n\r\n\t//checkAllEmail for all chosen email\r\n\tchooseAllEmail = (chosen: boolean) => {\r\n\t\t//get orignal emailList\r\n\t\t//traverse emailList\r\n\t\tconst newEmails = this.state.emails.map((emailObj) => {\r\n\t\t\treturn { ...emailObj, chosen };\r\n\t\t});\r\n\t\t//update emailList\r\n\t\tthis.state.emails = newEmails\r\n\t};\r\n\r\n\t//clearAllChosen for delete all emails\r\n\tclearAllChosen = () => {\r\n\t\t//get orignal emailList\r\n\t\tconst { emails } = this.state;\r\n\t\t//filter datas\r\n\t\tconst newEmails = this.state.emails.filter((emailObj) => {\r\n\t\t\treturn !emailObj.chosen;\r\n\t\t});\r\n\t\t//update emailLists\r\n\t\tthis.state.emails = newEmails\r\n\t};\r\n\r\n}\r\n","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\index.tsx",["251","252","253","254"],"import React, { Component } from 'react'\r\nimport TrainButton from '../../components/ModelCreationComponents/TrainButton'\r\nimport ImageList from '../../components/VisualizationComponents/ImageList'\r\nimport eximage1 from '../../images/exImage1.svg'\r\nimport './VisualizationPage.css'\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport { MainController } from '../../../controller/MainController';\r\nimport ReactDOM from 'react-dom';\r\n\r\ntype Props = {\r\n};\r\n\r\nexport class VisualizationPage extends React.Component<Props, State> implements Page {\r\n    state = new State()\r\n\r\n    observers: PageController[] = [];\r\n    constructor(props: Props) {\r\n        super(props);\r\n        const VDOM = (\r\n            <div className=\"visualizationpage\">\r\n                <img src={this.state.imageSrc} alt=\"2\" className=\"showImage\" ></img>\r\n                <ImageList setImageSrc={this.setImageSrc} />\r\n                <TrainButton />\r\n            </div>\r\n        );\r\n        ReactDOM.render(VDOM, document.getElementById('root'));\r\n    }\r\n\r\n\r\n    attach(observer: PageController) {\r\n        this.observers.push(observer);\r\n    }\r\n\r\n    detach(observer: PageController) {\r\n        const index = this.observers.indexOf(observer, 0);\r\n        if (index > -1) {\r\n            this.observers.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    notify() {\r\n        for (let index = 0; index < this.observers.length; index++) {\r\n            const element = this.observers[index];\r\n            element.update();\r\n        }\r\n    }\r\n\r\n    getState() {\r\n        return this.state;\r\n    }\r\n\r\n\r\n    setImageSrc = (newSrc: string) => {\r\n        const newState = { imageSrc: newSrc }\r\n        this.setState({ imageSrc: newSrc })\r\n    }\r\n\r\n}\r\n","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\State.tsx",["255"],"export class State {\r\n  currentState: States = States.NeedMessage;\r\n  languageCode: string = \"de\";\r\n  messageIDs: number[] = [];\r\n  messages: string[] = [];\r\n  emails: { id: string, address: string, chosen: boolean }[] = [{ id: 'ex', address: 'example', chosen: false }];\r\n\r\n}\r\n\r\n\r\nexport enum States {\r\n  NeedMessage,\r\n  NeedData,\r\n  GotData,\r\n  ChangePage,\r\n  Download,\r\n  Send\r\n}\r\n","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\State.tsx",["256"],"import eximage1 from '../../images/exImage1.svg'\r\nexport class State {\r\n  currentState: States = States.NeedMessage;\r\n  languageCode: string = \"de\";\r\n  messageIDs: number[] = [];\r\n  messages: string[] = [];\r\n  imageSrc: string = eximage1\r\n}\r\n\r\n\r\nexport enum States {\r\n  NeedMessage,\r\n  NeedData,\r\n  GotData,\r\n  ChangePage,\r\n  Finish\r\n}\r\n","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\SendButton\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\DownloadButton\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\TrainButton\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\HandleAllEmail\\index.jsx",[],["257","258"],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\AddEmailButton\\index.jsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\EmailList\\index.jsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\ImageList\\index.jsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\EmailItem\\index.jsx",[],{"ruleId":"259","severity":1,"message":"260","line":1,"column":8,"nodeType":"261","messageId":"262","endLine":1,"endColumn":13},{"ruleId":"259","severity":1,"message":"263","line":2,"column":8,"nodeType":"261","messageId":"262","endLine":2,"endColumn":16},{"ruleId":"264","replacedBy":"265"},{"ruleId":"266","replacedBy":"267"},{"ruleId":"259","severity":1,"message":"268","line":5,"column":10,"nodeType":"261","messageId":"262","endLine":5,"endColumn":16},{"ruleId":"259","severity":1,"message":"269","line":5,"column":10,"nodeType":"261","messageId":"262","endLine":5,"endColumn":17},{"ruleId":"259","severity":1,"message":"270","line":8,"column":37,"nodeType":"261","messageId":"262","endLine":8,"endColumn":45},{"ruleId":"259","severity":1,"message":"271","line":8,"column":47,"nodeType":"261","messageId":"262","endLine":8,"endColumn":57},{"ruleId":"259","severity":1,"message":"272","line":8,"column":59,"nodeType":"261","messageId":"262","endLine":8,"endColumn":69},{"ruleId":"259","severity":1,"message":"273","line":8,"column":71,"nodeType":"261","messageId":"262","endLine":8,"endColumn":78},{"ruleId":"274","severity":1,"message":"275","line":48,"column":13,"nodeType":"276","messageId":"277","endLine":50,"endColumn":23},{"ruleId":"274","severity":1,"message":"275","line":60,"column":13,"nodeType":"276","messageId":"277","endLine":62,"endColumn":23},{"ruleId":"259","severity":1,"message":"278","line":1,"column":10,"nodeType":"261","messageId":"262","endLine":1,"endColumn":16},{"ruleId":"259","severity":1,"message":"279","line":1,"column":18,"nodeType":"261","messageId":"262","endLine":1,"endColumn":35},{"ruleId":"259","severity":1,"message":"270","line":1,"column":37,"nodeType":"261","messageId":"262","endLine":1,"endColumn":45},{"ruleId":"259","severity":1,"message":"271","line":1,"column":47,"nodeType":"261","messageId":"262","endLine":1,"endColumn":57},{"ruleId":"259","severity":1,"message":"272","line":1,"column":59,"nodeType":"261","messageId":"262","endLine":1,"endColumn":69},{"ruleId":"259","severity":1,"message":"273","line":1,"column":71,"nodeType":"261","messageId":"262","endLine":1,"endColumn":78},{"ruleId":"259","severity":1,"message":"280","line":1,"column":17,"nodeType":"261","messageId":"262","endLine":1,"endColumn":26},{"ruleId":"281","severity":1,"message":"282","line":66,"column":13,"nodeType":"283","endLine":66,"endColumn":23},{"ruleId":"281","severity":1,"message":"282","line":67,"column":13,"nodeType":"283","endLine":67,"endColumn":23},{"ruleId":"281","severity":1,"message":"282","line":89,"column":13,"nodeType":"283","endLine":89,"endColumn":23},{"ruleId":"281","severity":1,"message":"282","line":90,"column":13,"nodeType":"283","endLine":90,"endColumn":23},{"ruleId":"284","severity":1,"message":"285","line":97,"column":41,"nodeType":"286","messageId":"277","endLine":97,"endColumn":43},{"ruleId":"281","severity":1,"message":"282","line":101,"column":17,"nodeType":"283","endLine":101,"endColumn":27},{"ruleId":"281","severity":1,"message":"282","line":102,"column":17,"nodeType":"283","endLine":102,"endColumn":27},{"ruleId":"284","severity":1,"message":"285","line":104,"column":45,"nodeType":"286","messageId":"277","endLine":104,"endColumn":47},{"ruleId":"281","severity":1,"message":"282","line":120,"column":13,"nodeType":"283","endLine":120,"endColumn":23},{"ruleId":"281","severity":1,"message":"282","line":121,"column":13,"nodeType":"283","endLine":121,"endColumn":23},{"ruleId":"284","severity":1,"message":"285","line":126,"column":41,"nodeType":"286","messageId":"277","endLine":126,"endColumn":43},{"ruleId":"281","severity":1,"message":"282","line":139,"column":13,"nodeType":"283","endLine":139,"endColumn":23},{"ruleId":"281","severity":1,"message":"282","line":140,"column":13,"nodeType":"283","endLine":140,"endColumn":23},{"ruleId":"281","severity":1,"message":"282","line":150,"column":13,"nodeType":"283","endLine":150,"endColumn":23},{"ruleId":"281","severity":1,"message":"282","line":151,"column":13,"nodeType":"283","endLine":151,"endColumn":23},{"ruleId":"281","severity":1,"message":"282","line":158,"column":13,"nodeType":"283","endLine":158,"endColumn":23},{"ruleId":"281","severity":1,"message":"282","line":165,"column":13,"nodeType":"283","endLine":165,"endColumn":23},{"ruleId":"281","severity":1,"message":"282","line":166,"column":13,"nodeType":"283","endLine":166,"endColumn":23},{"ruleId":"259","severity":1,"message":"287","line":5,"column":10,"nodeType":"261","messageId":"262","endLine":5,"endColumn":15},{"ruleId":"259","severity":1,"message":"278","line":3,"column":10,"nodeType":"261","messageId":"262","endLine":3,"endColumn":16},{"ruleId":"259","severity":1,"message":"279","line":3,"column":18,"nodeType":"261","messageId":"262","endLine":3,"endColumn":35},{"ruleId":"259","severity":1,"message":"270","line":3,"column":37,"nodeType":"261","messageId":"262","endLine":3,"endColumn":45},{"ruleId":"259","severity":1,"message":"271","line":3,"column":47,"nodeType":"261","messageId":"262","endLine":3,"endColumn":57},{"ruleId":"259","severity":1,"message":"272","line":3,"column":59,"nodeType":"261","messageId":"262","endLine":3,"endColumn":69},{"ruleId":"259","severity":1,"message":"273","line":3,"column":71,"nodeType":"261","messageId":"262","endLine":3,"endColumn":78},{"ruleId":"259","severity":1,"message":"287","line":1,"column":10,"nodeType":"261","messageId":"262","endLine":1,"endColumn":15},{"ruleId":"288","severity":1,"message":"289","line":41,"column":53,"nodeType":"290","messageId":"291","endLine":41,"endColumn":55},{"ruleId":"284","severity":1,"message":"292","line":42,"column":38,"nodeType":"286","messageId":"277","endLine":42,"endColumn":40},{"ruleId":"284","severity":1,"message":"285","line":43,"column":53,"nodeType":"286","messageId":"277","endLine":43,"endColumn":55},{"ruleId":"288","severity":1,"message":"289","line":60,"column":53,"nodeType":"290","messageId":"291","endLine":60,"endColumn":55},{"ruleId":"284","severity":1,"message":"292","line":61,"column":38,"nodeType":"286","messageId":"277","endLine":61,"endColumn":40},{"ruleId":"259","severity":1,"message":"293","line":41,"column":13,"nodeType":"261","messageId":"262","endLine":41,"endColumn":25},{"ruleId":"294","severity":2,"message":"295","line":32,"column":17,"nodeType":"296","messageId":"297","endLine":32,"endColumn":44},{"ruleId":"259","severity":1,"message":"280","line":1,"column":17,"nodeType":"261","messageId":"262","endLine":1,"endColumn":26},{"ruleId":"281","severity":1,"message":"282","line":64,"column":3,"nodeType":"283","endLine":64,"endColumn":13},{"ruleId":"281","severity":1,"message":"282","line":75,"column":3,"nodeType":"283","endLine":75,"endColumn":13},{"ruleId":"281","severity":1,"message":"282","line":86,"column":3,"nodeType":"283","endLine":86,"endColumn":13},{"ruleId":"281","severity":1,"message":"282","line":97,"column":3,"nodeType":"283","endLine":97,"endColumn":13},{"ruleId":"259","severity":1,"message":"298","line":103,"column":11,"nodeType":"261","messageId":"262","endLine":103,"endColumn":17},{"ruleId":"281","severity":1,"message":"282","line":109,"column":3,"nodeType":"283","endLine":109,"endColumn":13},{"ruleId":"259","severity":1,"message":"280","line":1,"column":17,"nodeType":"261","messageId":"262","endLine":1,"endColumn":26},{"ruleId":"259","severity":1,"message":"299","line":4,"column":8,"nodeType":"261","messageId":"262","endLine":4,"endColumn":16},{"ruleId":"259","severity":1,"message":"300","line":9,"column":10,"nodeType":"261","messageId":"262","endLine":9,"endColumn":24},{"ruleId":"259","severity":1,"message":"301","line":56,"column":15,"nodeType":"261","messageId":"262","endLine":56,"endColumn":23},{"ruleId":"302","severity":1,"message":"303","line":2,"column":26,"nodeType":"261","messageId":"304","endLine":2,"endColumn":32},{"ruleId":"302","severity":1,"message":"303","line":3,"column":26,"nodeType":"261","messageId":"304","endLine":3,"endColumn":32},{"ruleId":"264","replacedBy":"265"},{"ruleId":"266","replacedBy":"267"},"@typescript-eslint/no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","'ReactDOM' is defined but never used.","no-native-reassign",["305"],"no-negated-in-lhs",["306"],"'IState' is defined but never used.","'Session' is defined but never used.","'QRNumber' is defined but never used.","'QRAlphaNum' is defined but never used.","'QR8BitByte' is defined but never used.","'QRKanji' is defined but never used.","no-duplicate-case","Duplicate case label.","SwitchCase","unexpected","'QRCode' is defined but never used.","'ErrorCorrectLevel' is defined but never used.","'Component' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","'Admin' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Expected '===' and instead saw '=='.","'link' is assigned a value but never used.","@typescript-eslint/no-unused-expressions","Expected an assignment or function call and instead saw an expression.","ExpressionStatement","unusedExpression","'emails' is assigned a value but never used.","'eximage1' is defined but never used.","'MainController' is defined but never used.","'newState' is assigned a value but never used.","@typescript-eslint/no-use-before-define","'States' was used before it was defined.","noUseBeforeDefine","no-global-assign","no-unsafe-negation"]