[{"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\index.tsx":"1","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\reportWebVitals.ts":"2","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\controller\\MainController.tsx":"3","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\controller\\ReferringController.tsx":"4","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Facade.tsx":"5","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\State.tsx":"6","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Language.tsx":"7","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\ExplorerConnector.tsx":"8","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\User.tsx":"9","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\controller\\DeliveryController.tsx":"10","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\controller\\VisualizationController.tsx":"11","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\index.tsx":"12","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Device.tsx":"13","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Project.tsx":"14","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\controller\\ModelCreationController.tsx":"15","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\index.tsx":"16","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\index.tsx":"17","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\State.tsx":"18","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Session.tsx":"19","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\AIModel.tsx":"20","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Sensor.tsx":"21","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\DataSet.tsx":"22","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\State.tsx":"23","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\index.tsx":"24","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\State.tsx":"25","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Countdown\\index.tsx":"26","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Title\\index.tsx":"27","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Diagram\\index.tsx":"28","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\DataRow.tsx":"29","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Label.tsx":"30","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\SendButton\\index.tsx":"31","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\DownloadButton\\index.tsx":"32","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\TrainButton\\index.tsx":"33","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\State.tsx":"34","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\AddEmailButton\\index.jsx":"35","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\HandleAllEmail\\index.jsx":"36","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\EmailList\\index.jsx":"37","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\ImageList\\index.jsx":"38","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\TimeSpan.tsx":"39","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\DataPoint.tsx":"40","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\ImputationList\\index.tsx":"41","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\FeatureList\\index.tsx":"42","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\NormalizationList\\index.tsx":"43","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\ModelTypeList\\index.tsx":"44","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\DatasetList\\index.jsx":"45","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\AddDatasetButton\\index.jsx":"46","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\EmailItem\\index.jsx":"47","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\DatasetItem\\index.jsx":"48","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\FinishPage\\index.tsx":"49","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\FinishPage\\State.tsx":"50","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Input\\Label\\AddLabel\\AddLabelForm.tsx":"51","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Input\\Label\\LabelList\\LabelList.tsx":"52","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Input\\Label\\LabelItem\\LabelItem.tsx":"53","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Body\\index.tsx":"54","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Title\\index.tsx":"55","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\index.tsx":"56","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\State.tsx":"57","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Input\\index.tsx":"58","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Title\\index.tsx":"59"},{"size":480,"mtime":1613137427588,"results":"60","hashOfConfig":"61"},{"size":440,"mtime":1613137427601,"results":"62","hashOfConfig":"61"},{"size":3063,"mtime":1613245441551,"results":"63","hashOfConfig":"61"},{"size":5349,"mtime":1613489365961,"results":"64","hashOfConfig":"61"},{"size":13291,"mtime":1613474119041,"results":"65","hashOfConfig":"61"},{"size":3545,"mtime":1613489258281,"results":"66","hashOfConfig":"61"},{"size":1673,"mtime":1613315191910,"results":"67","hashOfConfig":"61"},{"size":5260,"mtime":1613317708868,"results":"68","hashOfConfig":"61"},{"size":14034,"mtime":1613315191924,"results":"69","hashOfConfig":"61"},{"size":2285,"mtime":1613474119019,"results":"70","hashOfConfig":"61"},{"size":3510,"mtime":1613489365782,"results":"71","hashOfConfig":"61"},{"size":2628,"mtime":1613269824875,"results":"72","hashOfConfig":"61"},{"size":1767,"mtime":1613315191901,"results":"73","hashOfConfig":"61"},{"size":7572,"mtime":1613315191914,"results":"74","hashOfConfig":"61"},{"size":1451,"mtime":1613489365779,"results":"75","hashOfConfig":"61"},{"size":3301,"mtime":1613317708939,"results":"76","hashOfConfig":"61"},{"size":1803,"mtime":1613137427689,"results":"77","hashOfConfig":"61"},{"size":361,"mtime":1613269762000,"results":"78","hashOfConfig":"61"},{"size":1581,"mtime":1613317708872,"results":"79","hashOfConfig":"61"},{"size":485,"mtime":1613137897360,"results":"80","hashOfConfig":"61"},{"size":5849,"mtime":1613315191917,"results":"81","hashOfConfig":"61"},{"size":6394,"mtime":1613315191898,"results":"82","hashOfConfig":"61"},{"size":384,"mtime":1613245212544,"results":"83","hashOfConfig":"61"},{"size":3163,"mtime":1613474119060,"results":"84","hashOfConfig":"61"},{"size":337,"mtime":1613137427687,"results":"85","hashOfConfig":"61"},{"size":1074,"mtime":1613389246503,"results":"86","hashOfConfig":"61"},{"size":1002,"mtime":1613264837135,"results":"87","hashOfConfig":"61"},{"size":363,"mtime":1613265648173,"results":"88","hashOfConfig":"61"},{"size":3361,"mtime":1613315191894,"results":"89","hashOfConfig":"61"},{"size":1787,"mtime":1613137897374,"results":"90","hashOfConfig":"61"},{"size":372,"mtime":1613137427612,"results":"91","hashOfConfig":"61"},{"size":380,"mtime":1613137427609,"results":"92","hashOfConfig":"61"},{"size":327,"mtime":1613137427646,"results":"93","hashOfConfig":"61"},{"size":578,"mtime":1613137427680,"results":"94","hashOfConfig":"61"},{"size":1247,"mtime":1613245212538,"results":"95","hashOfConfig":"61"},{"size":914,"mtime":1613137427611,"results":"96","hashOfConfig":"61"},{"size":635,"mtime":1613317708875,"results":"97","hashOfConfig":"61"},{"size":1461,"mtime":1613137427667,"results":"98","hashOfConfig":"61"},{"size":1370,"mtime":1613137897385,"results":"99","hashOfConfig":"61"},{"size":927,"mtime":1613137897362,"results":"100","hashOfConfig":"61"},{"size":1093,"mtime":1613137427642,"results":"101","hashOfConfig":"61"},{"size":1442,"mtime":1613137427641,"results":"102","hashOfConfig":"61"},{"size":1274,"mtime":1613137427645,"results":"103","hashOfConfig":"61"},{"size":1200,"mtime":1613137427644,"results":"104","hashOfConfig":"61"},{"size":666,"mtime":1613137427640,"results":"105","hashOfConfig":"61"},{"size":2573,"mtime":1613137427638,"results":"106","hashOfConfig":"61"},{"size":1168,"mtime":1613255837825,"results":"107","hashOfConfig":"61"},{"size":1021,"mtime":1613137427639,"results":"108","hashOfConfig":"61"},{"size":2334,"mtime":1613314905488,"results":"109","hashOfConfig":"61"},{"size":335,"mtime":1613314495845,"results":"110","hashOfConfig":"61"},{"size":1612,"mtime":1613314734640,"results":"111","hashOfConfig":"61"},{"size":874,"mtime":1613476862903,"results":"112","hashOfConfig":"61"},{"size":734,"mtime":1613314692134,"results":"113","hashOfConfig":"61"},{"size":376,"mtime":1613137427632,"results":"114","hashOfConfig":"61"},{"size":1000,"mtime":1613137427636,"results":"115","hashOfConfig":"61"},{"size":2311,"mtime":1613488950223,"results":"116","hashOfConfig":"61"},{"size":511,"mtime":1613488556567,"results":"117","hashOfConfig":"61"},{"size":3829,"mtime":1613489338363,"results":"118","hashOfConfig":"61"},{"size":1002,"mtime":1613137427662,"results":"119","hashOfConfig":"61"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"123"},"14qbaph",{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"123"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"123"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"123"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"149","usedDeprecatedRules":"150"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"123"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"123"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"123"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"123"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"123"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"123"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"123"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"150"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"123"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"235","messages":"236","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"237","messages":"238","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"239","messages":"240","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"241","messages":"242","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"247","messages":"248","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\index.tsx",["255","256"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { MainController } from './controller/MainController';\r\n\r\nMainController.getInstance().startApp();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n",["257","258"],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\reportWebVitals.ts",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\controller\\MainController.tsx",["259"],"import { PageController } from \"./PageController\";\r\n//import { StartController } from \"./StartController\";\r\nimport { RefferingController } from \"./ReferringController\";\r\nimport { MainControllerInterface } from \"./MainControllerInterface\";\r\nimport { IState, States } from \"../view/pages/State\";\r\nimport { Facade } from \"../model/Facade\";\r\n\r\nexport class MainController implements MainControllerInterface {\r\n  private facade: Facade;\r\n\r\n  private static mainController: MainController;\r\n\r\n  private currentPageController: PageController | undefined;\r\n\r\n  /**\r\n   * Konstruktor des MainControllers. Holt sich die Fassade.\r\n   */\r\n  constructor() {\r\n    this.facade = new Facade(\"de\");\r\n  }\r\n\r\n  /**\r\n   * Gibt sich selber zurück und sorgt dafür das nur ein MainController besteht.\r\n   * @returns MainController\r\n   */\r\n  static getInstance() {\r\n    if (this.mainController === undefined) {\r\n      this.mainController = new MainController();\r\n      return this.mainController;\r\n    }\r\n    return this.mainController;\r\n  }\r\n\r\n  /**\r\n   * Prüft ob das Gerät auf das Internet zugreifen kann.\r\n   * @returns Gibt true zurück falls eine Internetverbindung besteht, sonst wird false zurück gegeben.\r\n   */\r\n  checkConnection() {\r\n    return window.navigator.onLine;\r\n  }\r\n\r\n  /**\r\n   * Prüft ob der Benutzer angemeldet ist.\r\n   * @returns Gibt true zurück falls der Benutzer angemeldet ist, sonst wird false zurück gegeben.\r\n   */\r\n  checkLoginStatus() {\r\n    return false;//this.facade.checkLogin();\r\n  }\r\n\r\n  // static getSession() {\r\n  //    return false\r\n  //}\r\n\r\n  /**\r\n   * Setzt den momentanen Seitenverwalter neu\r\n   * @param destinationPageController Der neue Seitenverwalter\r\n   */\r\n  changeTo(destinationPageController: PageController) {\r\n    this.currentPageController = destinationPageController;\r\n  }\r\n\r\n  /**\r\n   * Andwendungstart für einen Desktop\r\n   */\r\n  startApp() {\r\n    let refferingController: RefferingController = new RefferingController();\r\n    this.changeTo(refferingController);\r\n  }\r\n\r\n\r\n  /**\r\n   * @returns Gibt die Fassade zurück\r\n   */\r\n  getFacade() {\r\n    return this.facade;\r\n  }\r\n\r\n  /**\r\n   * @param ids Alle ids, zu denen man die Texte möchte.\r\n   * @returns Gibt alle texte zu den übergebenen ids zurück.\r\n   */\r\n  getMessage(messages: { text: string, id: number; }[]) {\r\n    let messageIDs: number[] = [];\r\n    for (let index = 0; index < messages.length; index++) {\r\n      messageIDs.push(messages[index].id);\r\n    }\r\n    let texts: string[] = [];\r\n    for (let index = 0; index < messages.length; index++) {\r\n      messages[index].text = texts[index];\r\n      return messages;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param languageCode Das Sprachkürzel als string.\r\n   * @returns Gibt true zurück falls der wechsel erfolgt ist, sonst false.\r\n   */\r\n  setLanguage(languageCode: string) {\r\n    let nextState: States;\r\n    let success = this.getFacade().setLanguage(languageCode);\r\n    if (success) {\r\n      nextState = States.NeedMessage;\r\n    } else {\r\n      nextState = States.LoadError;\r\n    }\r\n    return nextState;\r\n  }\r\n}\r\n","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\controller\\ReferringController.tsx",["260","261","262","263","264","265"],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Facade.tsx",["266"],"import { DeliveryFormat } from \"./DeliveryFormat\";\r\nimport { ExplorerConnector } from \"./ExplorerConnector\";\r\nimport { Language } from \"./Language\";\r\nimport { SensorData } from \"./Sensor\";\r\nimport { Session } from \"./Session\";\r\nimport { Admin, Dataminer, AIModelUser, User } from \"./User\";\r\n\r\ninterface FacadeInterface {\r\n  createDataSet(sensorTypes: string[], dataSetName: string): boolean;\r\n  sendDataPoint(dataRowID: number, value: number[]): boolean;\r\n  readDataPoint(dataRowID: number): object;\r\n  loadProject(projectID: number): boolean;\r\n  getProjectMetas(): string[];\r\n  getDataSetMeta(): string[];\r\n  getSessionID(): number;\r\n  getDataRows(dataSetID: number): number[][][];\r\n  getCurrentDataRows(): { value: number, relativeTime: number; }[];\r\n  getMessage(messageID: number): string;\r\n  setLanguage(languageCode: string): boolean;\r\n  getLanguageMetas(): object[];\r\n  getEmail(): string;\r\n  deleteDataSet(dataSetID: number): boolean;\r\n  registerAdmin(adminName: string, email: string, password: string): boolean;\r\n  registerDataminer(dataminerName: string, sessionID: number): boolean;\r\n  registerAIModelUser(aiModelUserName: string): boolean;\r\n  loginAdmin(email: string, password: string): boolean;\r\n  logoutAdmin(): boolean;\r\n  createProject(projectName: string): boolean;\r\n  setLabel(labelID: number, start: number, end: number): boolean;\r\n  createLabel(): number; //labelid von datenbank\r\n  getLabels(): object[];\r\n  checkLogin(): boolean;\r\n  classify(aiId: number, dataSetId: number, callBack: Function): void;\r\n  getAIModel(format: DeliveryFormat): object;\r\n  applyModel(modeldata: object): void;\r\n} export type { FacadeInterface };\r\n\r\n/**\r\n * Die Facade stellt alle interaktionen mit dem Model zur Verfügung\r\n */\r\nexport class Facade {\r\n  private language: Language; //Alle Nachrichten, in der geladenen Sprache\r\n  private explorerConnector: ExplorerConnector; //Die Verbindung zur Datenbank\r\n  private user?: User; //Der Benutzer, entweder Admin, Datenerfasser oder AIModelUser\r\n\r\n\r\n  /**\r\n   * Erstellt die Facade\r\n   * @param languageCode der Sprachcode von der Sprache, die geladen werden soll\r\n   */\r\n  constructor(languageCode: string) {\r\n    this.explorerConnector = new ExplorerConnector();\r\n    this.language = new Language(this.explorerConnector.loadLanguage(languageCode));\r\n  }\r\n\r\n  /**\r\n   * Erstellt ein Datensatz\r\n   * @param sensorTypeID muss der Sensor Typ ID von einem Sensor des Gerätes übereinstimmen\r\n   * @param dataSetName Name des Datensatzes\r\n   * @returns true, wenn der Datensatz erstellt wurde. Dies ist der Fall, wenn ein Benutzer existiert welcher in einer Session ist und alle Sensortypen existieren.\r\n   */\r\n  createDataSet(sensorTypeID: number[], dataSetName: string): boolean {\r\n    if (this.user != null) {\r\n      let dataminerName: string = this.user.getName();\r\n      let sessionID: number = this.getSessionID();\r\n      let dataRowSensors: SensorData[] = this.user.getDeviceSensors(sensorTypeID);\r\n      if (dataRowSensors.length > 0 && dataRowSensors.length === sensorTypeID.length && sessionID >= 0) {\r\n        let dataSetID: number = this.explorerConnector.createDataSet(sessionID, sensorTypeID, dataminerName, dataSetName);\r\n        return this.user.createDataSet(dataRowSensors, dataSetID, dataSetName);\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Sendet den Datenpunkt an die Datenbank\r\n   * @param dataRowID die ID der aktuellen Datenreihe des eingelesenen Datenpunkts\r\n   * @param value der SensorWert\r\n   * @param relativeTime die relative Zeit zum Aufnahmestart in Millisekunden\r\n   * @return true, wenn der Datenpunkt erfolgreich an die Datenbank gesendet wurde\r\n   */\r\n  sendDataPoint(dataRowID: number, value: number, relativeTime: number): boolean {\r\n    if (this.user != null) {\r\n      let sessionID: number = this.getSessionID();\r\n      let dataSetID: number = this.user.getCurrentDataSetID();\r\n      return this.explorerConnector.sendDataPoint(sessionID, dataSetID, dataRowID, value, relativeTime);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Liest für den aktuellen Datensatz den Sensor aus von der Datenreihe mit der übergebenen ID\r\n   * @param dataRowID die DatenreihenID\r\n   */\r\n  readDataPoint(dataRowID: number): { dataPoint?: { value: number, relativeTime: number; }; } {\r\n    if (this.user != null) {\r\n      return this.user.readDataPoint(dataRowID);\r\n    }\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Lädt aus der Datenbank das Projekt mit der übergebenen ID, hierfür muss der Admin angemeldet sein\r\n   * @param projectID die Projekt ID\r\n   * @returns true, wenn das Projekt erfolgreich geladen wurde dies tritt nur ein, wenn eine Verbindung zur Datenbank besteht,\r\n   *          die Projekt ID existiert und der Admin dafür angemeldet ist\r\n   */\r\n  loadProject(projectID: number): boolean {\r\n    if (this.user != null && this.user instanceof Admin && !this.user.existProject(projectID)) {\r\n      let adminEmail: string = this.user.getEmail();\r\n      return this.user.loadProject(this.explorerConnector.loadProject(adminEmail, projectID));\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Lädt vom aktuell angemeldeten Admin von seinen Projekten den Namen und die die Projekt ID\r\n   * @returns Von allen Projekten des Admins Projekt ID und Projektname\r\n   */\r\n  getProjectMetas(): { projectID: number, projectName: string, AIModelID: number[]; }[] {\r\n    return this.explorerConnector.getProjectMetas(this.getAdminEmail());\r\n  }\r\n\r\n  /**\r\n   * Gibt vom aktuellen Projekt von allen Datensätzen die Datensatz ID und der Datensatz Name zurück\r\n   */\r\n  getDataSetMetas(): { dataSetID: number, dataSetName: string; }[] {\r\n    if (this.user != null) {\r\n      return this.user.getDataSetMetas();\r\n    }\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Gibt die Session ID des aktuellen Projekts zurück, -1 falls kein aktuelles Projekt existiert\r\n   */\r\n  getSessionID(): number {\r\n    if (this.user != null) {\r\n      return this.user.getSessionID();\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Gibt vom aktuellen Projekt die Datenreihen der Datensatz ID zurück und setzt diesen Datensatz als aktuellen Datensatz\r\n   * @param dataSetID die Datensatz ID von der die Datenreihen gelesen werden sollen\r\n   * @returns die Sensordaten von der Datenreihe\r\n   */\r\n  getDataRows(dataSetID: number): { dataRows?: { value: number, relativeTime: number; }[][]; } {\r\n    if (this.user != null) {\r\n      return this.user.getDataRows(dataSetID);\r\n    }\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Gibt vom aktuellen Projekt die Datenreihen des aktuellen Datensatzes zurück\r\n   * @param dataSetID die Datensatz ID von der die Datenreihen gelesen werden sollen\r\n   * @returns die Sensordaten von der Datenreihe\r\n   */\r\n  getCurrentDataRows(): { dataRows?: { value: number, relativeTime: number; }[][]; } {\r\n    if (this.user != null) {\r\n      return this.user.getCurrentDataRows();\r\n    }\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Gibt aus der geladenen Sprache die Nachrichten die über die IDs angegeben werden\r\n   * @param messageID alle IDs, von denen die Sprachnachricht geladen werden soll\r\n   * @returns alle Nachrichten, in der gleichen Reihenfolge wie angefordert\r\n   */\r\n  getMessage(messageID: number[]): { messageID: number, message: string; }[] {\r\n    return this.language.getMessage(messageID);\r\n  }\r\n\r\n  /**\r\n   * Gibt die auswählbaren Sensoren als ID mit ihrer Art in der Passenden Sprache zurück\r\n   */\r\n  getAvailableSensors(): { sensorTypID: number, sensorType: string; }[] {\r\n    if (this.user != null) {\r\n      var sensors: { sensorTypID: number, sensorType: string; }[] = [];\r\n      let message: { messageID: number, message: string; }[] = this.language.getMessage(this.user.getAvailableSensors());\r\n      for (let i = 0; i < message.length; i++) {\r\n        sensors.push({ sensorTypID: message[i].messageID, sensorType: message[i].message });\r\n      }\r\n      return sensors;\r\n    }\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Lädt die Sprache aus der Datenbank mit dem übergebenen Sprachcode\r\n   * @param languageCode Sprachcode\r\n   * @returns true, falls die Sprache erfolgreich geladen wurde\r\n   */\r\n  setLanguage(languageCode: string): boolean {\r\n    if (languageCode !== this.language.getLanguageCode()) {\r\n      let language: string[] = this.explorerConnector.loadLanguage(languageCode);\r\n      return this.language.setLanguage(language);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Gibt von allen in der Datenbank verfügbaren Sprachen den Sprachcode sowie den Sprachennamen zurück\r\n   */\r\n  getLanguageMetas(): { languageCode: number, languageName: string; }[] {\r\n    return this.explorerConnector.getLanguageMetas();\r\n  }\r\n\r\n  /**\r\n   * Gibt die Email vom Admin zurück, diese kann leer sein falls kein Admin angemeldet ist\r\n   */\r\n  getAdminEmail(): string {\r\n    if (this.user instanceof Admin) {\r\n      return this.user.getEmail();\r\n    }\r\n    return \"\";\r\n  }\r\n\r\n  /**\r\n   * Löscht den Datensatz mit der übergebenen Datensatz ID\r\n   * @param dataSetID die Datensatz ID\r\n   * @returns true, wenn das löschen erfolgreich ist\r\n   */\r\n  deleteDataSet(dataSetID: number): boolean {\r\n    if (this.user != null) {\r\n      let projectID: number = this.user.deleteDataSet(dataSetID);\r\n      if (projectID >= 0) {\r\n        let adminEmail: string = this.getAdminEmail();\r\n        this.explorerConnector.deleteDataSet(adminEmail, projectID, dataSetID);\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  registerAdmin(adminName: string, email: string, password: string): boolean {\r\n    let IDs: { adminID: number, deviceID: number; } = this.explorerConnector.registerAdmin(adminName, email, password);\r\n    if (IDs.adminID >= 0) {\r\n      this.user = new Admin(IDs.adminID, IDs.deviceID, adminName, email);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  registerDataminer(dataminerName: string, sessionID: number): boolean {\r\n    let dataminer: {\r\n      dataminerID: number, deviceID: number, project:\r\n      { projectID: number, projectName: string, sessionID: number; };\r\n    } = this.explorerConnector.registerDataminer(dataminerName, sessionID);\r\n    if (dataminer.dataminerID >= 0 && dataminer.deviceID >= 0) {\r\n      this.user = new Dataminer(dataminer.dataminerID, dataminer.deviceID, dataminerName);\r\n      this.user.loadProject(dataminer.project);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param aiModelUserName \r\n   */\r\n  registerAIModelUser(aiModelUserName: string, modelID: number): boolean {\r\n    let aiModelUser: {\r\n      aiModelUserID: number, deviceID: number, project:\r\n      { projectID: number, projectName: string, sessionID: number; };\r\n    } = this.explorerConnector.registerAIModelUser(aiModelUserName, modelID);\r\n    if (aiModelUser.aiModelUserID >= 0 && aiModelUser.deviceID >= 0) {\r\n      this.user = new AIModelUser(aiModelUser.aiModelUserID, aiModelUser.deviceID, aiModelUserName);\r\n      this.user.loadProject(aiModelUser.project);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  loginAdmin(email: string, password: string): boolean {\r\n    if (this.user == null) {\r\n      let adminData: {\r\n        admin?: {\r\n          adminID: number, deviceID: number, adminName: string, email: string,\r\n          device: { MACADRESS: string, deviceName: string, firmware: string, generation: string, deviceType: string; };\r\n        };\r\n      } = this.explorerConnector.loginAdmin(email, password);\r\n      if (adminData.admin != null) {\r\n        //Nur umbenennen von adminData.admin zu admin\r\n        let admin: { adminID: number, deviceID: number, adminName: string, email: string, device: { MACADRESS: string, deviceName: string, firmware: string, generation: string, deviceType: string; }; } = adminData.admin;\r\n\r\n        this.user = new Admin(admin.adminID, admin.deviceID, admin.adminName, admin.email, admin.device);\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  logoutAdmin(): boolean {\r\n    if (this.user != null) {\r\n      let logout = this.explorerConnector.logoutAdmin(this.getAdminEmail());\r\n      if (logout) {\r\n        delete this.user;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  createProject(projectName: string): boolean {\r\n    if (this.user instanceof Admin) {\r\n      let project: { projectID: number, sessionID: number; } = this.explorerConnector.createProject(this.getAdminEmail(), projectName);\r\n      return this.user.createProject(project.projectID, project.sessionID, projectName);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  setLabel(labelID: number, span: { start: number, end: number; }, labelName?: string): boolean {\r\n    if (this.user != null) {\r\n      return this.user.setLabel(labelID, span, labelName);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  getLabels(): { labels?: { name: string, id: number, start: number, end: number; }[]; } {\r\n    if (this.user != null) {\r\n      return this.user.getLabels();\r\n    }\r\n    return {};\r\n  }\r\n\r\n  classify(aiId: number, dataSetId: number, callBack: Function): void {\r\n    throw new Error(\"Not implemented\");\r\n  }\r\n\r\n  getAIModel(id: number, format: DeliveryFormat): object {\r\n    throw new Error(\"Not implemented\");\r\n  }\r\n\r\n  applyModel(modeldata: object): void {\r\n    throw new Error(\"Not implemented\");\r\n  }\r\n\r\n}\r\n\r\n\r\n//AIModelUser läd da sofort das Model?\r\n\r\n\r\n  // wird aktuell nicht benutzt\r\n  // checkLogin(): boolean { }\r\n","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\State.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Language.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\ExplorerConnector.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\User.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\controller\\DeliveryController.tsx",["267","268"],"import { PageController } from \"./PageController\";\r\nimport { MainController } from \"./MainController\";\r\nimport { Page } from \"../view/pages/PageInterface\";\r\nimport { IState, States } from \"../view/pages/State\";\r\nimport { DeliveryPage } from \"../view/pages/DeliveryPage/index\";\r\n\r\nexport class DeliveryController implements PageController {\r\n\r\n    private page: Page;\r\n    private state: IState;\r\n\r\n    /**\r\n    * Konstruktor des Seitenverwalters. Registriert sich als Beobachter auf seiner Seite und setzt den start Status.\r\n    * @param currentProject Die momentanen Projectdaten für welches man ein Model ausliefern möchte. \r\n    */\r\n    constructor(currentProject: { projectID: number, projectName: string, choosenAIModelID: number; }) {\r\n        this.page = new DeliveryPage({});\r\n        this.page.attach(this);\r\n        this.state = this.page.getState()\r\n        this.state.currentProject = currentProject\r\n        this.page.setState(this.state)\r\n    }\r\n\r\n    /**\r\n    * Die Update Methode des Seitenverwalters.\r\n    */\r\n    update() {\r\n        this.state = this.page.getState();\r\n        switch (this.state.currentState) {\r\n            case States.DeliverWeb:\r\n                this.deliverAsWebApp();\r\n                break;\r\n            case States.NeedMessage:\r\n                this.page.setState(MainController.getInstance().getMessage(this.state.messages));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Holt sich aus dem Status alle angegebene Email-Adressen und gibt diese mit Daten zum Projekt an die Fassade welche eine Email an alle Adressen sendet.\r\n    * Der Inhalt der Email gibt zugriff auf das Modell zur klassifizierung.\r\n    */\r\n    deliverAsWebApp() {\r\n        //let emails: string[] = this.page.getEMails();\r\n        let emails: string[] = [\"Darius.Seiter@outlook.com\"]\r\n        //let text: string = MainController.getInstance().getFacade().getDeliverText();\r\n        let text: string = \"TEST\"\r\n        for (let index = 0; index < emails.length; index++) {\r\n            const element: string = emails[index];\r\n            //MainController.getInstance().getFacade().sendMail(element, this.state.currentProject);\r\n        }\r\n    }\r\n\r\n    deliverAsExe() {\r\n        //todo in Quality Controll\r\n    }\r\n}","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\controller\\VisualizationController.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\index.tsx",["269"],"import React from 'react';\r\nimport PubSub from 'pubsub-js';\r\nimport Title from '../../components/DataCollectionComponents/Title';\r\nimport Countdown from '../../components/DataCollectionComponents/Countdown';\r\nimport Diagram from '../../components/DataCollectionComponents/Diagram';\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from 'react-dom';\r\nimport { States } from '../State';\r\n\r\ntype Props = {\r\n};\r\n\r\nexport class DataCollectionPage extends React.Component<Props, State> implements Page {\r\n    state = new State;\r\n    observers: PageController[] = [];\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.finishCountdown();\r\n        const VDOM = (\r\n            <div>\r\n                <Title />\r\n                <Countdown />\r\n                <Diagram />\r\n            </div>\r\n        );\r\n        ReactDOM.render(VDOM, document.getElementById('root'));\r\n    }\r\n\r\n\r\n    /**\r\n     * Diese Methode braucht nur einmal aufzurufen, Countdown geht automatisch.\r\n     * @param countdownNumber Die Countdownzahl zu zeigen.\r\n     */\r\n    showCountdownNumber(leadTime: number) {\r\n        this.setState({ leadTime: leadTime });\r\n        PubSub.publish('startCounting', this.state.leadTime);\r\n    }\r\n\r\n    /**\r\n     * Prüft ob Countdown fertig ist und ändert den Zustand.\r\n     */\r\n    finishCountdown() {\r\n        PubSub.subscribe('finishCountdwon', () => {\r\n            this.setState({ currentState: States.NeedInstantDiagram });\r\n            this.notify();\r\n        }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Diese Methode sollte während Datenerfassung jede Sekunde von Controller aufgerufen werden, um Bild zu updaten.\r\n     * @param countdownNumber Die Countdownzahl zu zeigen\r\n     */\r\n    showDiagram(diagramSvg: string) {\r\n        this.setState({ diagramSvg: diagramSvg });\r\n        PubSub.publish('startDiagram', this.state.diagramSvg);\r\n    }\r\n\r\n    /**\r\n     * Die Methoden für Beobachtermuster\r\n     * @param observer Beobachter,nähmlich Controller\r\n     */\r\n    attach(observer: PageController) {\r\n        this.observers.push(observer);\r\n    }\r\n\r\n    detach(observer: PageController) {\r\n        const index = this.observers.indexOf(observer, 0);\r\n        if (index > -1) {\r\n            this.observers.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    notify() {\r\n        for (let index = 0; index < this.observers.length; index++) {\r\n            const element = this.observers[index];\r\n            element.update();\r\n        }\r\n    }\r\n\r\n    getState() {\r\n        return this.state;\r\n    }\r\n\r\n}",["270","271"],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Device.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Project.tsx",["272"],"import { AIModel } from \"./AIModel\";\r\nimport { DataSet } from \"./DataSet\";\r\nimport { SensorData } from \"./Sensor\";\r\nimport { Session } from \"./Session\";\r\nimport { Admin } from \"./User\";\r\n\r\n/**\r\n * Diese Klasse speichert alle Informationen zu einem Projekt.\r\n * Ein Projekt beinhaltet aufgezeichnete Datensätze (DataSet) sowie Informationen zu den Datensätzen.\r\n */\r\nexport class Project {\r\n  private id: number; //Die eindeutige Projekt ID\r\n  private name: string; //Der Name des Projektes\r\n  private session: Session; //Die Session in dem das Projekt arbeitet\r\n  private aiModel: AIModel[] = []; //Das AIModel von dem Projekt\r\n  private dataSet: DataSet[] = []; //Die Datensätze, die zu dem Projekt gehören\r\n  private currentDataSet?: DataSet; //Aktueller Datensatz\r\n\r\n  /**\r\n     * Eine bereits existierendes Projekt kann wie folgt in das Model geladen werden.\r\n     * @param projectID Die Projekt ID\r\n     * @param sessionID Die Session ID\r\n     * @param projectName Der Projektnamen\r\n     * @param admin Der Besitzer dieses Projekts für die Session\r\n     * @param aiModelID Die schon existierenden AIModel IDs\r\n     * @param dataSet Die schon existierenden Datensätze\r\n     */\r\n  constructor(projectID: number, sessionID: number, projectName: string, projectData?: {\r\n    aiModelID?: number[],\r\n    dataSet?: {\r\n      dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate: number,\r\n      dataRows: {\r\n        dataRowID: number, recordingStart: number,\r\n        dataRow: { value: number, relativeTime: number; }[];\r\n      }[],\r\n      label: { name: string, labelID: number, start: number, end: number; }[];\r\n    }[];\r\n  }) {\r\n    this.id = projectID;\r\n    this.name = projectName;\r\n    this.session = new Session(sessionID);\r\n    if (projectData != null) {\r\n      if (projectData.aiModelID != null) {\r\n        for (let i = 0; i < projectData.aiModelID.length; i++) {\r\n          this.aiModel.push(new AIModel(projectData.aiModelID[i]));\r\n        }\r\n      }\r\n      if (projectData.dataSet != null) {\r\n        for (let i = 0; i < projectData.dataSet.length; i++) {\r\n          this.dataSet.push(new DataSet(projectData.dataSet[i].dataRowSensors, projectData.dataSet[i].dataSetID, projectData.dataSet[i].dataSetName, projectData.dataSet[i].generateDate, projectData.dataSet[i].dataRows, projectData.dataSet[i].label));\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Gibt den Projektnamen zurück\r\n   */\r\n  getName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  /**\r\n   * Löscht den Datensatz mit der DatensatzID\r\n   * @param dataSetID die Datensatz ID\r\n   */\r\n  deleteDataSet(dataSetID: number): boolean {\r\n    for (let i = 0; i < this.dataSet.length; i++) {\r\n      if (this.dataSet[i].getID() === dataSetID) {\r\n        delete this.dataSet[i];\r\n        if (this.currentDataSet != null && this.currentDataSet.getID() === dataSetID) {\r\n          delete this.currentDataSet;\r\n        }\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Gibt die Projekt ID zurück.\r\n   */\r\n  getID(): number {\r\n    return this.id;\r\n  }\r\n\r\n\r\n  /**\r\n   * Erstellt einen neuen Datensatz und setzt diesen als aktuellen Datensatz.\r\n   * @param dataRowSensors die Sensoren, von denen die Daten ausgelesen werden\r\n   * @param dataSetID die eindeutige Datensatz ID\r\n   * @param dataSetName der Datensatznamen\r\n   * @param generateDate die Erstellungszeit von dem Datensatz\r\n   */\r\n  createDataSet(dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate?: number): void {\r\n    var dataSet: DataSet = new DataSet(dataRowSensors, dataSetID, dataSetName, generateDate);\r\n    this.dataSet.push(dataSet);\r\n    this.currentDataSet = dataSet;\r\n  }\r\n\r\n  /**\r\n   * Gibt die aktuelle Datensatz ID zurück, falls diese nicht existiert wird -1 zurück gegeben\r\n   */\r\n  getCurrentDataSetID(): number {\r\n    if (this.currentDataSet != null) {\r\n      return this.currentDataSet.getID();\r\n    }\r\n    return -1;\r\n\r\n  }\r\n\r\n  /**\r\n   * Liest von dem aktuellen Datensatz neue Sensordaten von der Datenreihe mit der Datenreihen ID\r\n   * @param dataRowID die Datenreihen ID, von der die Daten ausgelesen werden sollen.\r\n   * @returns die gelesenen Daten von der Datenreihe. Falls die Datenreihe nicht existiert oder kein aktueller Datensatz existiert, sind die Daten leer.\r\n   */\r\n  readDataPoint(dataRowID: number): { dataPoint?: { value: number, relativeTime: number; }; } {\r\n    if (this.currentDataSet != null) {\r\n      return this.currentDataSet.readDataPoint(dataRowID);\r\n    }\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Gibt von allen Datensätzen Informationen zurück\r\n   * @returns dataSetID ist die DatensatzID und dataSetName ist der Datensatzname\r\n   */\r\n  getDataSetMetas(): { dataSetID: number, dataSetName: string; }[] {\r\n    var dataSetMetas: { dataSetID: number, dataSetName: string; }[] = [];\r\n    for (let i = 0; i < this.dataSet.length; i++) {\r\n      dataSetMetas.push({ dataSetID: this.dataSet[i].getID(), dataSetName: this.dataSet[i].getName() });\r\n    }\r\n    return dataSetMetas;\r\n  }\r\n\r\n  /**\r\n   * Gibt die Datenreihen der Datensatz ID zurück und setzt diesen Datensatz als aktuellen Datensatz\r\n   * @param dataSetID die Datensatz ID von der die Datenreihen gelesen werden sollen\r\n   * @returns die Sensordaten von der Datenreihe\r\n   */\r\n  getDataRows(dataSetID: number): { dataRows?: { value: number, relativeTime: number; }[][]; } {\r\n    for (let i = 0; i < this.dataSet.length; i++) {\r\n      if (this.dataSet[i].getID() === dataSetID) {\r\n        this.currentDataSet = this.dataSet[i];\r\n        return { dataRows: this.dataSet[i].getDataRows() };\r\n      }\r\n    }\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Gibt die Datenreihen der aktuellen Datenreihe zurück\r\n   * @returns die Sensordaten von der Datenreihe\r\n   */\r\n  getCurrentDataRows(): { dataRows?: { value: number, relativeTime: number; }[][]; } {\r\n    if (this.currentDataSet != null) {\r\n      return { dataRows: this.currentDataSet.getDataRows() };\r\n    }\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Gibt die Session ID zurück\r\n   */\r\n  getSessionID(): number {\r\n    return this.session.getId();\r\n  }\r\n\r\n  /**\r\n   * Setzt dem Label mit der übergebenen ID neue Werte.\r\n   * @param start Ist die neue Startzeit des Labels.\r\n   * @param end Ist die neue Endzeit des Labels.\r\n   * @param labelID Die Label ID, welche überarbeitet werden soll.\r\n   * @param labelName Ist bei Angabe der neue Name des Labels.\r\n   * @returns falls das Label nicht existiert oder es kein aktuellen Datensatz gibt wird false zurück gegeben\r\n   */\r\n  createLabel(start: number, end: number, labelID: number, labelName?: string): boolean {\r\n    if (this.currentDataSet != null) {\r\n      return this.currentDataSet.setLabel(labelID, { start, end }, labelName);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  setLabel(labelID: number, span: { start: number, end: number; }, labelName?: string): boolean {\r\n    if (this.currentDataSet != null) {\r\n      return this.currentDataSet.setLabel(labelID, span, labelName);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  deleteLabel(labelID: number): boolean {\r\n    if (this.currentDataSet != null) {\r\n      return this.currentDataSet.deleteLabel(labelID);\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gibt alle Daten von allen Labeln vom aktuellen Datensatz zurück.\r\n   * @returns leer, falls kein aktueller Datensatz existiert\r\n   */\r\n  getLabels(): { labels?: { name: string, id: number, start: number, end: number; }[]; } {\r\n    if (this.currentDataSet != null) {\r\n      return { labels: this.currentDataSet.getLabels() };\r\n    }\r\n    return {};\r\n  }\r\n}","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\controller\\ModelCreationController.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\index.tsx",["273","274","275","276","277","278","279"],"import React, { Component } from 'react';\r\nimport AddEmailButton from '../../components/DeliveryComponents/AddEmailButton';\r\nimport DownloadButton from '../../components/DeliveryComponents/DownloadButton';\r\nimport EmailList from '../../components/DeliveryComponents/EmailList';\r\nimport HandleAllEmail from '../../components/DeliveryComponents/HandleAllEmail';\r\nimport SendButton from '../../components/DeliveryComponents/SendButton';\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from 'react-dom';\r\n\r\ntype Props = {\r\n};\r\n\r\nexport class DeliveryPage extends React.Component<Props, State> implements Page {\r\n\r\n\tstate = new State();\r\n\tobservers: PageController[] = [];\r\n\tconstructor(props: Props) {\r\n\t\tsuper(props);\r\n\t\tconst VDOM = (\r\n\t\t\t<div className=\"deliverypage\">\r\n\t\t\t\t<div className=\"emailList-wrap\">\r\n\t\t\t\t\t<AddEmailButton addEmail={this.addEmail} deleteEmail={this.deleteEmail} />\r\n\t\t\t\t\t<EmailList emails={this.state.emails} updateEmail={this.updateEmail} deleteEmail={this.deleteEmail} />\r\n\t\t\t\t\t<HandleAllEmail emails={this.state.emails} chooseAllEmail={this.chooseAllEmail} clearAllChosen={this.clearAllChosen} />\r\n\t\t\t\t</div>\r\n\t\t\t\t<DownloadButton />\r\n\t\t\t\t<SendButton />\r\n\t\t\t</div>\r\n\t\t);\r\n\t\tReactDOM.render(VDOM, document.getElementById('root'));\r\n\t}\r\n\r\n\tattach(observer: PageController) {\r\n\t\tthis.observers.push(observer);\r\n\t}\r\n\r\n\tdetach(observer: PageController) {\r\n\t\tconst index = this.observers.indexOf(observer, 0);\r\n\t\tif (index > -1) {\r\n\t\t\tthis.observers.splice(index, 1);\r\n\t\t}\r\n\t}\r\n\r\n\tnotify() {\r\n\t\tfor (let index = 0; index < this.observers.length; index++) {\r\n\t\t\tconst element = this.observers[index];\r\n\t\t\telement.update();\r\n\t\t}\r\n\t}\r\n\r\n\tgetState() {\r\n\t\treturn this.state;\r\n\t}\r\n\r\n\t//addEmail for add new Email\r\n\taddEmail = (emailObj: { id: string, address: string, chosen: boolean }) => {\r\n\t\t//get orignal emailList\r\n\r\n\t\t//add new one\r\n\t\tconst newEmails = [emailObj, ...this.state.emails];\r\n\t\t//update emailList\r\n\t\tthis.state.emails = newEmails\r\n\t};\r\n\r\n\t//updateEmail for update EmailList\r\n\tupdateEmail = (id: string, chosen: boolean) => {\r\n\t\t//get orignal EmailList\r\n\t\t//compare id\r\n\t\tconst newEmails = this.state.emails.map((emailObj) => {\r\n\t\t\tif (emailObj.id === id) return { ...emailObj, chosen };\r\n\t\t\telse return emailObj;\r\n\t\t});\r\n\t\tthis.state.emails = newEmails\r\n\t};\r\n\r\n\t//deleteEmail for delete emailObj\r\n\tdeleteEmail = (id: string) => {\r\n\t\t//get orignal emailList\r\n\t\t//delete emailObj with id\r\n\t\tconst newEmails = this.state.emails.filter((emailObj) => {\r\n\t\t\treturn emailObj.id !== id;\r\n\t\t});\r\n\t\t//update emailList\r\n\t\tthis.state.emails = newEmails\r\n\t};\r\n\r\n\t//checkAllEmail for all chosen email\r\n\tchooseAllEmail = (chosen: boolean) => {\r\n\t\t//get orignal emailList\r\n\t\t//traverse emailList\r\n\t\tconst newEmails = this.state.emails.map((emailObj) => {\r\n\t\t\treturn { ...emailObj, chosen };\r\n\t\t});\r\n\t\t//update emailList\r\n\t\tthis.state.emails = newEmails\r\n\t};\r\n\r\n\t//clearAllChosen for delete all emails\r\n\tclearAllChosen = () => {\r\n\t\t//get orignal emailList\r\n\t\tconst { emails } = this.state;\r\n\t\t//filter datas\r\n\t\tconst newEmails = this.state.emails.filter((emailObj) => {\r\n\t\t\treturn !emailObj.chosen;\r\n\t\t});\r\n\t\t//update emailLists\r\n\t\tthis.state.emails = newEmails\r\n\t};\r\n\r\n}\r\n","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\index.tsx",["280","281","282","283"],"import React, { Component } from 'react'\r\nimport TrainButton from '../../components/ModelCreationComponents/TrainButton'\r\nimport ImageList from '../../components/VisualizationComponents/ImageList'\r\nimport eximage1 from '../../images/exImage1.svg'\r\nimport './VisualizationPage.css'\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport { MainController } from '../../../controller/MainController';\r\nimport ReactDOM from 'react-dom';\r\n\r\ntype Props = {\r\n};\r\n\r\nexport class VisualizationPage extends React.Component<Props, State> implements Page {\r\n    state = new State()\r\n\r\n    observers: PageController[] = [];\r\n    constructor(props: Props) {\r\n        super(props);\r\n        const VDOM = (\r\n            <div className=\"visualizationpage\">\r\n                <img src={this.state.imageSrc} alt=\"2\" className=\"showImage\" ></img>\r\n                <ImageList setImageSrc={this.setImageSrc} />\r\n                <TrainButton />\r\n            </div>\r\n        );\r\n        ReactDOM.render(VDOM, document.getElementById('root'));\r\n    }\r\n\r\n\r\n    attach(observer: PageController) {\r\n        this.observers.push(observer);\r\n    }\r\n\r\n    detach(observer: PageController) {\r\n        const index = this.observers.indexOf(observer, 0);\r\n        if (index > -1) {\r\n            this.observers.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    notify() {\r\n        for (let index = 0; index < this.observers.length; index++) {\r\n            const element = this.observers[index];\r\n            element.update();\r\n        }\r\n    }\r\n\r\n    getState() {\r\n        return this.state;\r\n    }\r\n\r\n\r\n    setImageSrc = (newSrc: string) => {\r\n        const newState = { imageSrc: newSrc }\r\n        this.setState({ imageSrc: newSrc })\r\n    }\r\n\r\n}\r\n","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\State.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Session.tsx",["284"],"import { Admin, User } from \"./User\";\r\n\r\n/**\r\n * Diese Klasse Speichert die Session informationen\r\n */\r\nexport class Session {\r\n  private id: number; //Die eindeutige ID der Session\r\n  private connectedUser: User[] = []; //Die User die mit der Projekt der Session interagieren\r\n\r\n  /**\r\n   * Erstellt eine Session\r\n   * @param id Diese ID muss global eindeutig sein\r\n   * @param admin Der Admin, dem diese Session gehört\r\n   */\r\n  constructor(id: number) {\r\n    this.id = id;\r\n  }\r\n\r\n  /**\r\n   * Fügt eine User als Verbundener User zu der Session hinzu\r\n   * @param user Der User, der hinzugefügt wird\r\n   */\r\n  connectUser(user: User): void {\r\n    this.connectedUser.push(user);\r\n  }\r\n\r\n  /**\r\n   * Meldet einen User von der aktuellen Session ab\r\n   * @param user Der User, der abgemeldet werdern soll\r\n   */\r\n  disconnectUser(user: User): boolean {\r\n    for (let i = 0; i < this.connectedUser.length; i++) {\r\n      if (this.connectedUser[i].getID() === user.getID()) {\r\n        delete this.connectedUser[i];\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Gibt von allen verbundenen Usern die ID und den Namen zurück\r\n   */\r\n  getConnectedUsers(): { userID: number, userName: string; }[] {\r\n    var users: { userID: number, userName: string; }[] = [];\r\n    for (let i = 0; i < this.connectedUser.length; i++) {\r\n      users.push({ userID: this.connectedUser[i].getID(), userName: this.connectedUser[i].getName() });\r\n    }\r\n    return users;\r\n  }\r\n\r\n  /**\r\n   * Gibt die Session ID zurück\r\n   */\r\n  getId(): number {\r\n    return this.id;\r\n  }\r\n}","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\AIModel.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Sensor.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\DataSet.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\State.tsx",["285"],"export class State {\r\n  currentState: States = States.NeedMessage;\r\n  languageCode: string = \"de\";\r\n  messageIDs: number[] = [];\r\n  messages: string[] = [];\r\n  emails: { id: string, address: string, chosen: boolean }[] = [{ id: 'ex', address: 'example', chosen: false }];\r\n\r\n}\r\n\r\n\r\nexport enum States {\r\n  NeedMessage,\r\n  NeedData,\r\n  GotData,\r\n  ChangePage,\r\n  Download,\r\n  Send\r\n}\r\n","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\index.tsx",["286"],"import React, { Component } from 'react'\r\nimport DatasetList from '../../components/ModelCreationComponents/DatasetList'\r\nimport AddDatasetButton from '../../components/ModelCreationComponents/AddDatasetButton'\r\nimport ImputationList from '../../components/ModelCreationComponents/ImputationList'\r\nimport NormalizationList from '../../components/ModelCreationComponents/NormalizationList'\r\nimport FeatureList from '../../components/ModelCreationComponents/FeatureList'\r\nimport ModelTypeList from '../../components/ModelCreationComponents/ModelTypeList'\r\nimport TrainButton from '../../components/ModelCreationComponents/TrainButton'\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from 'react-dom';\r\nimport './ModelCreationPage.css'\r\n\r\ntype Props = {\r\n};\r\n\r\n\r\nexport class ModelCreationPage extends React.Component<Props, State> implements Page {\r\n\tstate = new State();\r\n\tobservers: PageController[] = [];\r\n\tconstructor(props: Props) {\r\n\t\tsuper(props);\r\n\t\tconst VDOM = (\r\n\t\t\t<div className=\"modelcreationpage\">\r\n\t\t\t\t<div className=\"checklist\">\r\n\t\t\t\t\t<h3>Datasets</h3>\r\n\t\t\t\t\t<DatasetList datasets={this.state.datasets} updateDataset={this.updateDataset} deleteDataset={this.deleteDataset} />\r\n\t\t\t\t\t<AddDatasetButton datasets={this.state.datasets} addDataset={this.addDataset} deleteDataset={this.deleteDataset} />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"checklist\"><ImputationList /><NormalizationList /></div>\r\n\t\t\t\t<div className=\"checklist\"><FeatureList /><ModelTypeList /></div>\r\n\t\t\t\t<TrainButton />\r\n\t\t\t</div>\r\n\t\t);\r\n\t\tReactDOM.render(VDOM, document.getElementById('root'));\r\n\t}\r\n\r\n\tattach(observer: PageController) {\r\n\t\tthis.observers.push(observer);\r\n\t}\r\n\r\n\tdetach(observer: PageController) {\r\n\t\tconst index = this.observers.indexOf(observer, 0);\r\n\t\tif (index > -1) {\r\n\t\t\tthis.observers.splice(index, 1);\r\n\t\t}\r\n\t}\r\n\r\n\tnotify() {\r\n\t\tfor (let index = 0; index < this.observers.length; index++) {\r\n\t\t\tconst element = this.observers[index];\r\n\t\t\telement.update();\r\n\t\t}\r\n\t}\r\n\r\n\tgetState() {\r\n\t\treturn this.state;\r\n\t}\r\n\r\n\t//addDataset for add new Dataset\r\n\taddDataset = (datasetObj: { id: string, name: string, chosen: boolean }) => {\r\n\t\t//get orignal datasetList\r\n\t\tconst { datasets } = this.state\r\n\t\t//add new one\r\n\t\tconst newDatasets = [datasetObj, ...datasets]\r\n\t\t//update datasetList\r\n\t\tthis.setState({ datasets: newDatasets })\r\n\t}\r\n\r\n\t//updateDataset for update DatasetList\r\n\tupdateDataset = (id: string, chosen: boolean) => {\r\n\t\t//get orignal DatasetList\r\n\t\tconst { datasets } = this.state\r\n\t\t//compare id\r\n\t\tconst newDatasets = datasets.map((datasetObj) => {\r\n\t\t\tif (datasetObj.id === id) return { ...datasetObj, chosen }\r\n\t\t\telse return datasetObj\r\n\t\t})\r\n\t\tthis.setState({ datasets: newDatasets })\r\n\t}\r\n\r\n\t//deleteDataset for delete datasetObj\r\n\tdeleteDataset = (id: string) => {\r\n\t\t//get orignal datasetList\r\n\t\tconst { datasets } = this.state\r\n\t\t//delete datasetObj with id\r\n\t\tconst newDatasets = datasets.filter((datasetObj) => {\r\n\t\t\treturn datasetObj.id !== id\r\n\t\t})\r\n\t\t//update datasetList\r\n\t\tthis.setState({ datasets: newDatasets })\r\n\t}\r\n\r\n}\r\n","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\State.tsx",["287"],"import eximage1 from '../../images/exImage1.svg'\r\nexport class State {\r\n  currentState: States = States.NeedMessage;\r\n  languageCode: string = \"de\";\r\n  messageIDs: number[] = [];\r\n  messages: string[] = [];\r\n  imageSrc: string = eximage1\r\n}\r\n\r\n\r\nexport enum States {\r\n  NeedMessage,\r\n  NeedData,\r\n  GotData,\r\n  ChangePage,\r\n  Finish\r\n}\r\n","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Countdown\\index.tsx",["288","289","290","291"],"import { Component, useState, useEffect, useRef } from 'react';\r\nimport PubSub from 'pubsub-js';\r\n\r\nexport default class Countdown extends Component {\r\n    state = { countdownNumber: 5, startCounting: false, chosenSensors: \"\" };\r\n\r\n    componentDidMount() {\r\n        PubSub.subscribe('startCounting', (leadTime: number) => {\r\n            this.setState({ countdownNumber: leadTime, startCounting: true });\r\n        }\r\n        );\r\n\r\n        setInterval(() => {\r\n            this.updateCounting();\r\n        }, 1000);\r\n    }\r\n\r\n    updateCounting() {\r\n        this.setState({ countdownNumber: this.state.countdownNumber - 1 });\r\n        if (this.state.countdownNumber == 0) {\r\n            this.setState({ startCounting: false });\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Bereit machen zur Aufnahme!</h2>\r\n                <h2>{this.state.startCounting ? this.state.countdownNumber : \"\"}</h2>\r\n                <h2>Verwendete Sensoren:<br />{this.state.chosenSensors}</h2>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Title\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Diagram\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\DataRow.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Label.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\SendButton\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\DownloadButton\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\TrainButton\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\State.tsx",["292"],"export class State {\r\n  currentState: States = States.NeedMessage;\r\n  languageCode: string = \"de\";\r\n  messageIDs: number[] = [];\r\n  messages: string[] = [];\r\n  datasets: { id: string, name: string, chosen: boolean }[] = [];\r\n  features: { name: string, chosen: boolean }[] = [];\r\n  imputations: { name: string, chosen: boolean }[] = [];\r\n  modeltypes: { name: string, chosen: boolean }[] = [];\r\n  normalizations: { name: string, chosen: boolean }[] = [];\r\n\r\n}\r\n\r\n\r\nexport enum States {\r\n  NeedMessage,\r\n  NeedData,\r\n  GotData,\r\n  ChangePage,\r\n  NeedParameter,\r\n  StartTrain\r\n}\r\n","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\AddEmailButton\\index.jsx",[],["293","294"],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\HandleAllEmail\\index.jsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\EmailList\\index.jsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\ImageList\\index.jsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\TimeSpan.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\DataPoint.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\ImputationList\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\FeatureList\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\NormalizationList\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\ModelTypeList\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\DatasetList\\index.jsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\AddDatasetButton\\index.jsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\EmailItem\\index.jsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\DatasetItem\\index.jsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\FinishPage\\index.tsx",["295","296","297"],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\FinishPage\\State.tsx",["298"],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Input\\Label\\AddLabel\\AddLabelForm.tsx",["299","300","301"],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Input\\Label\\LabelList\\LabelList.tsx",["302","303","304","305"],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Input\\Label\\LabelItem\\LabelItem.tsx",["306","307","308","309"],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Body\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Title\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\index.tsx",["310","311"],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\State.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Input\\index.tsx",["312","313"],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Title\\index.tsx",[],{"ruleId":"314","severity":1,"message":"315","line":1,"column":8,"nodeType":"316","messageId":"317","endLine":1,"endColumn":13},{"ruleId":"314","severity":1,"message":"318","line":2,"column":8,"nodeType":"316","messageId":"317","endLine":2,"endColumn":16},{"ruleId":"319","replacedBy":"320"},{"ruleId":"321","replacedBy":"322"},{"ruleId":"314","severity":1,"message":"323","line":5,"column":10,"nodeType":"316","messageId":"317","endLine":5,"endColumn":16},{"ruleId":"314","severity":1,"message":"324","line":7,"column":37,"nodeType":"316","messageId":"317","endLine":7,"endColumn":45},{"ruleId":"314","severity":1,"message":"325","line":7,"column":47,"nodeType":"316","messageId":"317","endLine":7,"endColumn":57},{"ruleId":"314","severity":1,"message":"326","line":7,"column":59,"nodeType":"316","messageId":"317","endLine":7,"endColumn":69},{"ruleId":"314","severity":1,"message":"327","line":7,"column":71,"nodeType":"316","messageId":"317","endLine":7,"endColumn":78},{"ruleId":"328","severity":1,"message":"329","line":46,"column":13,"nodeType":"330","messageId":"331","endLine":48,"endColumn":23},{"ruleId":"328","severity":1,"message":"329","line":58,"column":13,"nodeType":"330","messageId":"331","endLine":60,"endColumn":23},{"ruleId":"314","severity":1,"message":"332","line":5,"column":10,"nodeType":"316","messageId":"317","endLine":5,"endColumn":17},{"ruleId":"314","severity":1,"message":"333","line":49,"column":13,"nodeType":"316","messageId":"317","endLine":49,"endColumn":25},{"ruleId":"314","severity":1,"message":"334","line":51,"column":19,"nodeType":"316","messageId":"317","endLine":51,"endColumn":34},{"ruleId":"335","severity":1,"message":"336","line":16,"column":13,"nodeType":"337","messageId":"338","endLine":16,"endColumn":22,"fix":"339"},{"ruleId":"319","replacedBy":"340"},{"ruleId":"321","replacedBy":"341"},{"ruleId":"314","severity":1,"message":"342","line":5,"column":10,"nodeType":"316","messageId":"317","endLine":5,"endColumn":15},{"ruleId":"314","severity":1,"message":"343","line":1,"column":17,"nodeType":"316","messageId":"317","endLine":1,"endColumn":26},{"ruleId":"344","severity":1,"message":"345","line":64,"column":3,"nodeType":"346","endLine":64,"endColumn":13},{"ruleId":"344","severity":1,"message":"345","line":75,"column":3,"nodeType":"346","endLine":75,"endColumn":13},{"ruleId":"344","severity":1,"message":"345","line":86,"column":3,"nodeType":"346","endLine":86,"endColumn":13},{"ruleId":"344","severity":1,"message":"345","line":97,"column":3,"nodeType":"346","endLine":97,"endColumn":13},{"ruleId":"314","severity":1,"message":"347","line":103,"column":11,"nodeType":"316","messageId":"317","endLine":103,"endColumn":17},{"ruleId":"344","severity":1,"message":"345","line":109,"column":3,"nodeType":"346","endLine":109,"endColumn":13},{"ruleId":"314","severity":1,"message":"343","line":1,"column":17,"nodeType":"316","messageId":"317","endLine":1,"endColumn":26},{"ruleId":"314","severity":1,"message":"348","line":4,"column":8,"nodeType":"316","messageId":"317","endLine":4,"endColumn":16},{"ruleId":"314","severity":1,"message":"349","line":9,"column":10,"nodeType":"316","messageId":"317","endLine":9,"endColumn":24},{"ruleId":"314","severity":1,"message":"350","line":56,"column":15,"nodeType":"316","messageId":"317","endLine":56,"endColumn":23},{"ruleId":"314","severity":1,"message":"342","line":1,"column":10,"nodeType":"316","messageId":"317","endLine":1,"endColumn":15},{"ruleId":"351","severity":1,"message":"352","line":2,"column":26,"nodeType":"316","messageId":"353","endLine":2,"endColumn":32},{"ruleId":"314","severity":1,"message":"343","line":1,"column":17,"nodeType":"316","messageId":"317","endLine":1,"endColumn":26},{"ruleId":"351","severity":1,"message":"352","line":3,"column":26,"nodeType":"316","messageId":"353","endLine":3,"endColumn":32},{"ruleId":"314","severity":1,"message":"354","line":1,"column":21,"nodeType":"316","messageId":"317","endLine":1,"endColumn":29},{"ruleId":"314","severity":1,"message":"355","line":1,"column":31,"nodeType":"316","messageId":"317","endLine":1,"endColumn":40},{"ruleId":"314","severity":1,"message":"356","line":1,"column":42,"nodeType":"316","messageId":"317","endLine":1,"endColumn":48},{"ruleId":"357","severity":1,"message":"358","line":20,"column":40,"nodeType":"359","messageId":"331","endLine":20,"endColumn":42},{"ruleId":"351","severity":1,"message":"352","line":2,"column":26,"nodeType":"316","messageId":"353","endLine":2,"endColumn":32},{"ruleId":"319","replacedBy":"320"},{"ruleId":"321","replacedBy":"322"},{"ruleId":"314","severity":1,"message":"343","line":1,"column":17,"nodeType":"316","messageId":"317","endLine":1,"endColumn":26},{"ruleId":"314","severity":1,"message":"360","line":6,"column":10,"nodeType":"316","messageId":"317","endLine":6,"endColumn":14},{"ruleId":"314","severity":1,"message":"361","line":10,"column":10,"nodeType":"316","messageId":"317","endLine":10,"endColumn":16},{"ruleId":"351","severity":1,"message":"352","line":2,"column":26,"nodeType":"316","messageId":"353","endLine":2,"endColumn":32},{"ruleId":"314","severity":1,"message":"343","line":1,"column":17,"nodeType":"316","messageId":"317","endLine":1,"endColumn":26},{"ruleId":"314","severity":1,"message":"354","line":1,"column":28,"nodeType":"316","messageId":"317","endLine":1,"endColumn":36},{"ruleId":"362","severity":1,"message":"363","line":9,"column":5,"nodeType":"364","messageId":"365","endLine":11,"endColumn":6},{"ruleId":"314","severity":1,"message":"343","line":1,"column":17,"nodeType":"316","messageId":"317","endLine":1,"endColumn":26},{"ruleId":"314","severity":1,"message":"366","line":2,"column":8,"nodeType":"316","messageId":"317","endLine":2,"endColumn":17},{"ruleId":"362","severity":1,"message":"363","line":11,"column":5,"nodeType":"364","messageId":"365","endLine":13,"endColumn":6},{"ruleId":"367","severity":1,"message":"368","line":24,"column":110,"nodeType":"369","messageId":"370","endLine":24,"endColumn":112},{"ruleId":"314","severity":1,"message":"343","line":1,"column":17,"nodeType":"316","messageId":"317","endLine":1,"endColumn":26},{"ruleId":"314","severity":1,"message":"371","line":2,"column":10,"nodeType":"316","messageId":"317","endLine":2,"endColumn":15},{"ruleId":"314","severity":1,"message":"372","line":2,"column":17,"nodeType":"316","messageId":"317","endLine":2,"endColumn":28},{"ruleId":"362","severity":1,"message":"363","line":9,"column":5,"nodeType":"364","messageId":"365","endLine":11,"endColumn":6},{"ruleId":"314","severity":1,"message":"343","line":1,"column":17,"nodeType":"316","messageId":"317","endLine":1,"endColumn":26},{"ruleId":"344","severity":1,"message":"345","line":48,"column":13,"nodeType":"346","endLine":48,"endColumn":23},{"ruleId":"357","severity":1,"message":"358","line":45,"column":50,"nodeType":"359","messageId":"331","endLine":45,"endColumn":52},{"ruleId":"357","severity":1,"message":"358","line":64,"column":44,"nodeType":"359","messageId":"331","endLine":64,"endColumn":46},"@typescript-eslint/no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","'ReactDOM' is defined but never used.","no-native-reassign",["373"],"no-negated-in-lhs",["374"],"'IState' is defined but never used.","'QRNumber' is defined but never used.","'QRAlphaNum' is defined but never used.","'QR8BitByte' is defined but never used.","'QRKanji' is defined but never used.","no-duplicate-case","Duplicate case label.","SwitchCase","unexpected","'Session' is defined but never used.","'text' is assigned a value but never used.","'element' is assigned a value but never used.","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"375","text":"376"},["373"],["374"],"'Admin' is defined but never used.","'Component' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'emails' is assigned a value but never used.","'eximage1' is defined but never used.","'MainController' is defined but never used.","'newState' is assigned a value but never used.","@typescript-eslint/no-use-before-define","'States' was used before it was defined.","noUseBeforeDefine","'useState' is defined but never used.","'useEffect' is defined but never used.","'useRef' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'Page' is defined but never used.","'States' is defined but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'PropTypes' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Label' is defined but never used.","'DeleteLabel' is defined but never used.","no-global-assign","no-unsafe-negation",[634,634],"()"]