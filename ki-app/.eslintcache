<<<<<<< HEAD
[{"D:\\main1\\Typescript-Frontend\\ki-app\\src\\index.tsx":"1","D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\MainController.tsx":"2","D:\\main1\\Typescript-Frontend\\ki-app\\src\\reportWebVitals.ts":"3","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Facade.tsx":"4","D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\ReferringController.tsx":"5","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\State.tsx":"6","D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\StartController.tsx":"7","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\DatabaseConnector.tsx":"8","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\AIBuilder.tsx":"9","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Language.tsx":"10","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\User.tsx":"11","D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\DeliveryController.tsx":"12","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\AIDistributor.tsx":"13","D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\VisualizationController.tsx":"14","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\index.tsx":"15","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\DeviceData.tsx":"16","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Project.tsx":"17","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\index.tsx":"18","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\DeliveryFormat.tsx":"19","D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\ModelCreationController.tsx":"20","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\index.tsx":"21","D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\SensorManager.tsx":"22","D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\DataCollectionController.tsx":"23","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\index.tsx":"24","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\State.tsx":"25","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\SensorData.tsx":"26","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\AIModel.tsx":"27","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\DataSet.tsx":"28","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Session.tsx":"29","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\State.tsx":"30","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\index.tsx":"31","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\State.tsx":"32","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\State.tsx":"33","D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\FinishController.tsx":"34","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\index.tsx":"35","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ConstantsText\\index.tsx":"36","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\NewProjectButton\\index.tsx":"37","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoginWindow\\index.tsx":"38","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoadModelButton\\index.tsx":"39","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\DownloadButton\\index.tsx":"40","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\EmailList\\index.tsx":"41","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\DataRow.tsx":"42","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Label.tsx":"43","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\FinishButton\\index.tsx":"44","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\State.tsx":"45","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\DiagramList\\index.jsx":"46","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Title\\index.tsx":"47","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Input\\index.tsx":"48","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\State.tsx":"49","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\TimeSpan.tsx":"50","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\DataPoint.tsx":"51","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\Train\\index.tsx":"52","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Title\\index.tsx":"53","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LinkText\\index.tsx":"54","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\QRImage\\index.tsx":"55","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ChangeToVisuBtn\\index.tsx":"56","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Diagram\\index.jsx":"57","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ProjectList\\index.tsx":"58","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Countdown\\index.tsx":"59","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ModelList\\index.tsx":"60","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\index.tsx":"61","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\reportWebVitals.ts":"62","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\MainController.tsx":"63","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\ReferringController.tsx":"64","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Facade.tsx":"65","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\State.tsx":"66","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\StartController.tsx":"67","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\VisualizationController.tsx":"68","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\DeliveryController.tsx":"69","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\index.tsx":"70","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DatabaseConnector.tsx":"71","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\User.tsx":"72","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\AIBuilder.tsx":"73","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\AIDistributor.tsx":"74","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Language.tsx":"75","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\DataCollectionController.tsx":"76","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\SensorManager.tsx":"77","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\index.tsx":"78","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\ModelCreationController.tsx":"79","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\index.tsx":"80","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\State.tsx":"81","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DeviceData.tsx":"82","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Project.tsx":"83","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\index.tsx":"84","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DeliveryFormat.tsx":"85","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\State.tsx":"86","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\FinishController.tsx":"87","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\index.tsx":"88","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ConstantsText\\index.tsx":"89","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\NewProjectButton\\index.tsx":"90","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoginWindow\\index.tsx":"91","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoadModelButton\\index.tsx":"92","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\State.tsx":"93","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\index.tsx":"94","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\SensorData.tsx":"95","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\AIModel.tsx":"96","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Session.tsx":"97","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DataSet.tsx":"98","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\State.tsx":"99","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Title\\index.tsx":"100","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Input\\index.tsx":"101","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\State.tsx":"102","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\DownloadButton\\index.tsx":"103","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\EmailList\\index.tsx":"104","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\FinishButton\\index.tsx":"105","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\State.tsx":"106","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DataRow.tsx":"107","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Label.tsx":"108","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\DiagramList\\index.jsx":"109","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Title\\index.tsx":"110","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Countdown\\index.tsx":"111","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Diagram\\index.jsx":"112","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\QRImage\\index.tsx":"113","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LinkText\\index.tsx":"114","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ChangeToVisuBtn\\index.tsx":"115","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ProjectList\\index.tsx":"116","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\Train\\index.tsx":"117","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DataPoint.tsx":"118","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\TimeSpan.tsx":"119","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ModelList\\index.tsx":"120"},{"size":419,"mtime":1614549621124,"results":"121","hashOfConfig":"122"},{"size":3595,"mtime":1614549620545,"results":"123","hashOfConfig":"122"},{"size":440,"mtime":1613136674313,"results":"124","hashOfConfig":"122"},{"size":17283,"mtime":1614786272216,"results":"125","hashOfConfig":"122"},{"size":7640,"mtime":1615163418350,"results":"126","hashOfConfig":"122"},{"size":4178,"mtime":1615244694981,"results":"127","hashOfConfig":"122"},{"size":3772,"mtime":1615240516630,"results":"128","hashOfConfig":"122"},{"size":11096,"mtime":1614549621732,"results":"129","hashOfConfig":"122"},{"size":4493,"mtime":1614786272172,"results":"130","hashOfConfig":"122"},{"size":1875,"mtime":1613496972051,"results":"131","hashOfConfig":"122"},{"size":14302,"mtime":1615210675537,"results":"132","hashOfConfig":"122"},{"size":2538,"mtime":1614549620412,"results":"133","hashOfConfig":"122"},{"size":2497,"mtime":1614549621376,"results":"134","hashOfConfig":"122"},{"size":2703,"mtime":1614622824668,"results":"135","hashOfConfig":"122"},{"size":6513,"mtime":1615162041311,"results":"136","hashOfConfig":"122"},{"size":2085,"mtime":1614549621772,"results":"137","hashOfConfig":"122"},{"size":7252,"mtime":1614549621875,"results":"138","hashOfConfig":"122"},{"size":1772,"mtime":1614818312628,"results":"139","hashOfConfig":"122"},{"size":214,"mtime":1613141165634,"results":"140","hashOfConfig":"122"},{"size":2770,"mtime":1614622852933,"results":"141","hashOfConfig":"122"},{"size":3812,"mtime":1615254909453,"results":"142","hashOfConfig":"122"},{"size":9878,"mtime":1615287870865,"results":"143","hashOfConfig":"122"},{"size":2324,"mtime":1615240516666,"results":"144","hashOfConfig":"122"},{"size":2123,"mtime":1615218578518,"results":"145","hashOfConfig":"122"},{"size":731,"mtime":1614549623768,"results":"146","hashOfConfig":"122"},{"size":1533,"mtime":1614549621955,"results":"147","hashOfConfig":"122"},{"size":485,"mtime":1613141165378,"results":"148","hashOfConfig":"122"},{"size":6044,"mtime":1614549621668,"results":"149","hashOfConfig":"122"},{"size":1574,"mtime":1614549622013,"results":"150","hashOfConfig":"122"},{"size":433,"mtime":1614549624033,"results":"151","hashOfConfig":"122"},{"size":2158,"mtime":1614820710782,"results":"152","hashOfConfig":"122"},{"size":276,"mtime":1613603444888,"results":"153","hashOfConfig":"122"},{"size":584,"mtime":1615163418562,"results":"154","hashOfConfig":"122"},{"size":3834,"mtime":1615218578514,"results":"155","hashOfConfig":"122"},{"size":4302,"mtime":1615294900413,"results":"156","hashOfConfig":"122"},{"size":232,"mtime":1615154918957,"results":"157","hashOfConfig":"122"},{"size":1341,"mtime":1615162173829,"results":"158","hashOfConfig":"122"},{"size":3593,"mtime":1615161260300,"results":"159","hashOfConfig":"122"},{"size":737,"mtime":1615163206213,"results":"160","hashOfConfig":"122"},{"size":363,"mtime":1613603971738,"results":"161","hashOfConfig":"122"},{"size":5962,"mtime":1614820752679,"results":"162","hashOfConfig":"122"},{"size":2606,"mtime":1614549621605,"results":"163","hashOfConfig":"122"},{"size":1787,"mtime":1613141165915,"results":"164","hashOfConfig":"122"},{"size":366,"mtime":1613498190236,"results":"165","hashOfConfig":"122"},{"size":693,"mtime":1614627362296,"results":"166","hashOfConfig":"122"},{"size":5469,"mtime":1615254982472,"results":"167","hashOfConfig":"122"},{"size":1002,"mtime":1613136677280,"results":"168","hashOfConfig":"122"},{"size":4029,"mtime":1615210675570,"results":"169","hashOfConfig":"122"},{"size":524,"mtime":1615244694963,"results":"170","hashOfConfig":"122"},{"size":1370,"mtime":1613141166127,"results":"171","hashOfConfig":"122"},{"size":946,"mtime":1614549621495,"results":"172","hashOfConfig":"122"},{"size":10713,"mtime":1614818312572,"results":"173","hashOfConfig":"122"},{"size":1002,"mtime":1613315191905,"results":"174","hashOfConfig":"122"},{"size":699,"mtime":1614812784997,"results":"175","hashOfConfig":"122"},{"size":551,"mtime":1614872666478,"results":"176","hashOfConfig":"122"},{"size":433,"mtime":1615163206213,"results":"177","hashOfConfig":"122"},{"size":4012,"mtime":1615254909443,"results":"178","hashOfConfig":"122"},{"size":3411,"mtime":1615197297982,"results":"179","hashOfConfig":"122"},{"size":2034,"mtime":1615287870854,"results":"180","hashOfConfig":"122"},{"size":1855,"mtime":1614818019311,"results":"181","hashOfConfig":"122"},{"size":419,"mtime":1613977999233,"results":"182","hashOfConfig":"183"},{"size":440,"mtime":1613146123200,"results":"184","hashOfConfig":"183"},{"size":3595,"mtime":1614783818423,"results":"185","hashOfConfig":"183"},{"size":7640,"mtime":1614873009534,"results":"186","hashOfConfig":"183"},{"size":17283,"mtime":1614872326148,"results":"187","hashOfConfig":"183"},{"size":4178,"mtime":1615214185441,"results":"188","hashOfConfig":"183"},{"size":3772,"mtime":1615295129163,"results":"189","hashOfConfig":"183"},{"size":2703,"mtime":1614783818426,"results":"190","hashOfConfig":"183"},{"size":2538,"mtime":1614783818422,"results":"191","hashOfConfig":"183"},{"size":6513,"mtime":1615196413917,"results":"192","hashOfConfig":"183"},{"size":11096,"mtime":1613929945461,"results":"193","hashOfConfig":"183"},{"size":14302,"mtime":1615198101869,"results":"194","hashOfConfig":"183"},{"size":4493,"mtime":1614786250117,"results":"195","hashOfConfig":"183"},{"size":2497,"mtime":1613978481034,"results":"196","hashOfConfig":"183"},{"size":1875,"mtime":1613491631620,"results":"197","hashOfConfig":"183"},{"size":2324,"mtime":1615295129161,"results":"198","hashOfConfig":"183"},{"size":10142,"mtime":1615299626999,"results":"199","hashOfConfig":"183"},{"size":2123,"mtime":1615295129167,"results":"200","hashOfConfig":"183"},{"size":2770,"mtime":1614783818424,"results":"201","hashOfConfig":"183"},{"size":1772,"mtime":1614871105986,"results":"202","hashOfConfig":"183"},{"size":731,"mtime":1614783758408,"results":"203","hashOfConfig":"183"},{"size":2085,"mtime":1613978481015,"results":"204","hashOfConfig":"183"},{"size":7252,"mtime":1613922813067,"results":"205","hashOfConfig":"183"},{"size":3812,"mtime":1615295129168,"results":"206","hashOfConfig":"183"},{"size":214,"mtime":1613280191746,"results":"207","hashOfConfig":"183"},{"size":584,"mtime":1615218187172,"results":"208","hashOfConfig":"183"},{"size":3834,"mtime":1615295129162,"results":"209","hashOfConfig":"183"},{"size":4319,"mtime":1615299626999,"results":"210","hashOfConfig":"183"},{"size":232,"mtime":1615196413911,"results":"211","hashOfConfig":"183"},{"size":1341,"mtime":1615196413915,"results":"212","hashOfConfig":"183"},{"size":3593,"mtime":1615196413914,"results":"213","hashOfConfig":"183"},{"size":737,"mtime":1615196413912,"results":"214","hashOfConfig":"183"},{"size":276,"mtime":1613662337789,"results":"215","hashOfConfig":"183"},{"size":2158,"mtime":1614871105987,"results":"216","hashOfConfig":"183"},{"size":1533,"mtime":1613978420067,"results":"217","hashOfConfig":"183"},{"size":485,"mtime":1613280191739,"results":"218","hashOfConfig":"183"},{"size":1574,"mtime":1613978657736,"results":"219","hashOfConfig":"183"},{"size":6044,"mtime":1613978481033,"results":"220","hashOfConfig":"183"},{"size":433,"mtime":1613986123505,"results":"221","hashOfConfig":"183"},{"size":1002,"mtime":1613146123233,"results":"222","hashOfConfig":"183"},{"size":4029,"mtime":1615200316847,"results":"223","hashOfConfig":"183"},{"size":530,"mtime":1615298712413,"results":"224","hashOfConfig":"183"},{"size":363,"mtime":1613662337782,"results":"225","hashOfConfig":"183"},{"size":5962,"mtime":1614871105979,"results":"226","hashOfConfig":"183"},{"size":366,"mtime":1613662337788,"results":"227","hashOfConfig":"183"},{"size":693,"mtime":1614783818432,"results":"228","hashOfConfig":"183"},{"size":2606,"mtime":1613922814746,"results":"229","hashOfConfig":"183"},{"size":1787,"mtime":1613280192336,"results":"230","hashOfConfig":"183"},{"size":5469,"mtime":1615295129165,"results":"231","hashOfConfig":"183"},{"size":1002,"mtime":1613280195763,"results":"232","hashOfConfig":"183"},{"size":1963,"mtime":1615296979407,"results":"233","hashOfConfig":"183"},{"size":4012,"mtime":1615295129165,"results":"234","hashOfConfig":"183"},{"size":551,"mtime":1614871105984,"results":"235","hashOfConfig":"183"},{"size":699,"mtime":1614871105981,"results":"236","hashOfConfig":"183"},{"size":433,"mtime":1615196413909,"results":"237","hashOfConfig":"183"},{"size":3411,"mtime":1615198763291,"results":"238","hashOfConfig":"183"},{"size":10713,"mtime":1614871105980,"results":"239","hashOfConfig":"183"},{"size":946,"mtime":1613920422887,"results":"240","hashOfConfig":"183"},{"size":1370,"mtime":1613280192349,"results":"241","hashOfConfig":"183"},{"size":1855,"mtime":1614871105982,"results":"242","hashOfConfig":"183"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"m76rte",{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"251","messages":"252","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"264","messages":"265","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"287","messages":"288","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"292","messages":"293","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"315","messages":"316","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"341","messages":"342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"353","messages":"354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"355","messages":"356","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"357","messages":"358","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"359","messages":"360","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"361"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"fl9nei",{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"374","messages":"375","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"388","messages":"389","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"390","messages":"391","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"394","messages":"395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"396","messages":"397","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"400","messages":"401","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"402","messages":"403","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"406","messages":"407","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"408","messages":"409","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"410","messages":"411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"412","messages":"413","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"414","messages":"415","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"416","messages":"417","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"418","messages":"419","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"420","messages":"421","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"422","messages":"423","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"424","messages":"425","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"426","messages":"427","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"428","messages":"429","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"430","messages":"431","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"432","messages":"433","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"434","messages":"435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"436","messages":"437","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"438","messages":"439","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"440","messages":"441","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"442","messages":"443","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"444","messages":"445","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"446","messages":"447","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"448","messages":"449","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"450","messages":"451","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"452","messages":"453","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"454","messages":"455","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"456","messages":"457","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"458","messages":"459","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"460","messages":"461","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"462","messages":"463","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"464","messages":"465","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"466","messages":"467","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"468","messages":"469","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"470","messages":"471","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"361"},{"filePath":"472","messages":"473","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"474","messages":"475","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"476","messages":"477","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"478","messages":"479","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"480","messages":"481","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"482","messages":"483","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"484","messages":"485","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"486","messages":"487","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\main1\\Typescript-Frontend\\ki-app\\src\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\MainController.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\reportWebVitals.ts",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Facade.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\ReferringController.tsx",["488","489","490","491"],"import { Page } from \"../view/pages/PageInterface\";\r\nimport { IState, States } from \"../view/pages/State\";\r\nimport { PageController } from \"./PageController\";\r\nimport { MainController } from \"./MainController\";\r\nimport { DeliveryController } from \"./DeliveryController\";\r\nimport { VisualizationController } from \"./VisualizationController\";\r\nimport { ReferringPage } from \"../view/pages/ReferringPage/index\";\r\nimport { QRCode, ErrorCorrectLevel, QRNumber, QRAlphaNum, QR8BitByte, QRKanji } from 'qrcode-generator-ts/js';\r\n\r\n\r\n/**\r\n* Controller für die Verweisseite\r\n*/\r\nexport class RefferingController implements PageController {\r\n    private page: Page;\r\n    private state: IState;\r\n\r\n    /**\r\n     * Konstruktor des Seitenverwalters. Registriert sich als Beobachter auf seiner Seite und setzt den Start Status. \r\n     */\r\n    constructor() {\r\n        this.page = new ReferringPage({});\r\n        //this.page = new StartPage({});\r\n        //this.page = new ModelCreationPage({});\r\n        // this.page = new VisualizationPage({});\r\n\r\n        this.page.attach(this);\r\n        this.state = this.page.getState();\r\n        this.update();\r\n    }\r\n\r\n    /**\r\n     * Die Update Methode des Seitenverwalters.\r\n     */\r\n    update() {\r\n        this.state = this.page.getState();\r\n        switch (this.state.currentState) {\r\n            case States.LoadProject:\r\n                this.loadProject();\r\n                break;\r\n            case States.Register:\r\n                this.register();\r\n                break;\r\n            case States.Login:\r\n                this.login();\r\n                break;\r\n            case States.NewProjekt:\r\n                this.createNewProject();\r\n                break;\r\n            case States.LoadModel:\r\n                this.loadModel();\r\n                break;\r\n            case States.SetLanguage:\r\n                this.page.setState(MainController.getInstance().setLanguage(this.state.languageCode));\r\n                break;\r\n            case States.NeedMessage:\r\n                this.page.setState(MainController.getInstance().getMessage(this.state.messages));\r\n                break;\r\n            case States.ChangeToVisual:\r\n                MainController.getInstance().changeTo(new VisualizationController(this.state.currentProject!));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Logt den Benutzer ein\r\n     */\r\n    login() {\r\n        let adminData: { name: string, email: string, password: string; } = this.state.adminData!;\r\n        let loginSucess: Promise<boolean> = MainController.getInstance().getFacade().loginAdmin(adminData.email, adminData.password);\r\n        this.state.wait! = loginSucess;\r\n        this.state.currentState = States.waitForDB;\r\n        this.page.setState(this.state);\r\n        loginSucess.then((value: boolean) => {\r\n            if (value) {\r\n                this.state.projectData! = [];\r\n                let projectData: Promise<{ projectID: number; projectName: string; AIModelID: number[]; }[]> = MainController.getInstance().getFacade().getProjectMetas();\r\n                projectData.then((data: { projectID: number; projectName: string; AIModelID: number[]; }[]) => {\r\n                    this.state.projectData! = data;\r\n                    this.page.setState(this.state);\r\n                });\r\n\r\n            } else {\r\n                this.state.currentState = States.LoginFail;\r\n            }\r\n            this.page.setState(this.state);\r\n        });\r\n        loginSucess.catch((value: boolean) => {\r\n            console.log(value);\r\n        });\r\n        //this.state.projectData! = [{ projectID: 1, projectName: \"string\", AIModelID: [1,2] }]\r\n        //this.page.setState(this.state)\r\n    }\r\n\r\n    /**\r\n     * Registriert den Benutzer\r\n     */\r\n    register() {\r\n        let adminData: { name: string, email: string, password: string; } = this.state.adminData!;\r\n        let loginSucess: Promise<boolean> = MainController.getInstance().getFacade().registerAdmin(adminData.name, adminData.email, adminData.password);\r\n        this.state.wait! = loginSucess;\r\n        this.state.currentState = States.waitForDB;\r\n        this.page.setState(this.state);\r\n        loginSucess.then((value: boolean) => {\r\n            if (!value) {\r\n                this.state.currentState = States.LoginFail;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Erstellt ein QRCode und übergibt in an die Seite\r\n     */\r\n    createQR() {\r\n        const url = new URL(document.URL);\r\n        url.searchParams.append(\"SessionID\", MainController.getInstance().getFacade().getSessionID().toString());\r\n        url.searchParams.append(\"isMiner\", \"true\");\r\n        let link: string = url.toString();\r\n        var qr = new QRCode();\r\n        qr.setTypeNumber(5);\r\n        qr.setErrorCorrectLevel(ErrorCorrectLevel.L);\r\n        qr.addData(link);\r\n        qr.make();\r\n        this.state.qr = qr.toDataURL();\r\n        this.state.currentState = States.SetQRC;\r\n        PubSub.publish('getlink', link);\r\n    }\r\n\r\n    /**\r\n     * Erstelle ein neues Projekt, welches auch als momentanes Projekt gesetzt wird.\r\n     */\r\n    createNewProject() {\r\n        let sucess: Promise<boolean> = MainController.getInstance().getFacade().createProject(this.state.currentProject!.projectName);\r\n        this.state.wait! = sucess;\r\n        this.state.currentState = States.waitForDB;\r\n        this.page.setState(this.state);\r\n        sucess.then((value: boolean) => {\r\n            if (value) {\r\n                this.createQR();\r\n                let projectData: Promise<{ projectID: number; projectName: string; AIModelID: number[]; }[]> = MainController.getInstance().getFacade().getProjectMetas();\r\n                projectData.then((data: { projectID: number; projectName: string; AIModelID: number[]; }[]) => {\r\n                    this.state.projectData! = data;\r\n                });\r\n                PubSub.publish('getqr', this.state.qr);\r\n\r\n            } else {\r\n\r\n                this.state.currentState = States.LoadError;\r\n            }\r\n            this.page.setState(this.state);\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Setzt ein Projekt als momentanes Projekt\r\n     */\r\n    loadProject() {\r\n        let projectId: number = this.state.currentProject!.projectID!;\r\n        let sucess: Promise<boolean> = MainController.getInstance().getFacade().loadProject(projectId);\r\n        this.state.wait! = sucess;\r\n        this.state.currentState = States.waitForDB;\r\n        this.page.setState(this.state);\r\n        sucess.then((value: boolean) => {\r\n            if (value) {\r\n                this.createQR();\r\n                PubSub.publish('getqr', this.state.qr);\r\n            } else {\r\n                this.state.currentState = States.LoadError;\r\n            }\r\n        });\r\n        this.page.setState(this.state);\r\n    }\r\n\r\n    /**\r\n     * Läde ein Modell und wechselt zur delivery Seite\r\n     */\r\n    loadModel() {\r\n        let projectId: number = this.state.currentProject!.projectID;\r\n        let sucess: Promise<boolean> = MainController.getInstance().getFacade().loadProject(projectId);\r\n        this.state.wait! = sucess;\r\n        this.state.currentState = States.waitForDB;\r\n        this.page.setState(this.state);\r\n        sucess.then((value: boolean) => {\r\n            if (value) {\r\n                let deliveryConroller: DeliveryController = new DeliveryController(this.state.currentProject!);\r\n                MainController.getInstance().changeTo(deliveryConroller);\r\n            } else {\r\n                this.state.currentState = States.LoadError;\r\n            }\r\n        });\r\n        this.page.setState(this.state);\r\n    }\r\n}","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\State.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\StartController.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\DatabaseConnector.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\AIBuilder.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Language.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\User.tsx",["492"],"import { DeviceData } from \"./DeviceData\";\r\nimport { Project } from \"./Project\";\r\nimport { SensorData } from \"./SensorData\";\r\n\r\n/**\r\n * Die Vorlage für alle existierenden Benutzer\r\n */\r\nexport abstract class User {\r\n  protected id: number; //Die eindeutige User ID\r\n  protected name: string; //Der Name des Users\r\n  protected device: DeviceData; //Das Benutzergerät des Benutzers\r\n  protected currentProject?: Project;\r\n\r\n  /**\r\n   * Erstellt einen Benutzer\r\n   * @param id eindeutige Benutzer ID\r\n   * @param name Name des Benutzer\r\n   */\r\n  constructor(id: number, device: DeviceData, name?: string) {\r\n    this.id = id;\r\n    this.device = device;\r\n    if (name != null) {\r\n      this.name = name;\r\n    } else {\r\n      this.name = this.device.getName();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gibt vom aktuellen Projekt die aktuelle Datensatz ID zurück, falls diese nicht existiert wird -1 zurück gegeben.\r\n   */\r\n  getCurrentDataSetID(): number {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.getCurrentDataSetID();\r\n    } else {\r\n      return -1;\r\n    }\r\n  }\r\n\r\n  getCurrentProjectID(): number {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.getID();\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  addDatapoint(dataRowID: number, datapoint: { value: number[], relativeTime: number; }): boolean {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.addDatapoint(dataRowID, datapoint);\r\n    }\r\n    return false;\r\n\r\n  }\r\n\r\n  /**\r\n   * Gibt vom aktuellen Projekt die Datenreihen der Datensatz ID zurück und setzt diesen Datensatz als aktuellen Datensatz\r\n   * @param dataSetID die Datensatz ID von der die Datenreihen gelesen werden sollen\r\n   * @returns die Sensordaten von der Datenreihe\r\n   */\r\n  getDataRows(dataSetID: number): { dataRows?: { sensorType: number, value: number[], relativeTime: number; }[][]; } {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.getDataRows(dataSetID);\r\n    } else {\r\n      return {};\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gibt vom aktuellen Projekt die Datenreihen des aktuellen Datensatzes zurück\r\n   * @param dataSetID die Datensatz ID von der die Datenreihen gelesen werden sollen\r\n   * @returns die Sensordaten von der Datenreihe\r\n   */\r\n  getCurrentDataRows(): { dataRows?: { sensorType: number, value: number[], relativeTime: number; }[][]; } {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.getCurrentDataRows();\r\n    } else {\r\n      return {};\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gibt die Session ID des aktuellen Projekts zurück, -1 falls kein aktuelles Projekt existiert\r\n   */\r\n  getSessionID(): number {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.getSessionID();\r\n    } else {\r\n      return -1;\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Erstellt für das aktuelle Projekt einen neuen Datensatz und setzt diesen als aktuellen Datensatz.\r\n     * @param dataRowSensors die Sensoren, von denen die Daten ausgelesen werden\r\n     * @param dataSetID die eindeutige Datensatz ID\r\n     * @param dataSetName der Datensatznamen\r\n     * @param generateDate die Erstellungszeit von dem Datensatz\r\n     * @returns false, falls kein aktuelles Prokekt existiert\r\n     */\r\n  createDataSet(dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate?: number): boolean {\r\n    if (this.currentProject != null) {\r\n      this.currentProject.createDataSet(dataRowSensors, dataSetID, dataSetName, generateDate);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Löscht vom aktuellen Projekt den Datensatz, mit der übergebenen Datensatz ID\r\n   * @param dataSetID die Datensatz ID\r\n   * @returns false, falls der Datensatz mit der ID nicht existiert oder kein aktuelles Projekt existiert\r\n   */\r\n  deleteDataSet(dataSetID: number): number {\r\n    if (this.currentProject != null) {\r\n      let datasetExist: boolean = this.currentProject.deleteDataSet(dataSetID);\r\n      if (datasetExist) {\r\n        return this.currentProject.getID();\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Erstellt für das aktuelle Projekt und dem aktuellen Datensatz ein Label mit den übergebeben Parametern\r\n   * @param labelID Ist die eindeutige Label ID des Labels.\r\n   * @param start Ist die Startzeit des Labels.\r\n   * @param end Ist die Endzeit des Labels.\r\n   * @returns false, falls kein aktueller Datensatz existiert oder die LabelID für diesen Datensatz nicht eindeutig ist\r\n   */\r\n  createLabel(labelID: number, span: { start: number, end: number; }, labelName: string): boolean {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.createLabel(labelID, span, labelName);\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setzt beim aktuellen Datensatz dem Label mit der LabelID die neu übergebenen Daten\r\n   * @param labelID \r\n   * @param start startzeit des Labels in Millisekunden\r\n   * @param end endzeit des Labels in Millisekunden\r\n   */\r\n  setLabel(labelID: number, span: { start: number, end: number; }, labelName?: string): boolean {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.setLabel(labelID, span, labelName);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Löscht von dem aktuellen Projekt und dem aktuellen Datensatz das Label mit der Label ID\r\n   * @param labelID die Label ID\r\n   * @returns false, falls kein aktueller Datensatz existiert oder kein Label mit der Label ID existiert\r\n   */\r\n  deleteLabel(labelID: number): boolean {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.deleteLabel(labelID);\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gibt alle Daten von allen Labeln vom aktuellen Datensatz zurück.\r\n   * @returns leer, falls kein aktueller Datensatz existiert\r\n   */\r\n  getLabels(): { labels?: { name: string, id: number, start: number, end: number; }[]; } {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.getLabels();\r\n    }\r\n    return {};\r\n  }\r\n\r\n  /**\r\n  * Lädt ein bestehendes Projekt in das Model\r\n  * @param project die Projektdaten\r\n  * @returns false, falls die Projekt ID schon existiert\r\n  */\r\n  abstract loadProject(project: {\r\n    projectID: number, sessionID: number, projectName: string, projectData?: {\r\n      aiModelID?: number[],\r\n      dataSet?: {\r\n        dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate: number,\r\n        dataRows: {\r\n          dataRowID: number, recordingStart: number,\r\n          dataRow: { value: number[], relativeTime: number; }[];\r\n        }[],\r\n        label: { name: string, labelID: number, start: number, end: number; }[];\r\n      }[];\r\n    };\r\n  }): boolean;\r\n\r\n  /**\r\n   * Gibt alle Sensoren aus, die das Benutzergerät und das Programm unterstützt\r\n   */\r\n  getDeviceSensors(sensorTypeID: number[]): SensorData[] {\r\n    return this.device.getSensors(sensorTypeID);\r\n  }\r\n\r\n  /**\r\n   * Gibt die SensorTypID der auswählbaren Sensoren zurück\r\n   */\r\n  getAvailableSensors(): number[] {\r\n    return this.device.getAvailableSensors();\r\n  }\r\n\r\n  /**\r\n   * Gibt von allen Datensätzen vom aktuellen Projekt Informationen zurück\r\n   * @returns dataSetID ist die DatensatzID und dataSetName ist der Datensatzname\r\n   */\r\n  getDataSetMetas(): { dataSetID: number, dataSetName: string; }[] {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.getDataSetMetas();\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setzt einen neuen Benutzernamen\r\n   * @param name der neue Benutzername\r\n   */\r\n  setName(name: string): void {\r\n    this.name = name;\r\n  }\r\n\r\n  /**\r\n   * Gibt den Benutzernamen zurück\r\n   */\r\n  getName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  /**\r\n   * Setzt ein neues Benutzergerät\r\n   * @param device das Benutzergerät\r\n   */\r\n  setDevice(device: DeviceData) {\r\n    this.device = device;\r\n  }\r\n\r\n  /**\r\n   * Gibt falls ein Benutzergerät verfügbar ist dieses zurück\r\n   */\r\n  getDevice(): { device?: DeviceData; } {\r\n    return { device: this.device };\r\n  }\r\n\r\n  /**\r\n   * Gibt die Benutzer ID zurück\r\n   */\r\n  getID(): number {\r\n    return this.id;\r\n  }\r\n}\r\n\r\n/**\r\n * Die Klasse Admin dient für einen Benutzer mit einem Account\r\n */\r\nexport class Admin extends User {\r\n  private email: string; //Die eindeutige Admin Email\r\n  private project: Project[] = []; //Alle Projekte, die zu dem Admin gehören\r\n\r\n  /**\r\n   * Zum erstellen eines Admins\r\n   * @param adminID die Admin ID\r\n   * @param deviceID die Geräte ID des Admins\r\n   * @param adminName der Name des Admins\r\n   * @param email die Emailadresse des Admins\r\n   */\r\n  constructor(adminID: number, deviceID: number, adminName: string, email: string);\r\n\r\n  /**\r\n   * Für die Implementierung eines Bestehenden Admins\r\n   * @param adminID die Admin ID\r\n   * @param deviceID die Geräte ID\r\n   * @param adminName der Admin Name\r\n   * @param email die Emailadresse des Admins\r\n   * @param device das Gerät des Admins\r\n   */\r\n  constructor(adminID: number, deviceID: number, adminName: string, email: string,\r\n    device: { deviceID?: number, deviceName: string, deviceType: string, firmware: string, generation: string, MACADRESS: string, sensorInformation: { sensorTypeID: number, sensorName: string, sensorUniqueID: number; }[]; });\r\n  ////////////////////////////////////////TODO\r\n\r\n  constructor(adminID: number, deviceID: number, adminName: string, email: string,\r\n    device?: { MACADRESS: string, deviceName: string, firmware: string, generation: string, deviceType: string; }) {\r\n    super(adminID, DeviceData.loadDevice(deviceID, device), adminName);\r\n    this.email = email;\r\n  }\r\n\r\n  /**\r\n   * Implementiert die abstrakte Methode von User\r\n   */\r\n  loadProject(project: {\r\n    projectID: number, sessionID: number, projectName: string, projectData?: {\r\n      aiModelID?: number[],\r\n      dataSet?: {\r\n        dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate: number,\r\n        dataRows: {\r\n          dataRowID: number, recordingStart: number,\r\n          dataRow: { value: number[], relativeTime: number; }[];\r\n        }[],\r\n        label: { name: string, labelID: number, start: number, end: number; }[];\r\n      }[];\r\n    };\r\n  }): boolean {\r\n    var id = this.existProject(project.projectID);\r\n    var newProject: Project = new Project(project.projectID, project.sessionID, project.projectName, project.projectData);\r\n    this.currentProject = newProject;\r\n    if (id == -1) {\r\n      this.project.push(newProject);\r\n    } else {\r\n      this.project[id] = newProject;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Fügt ein neues Projekt mit den übergebenen Parametern hinzu und setzt dieses Projekt als aktuelles Projekt\r\n   * @param projectID die Projekt ID, diese muss für den Admin eindeutig sein\r\n   * @param sessionID die Session ID, diese muss global eindeutig sein\r\n   * @param projectName der Name des Projektes\r\n   * @returns Bei angabe einer Project ID, die schon existiert wird false zurück gegeben\r\n   */\r\n  createProject(projectID: number, sessionID: number, projectName: string): boolean {\r\n    if (this.existProject(projectID) === -1) {\r\n      var newproject: Project = new Project(projectID, sessionID, projectName);\r\n      this.project.push(newproject);\r\n      this.currentProject = newproject;\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param projectID \r\n   * @returns -1 falls das Projekt nicht existiert oder die Array Position des Projekts\r\n   */\r\n  private existProject(projectID: number): number {\r\n    for (let i = 0; i < this.project.length; i++) {\r\n      if (this.project[i].getID() === projectID) {\r\n        return i;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Gibt die Admin Emailadresse zurück\r\n   */\r\n  getEmail(): string {\r\n    return this.email;\r\n  }\r\n\r\n  getProjects(): Project[] {\r\n    return this.project;\r\n  }\r\n}\r\n\r\n/**\r\n * Dataminer ist die Klasse, um Datensammler mit ihren Geräte Sensoren zu spreichern\r\n */\r\nexport class Dataminer extends User {\r\n  /**\r\n   * Erstellt einen Datensammler\r\n   * @param id die Benutzer ID\r\n   * @param name der Benutzername\r\n   * @param deviceID die Geräte ID\r\n   */\r\n  constructor(id: number, deviceID: number, name?: string) {\r\n    super(id, DeviceData.loadDevice(deviceID), name);\r\n  }\r\n\r\n  /**\r\n   * Implementiert die abstrakte Methode von User\r\n   */\r\n  loadProject(project: {\r\n    projectID: number, sessionID: number, projectName: string, projectData?: {\r\n      aiModelID?: number[],\r\n      dataSet?: {\r\n        dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate: number,\r\n        dataRows: {\r\n          dataRowID: number, recordingStart: number,\r\n          dataRow: { value: number[], relativeTime: number; }[];\r\n        }[],\r\n        label: { name: string, labelID: number, start: number, end: number; }[];\r\n      }[];\r\n    };\r\n  }): boolean {\r\n\r\n    this.currentProject = new Project(project.projectID, project.sessionID, project.projectName, project.projectData);\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * AIModelUser ist die Klasse, um KI-Modell Benutzer zu speichern\r\n */\r\nexport class AIModelUser extends User {\r\n  /**\r\n   * Erstellt einen KI-Modell Benutzer, wenn Name \"\" gesetzt ist und eine Geräte ID gesetzt ist wird als Name der Geräte Name gewählt\r\n   * @param id die eindeutige Benutzer ID\r\n   * @param name der Benutzername\r\n   * @param deviceID die Geräte ID\r\n   */\r\n  constructor(id: number, deviceID: number, name?: string) {\r\n    super(id, DeviceData.loadDevice(deviceID), name);\r\n  }\r\n  /**\r\n   * Implementiert die abstrakte Methode von User\r\n   */\r\n  loadProject(project: {\r\n    projectID: number, sessionID: number, projectName: string, projectData?: {\r\n      aiModelID?: number[],\r\n      dataSet?: {\r\n        dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate: number,\r\n        dataRows: {\r\n          dataRowID: number, recordingStart: number,\r\n          dataRow: { value: number[], relativeTime: number; }[];\r\n        }[],\r\n        label: { name: string, labelID: number, start: number, end: number; }[];\r\n      }[];\r\n    };\r\n  }): boolean {\r\n\r\n    this.currentProject = new Project(project.projectID, project.sessionID, project.projectName, project.projectData);\r\n    return true;\r\n  }\r\n}","D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\DeliveryController.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\AIDistributor.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\VisualizationController.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\DeviceData.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Project.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\DeliveryFormat.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\ModelCreationController.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\SensorManager.tsx",["493","494","495","496"],"import { MainController } from \"./MainController\";\r\nimport { Page } from \"../view/pages/PageInterface\";\r\nimport { IState, States } from \"../view/pages/State\";\r\nimport { wait } from \"@testing-library/dom\";\r\n\r\nexport class SensorManager {\r\n    private currentSensors: Sensor[] = [];\r\n    //private currentSensorIDs: number[] = [];\r\n    private facade = MainController.getInstance().getFacade();\r\n    private waitTime: number = 5;\r\n    private readTime = 10;\r\n    private startTime = 10;\r\n    private saving = true;\r\n    private sensorTypes: number[] = [];\r\n    private dataPoints: { rowId: number, sensorType: number, value: number[]; relativeTime: number; }[] = [];\r\n\r\n    private readonly TO_SECOND = 1000;\r\n\r\n    /**\r\n    * Erzeugt eine neue Datenreihe und setzt diese damit als momentan benutzte Datenreihe. \r\n    * @param sensorTypes Die Angabe der zu benutzenden Sensoren. Die position im Array bestimmt die DataRow ID jedes Sensors.\r\n    * @returns Gibt true für ein erfolgreiches Erstellen eines Dataensatzes zurück, gibt sonst false zurück.\r\n    */\r\n    setUpDataRead(sensorTypes: number[], dataSetName: string, waitTime: number, readTime: number, saving: boolean) {\r\n        //this.currentSensorIDs = sensorTypes;\r\n        // this.waitTime = waitTime * this.TO_SECOND;\r\n        //this.readTime = readTime * this.TO_SECOND;\r\n        //this.startTime = readTime * this.TO_SECOND;\r\n        this.waitTime = waitTime;\r\n        this.readTime = readTime;\r\n        this.startTime = readTime;\r\n        this.saving = saving;\r\n        this.sensorTypes = sensorTypes;\r\n        for (let index = 0; index < sensorTypes.length; index++) {\r\n            switch (sensorTypes[index]) {\r\n                case 2:\r\n                    let accSensor = new Accelerometer({ frequency: 60 });\r\n                    this.currentSensors.push(accSensor);\r\n                    //hier addEventListener noch nicht benutzen kann\r\n                    this.getData(accSensor, index, sensorTypes[index]);\r\n                    //oben fuer test\r\n                    accSensor.addEventListener('reading', e => {\r\n                        this.getData(accSensor, index, sensorTypes[index]);\r\n                    });\r\n                    accSensor.addEventListener('error', event => {\r\n                        console.log(event.error.name, event.error.message);\r\n                    });\r\n                    break;\r\n                case 3:\r\n                    let gyroSensor = new Gyroscope({ frequency: 60 });\r\n                    this.currentSensors.push(gyroSensor);\r\n                    gyroSensor.addEventListener('reading', e => {\r\n                        this.getData(gyroSensor, index, sensorTypes[index]);\r\n                    });\r\n                    gyroSensor.addEventListener('error', event => {\r\n                        console.log(event.error.name, event.error.message);\r\n                    });\r\n                    break;\r\n                case 4:\r\n                    let magSensor = new Magnetometer({ frequency: 60 });\r\n                    this.currentSensors.push(magSensor);\r\n                    magSensor.addEventListener('reading', e => {\r\n                        this.getData(magSensor, index, sensorTypes[index]);\r\n                    });\r\n                    magSensor.addEventListener('error', event => {\r\n                        console.log(event.error.name, event.error.message);\r\n                    });\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        return (this.facade.createDataSet(sensorTypes, dataSetName));\r\n    }\r\n\r\n    /**\r\n    * Erfasst für den momentanene Datensatz Daten und sendet diese an die Explorer Datenbank.\r\n    * Wartet zuerst für die angegebene Wartezeit und nimmt dann für die angegeben Lesezeit daten auf.\r\n    */\r\n    readData(page: Page) {\r\n        let state: IState = page.getState();\r\n        PubSub.publish('usedsensors', this.sensorTypes)\r\n        //Warte für waitTime und update dabei die Seite\r\n        let intervalId1 = setInterval(() => {\r\n            this.waitTime = this.waitTime - 1;\r\n            //state.recordingSettings!.waitTime = this.waitTime;\r\n            //state.currentState = States.SetWaitTime;\r\n            page.setState(state);\r\n            PubSub.publish('nextCount', this.waitTime);\r\n            if (this.waitTime === 0) {\r\n                clearInterval(intervalId1);\r\n\r\n                for (let index = 0; index < this.currentSensors.length; index++) {\r\n                    this.currentSensors[index].start();\r\n                }\r\n                //Nimm Daten auf verteile sie an die Seite und das Modell. Erneuere dabei die aufnahmezeit auf der Seite\r\n                let intervalId2 = setInterval(() => {\r\n                    this.readTime = this.readTime - 1;\r\n                    while (this.dataPoints.length > 0) {\r\n                        let newDataPoint = this.dataPoints.shift()!;\r\n                        state.dataPoints!.push(newDataPoint);\r\n                        MainController.getInstance().getFacade().sendDataPoint(newDataPoint.rowId, { value: newDataPoint.value, relativeTime: newDataPoint.relativeTime });\r\n                        page.setState(state);\r\n                        console.log(this.readTime)\r\n                        console.log(state.dataPoints)\r\n\r\n                    }\r\n                    if (this.readTime === 0) {\r\n                        clearInterval(intervalId2);\r\n                        for (let index = 0; index < this.currentSensors.length; index++) {\r\n                            this.currentSensors[index].stop();\r\n                        }\r\n                    }\r\n                }, 1000);\r\n\r\n\r\n\r\n            }\r\n        }, 1000);\r\n        /**\r\n              if (this.waitTime === 0) {\r\n                  console.log(this.currentSensors)\r\n                  console.log(this.readTime)\r\n                  for (let index = 0; index < this.currentSensors.length; index++) {\r\n                      this.currentSensors[index].start();\r\n                  }\r\n                  console.log('xxx')\r\n                  //Nimm Daten auf verteile sie an die Seite und das Modell. Erneuere dabei die aufnahmezeit auf der Seite\r\n                  let intervalId2 = setInterval(() => {\r\n                      console.log(this.currentSensors)\r\n                      console.log(this.readTime)\r\n                      console.log(this.dataPoints)\r\n                      this.readTime = this.readTime - 1;\r\n                      while (this.dataPoints.length > 0) {\r\n                          let newDataPoint = this.dataPoints.shift()!;\r\n                          state.dataPoints!.push(newDataPoint);\r\n                          MainController.getInstance().getFacade().sendDataPoint(newDataPoint.rowId, { value: newDataPoint.value, relativeTime: newDataPoint.relativeTime });\r\n                          page.setState(state);\r\n                          console.log(this.readTime)\r\n                          console.log(state.dataPoints)\r\n                      }\r\n                      if (this.readTime === 0) clearInterval(intervalId2);\r\n                  }, 1000);\r\n  \r\n                  for (let index = 0; index < this.currentSensors.length; index++) {\r\n                      this.currentSensors[index].stop();\r\n                  }\r\n              }\r\n           */\r\n    }\r\n\r\n    /**\r\n     * @returns Gibt als Zahl die Zeit in Sekunden zurück, für welche vor der Aufnahme gewartet wird. \r\n     */\r\n    getWaitTime() {\r\n        return this.waitTime;\r\n    }\r\n\r\n    /**\r\n     * @returns Gibt als Zahl die Zeit in Sekunden zurück, für welche die Aufnahme läuft. \r\n     */\r\n    getReadTime() {\r\n        return this.readTime;\r\n    }\r\n\r\n    /**\r\n    * Holt die Sensordaten für einen Sensor\r\n    * @param sensor der Sensor von dem die Daten gelsen werden\r\n    * @param sensorType Die ID des Sensortypes\r\n    */\r\n    getData(sensor: Magnetometer | Gyroscope | Accelerometer, rowId: number, sensorType: number) {\r\n        this.dataPoints.push({ rowId, sensorType, value: [sensor.x!, sensor.y!, sensor.z!], relativeTime: this.startTime - this.readTime });\r\n        console.log(this.dataPoints);\r\n    }\r\n\r\n    /**\r\n    * Prüft welche Sensoren verfügbar sind.\r\n    * @returns ein Array welches alle SensorTypeIDs enthält die verfügbar sind\r\n    */\r\n    async getAvailableSensors(): Promise<{ sensorTypID: number; sensorType: string; }[]> {\r\n        let sensors: { sensorTypID: number; sensorType: string; }[] = [];\r\n\r\n\r\n        // sensors.push({ sensorTypID: 2, sensorType: \"Accelerometer\" }); //Nur test\r\n        // return sensors;//Nur test\r\n\r\n\r\n        let accelerometer = new Accelerometer({ frequency: 60 });\r\n        let accelerometerExist = this.test(accelerometer);\r\n        let gyroscope = new Gyroscope({ frequency: 60 });\r\n        let gyroscopeExist = this.test(gyroscope);\r\n        /*let magnetometer = new Magnetometer();            Nicht definiert?\r\n        let magnetometerExist = this.test(magnetometer);*/\r\n\r\n        //hier fuer test, 2-if commentaren\r\n        // if (await accelerometerExist) {\r\n        sensors.push({ sensorTypID: 2, sensorType: \"Accelerometer\" });\r\n        //   }\r\n        //   if (await gyroscopeExist) {\r\n        sensors.push({ sensorTypID: 3, sensorType: \"Gyroscope\" });\r\n        //   }\r\n\r\n        /*if (await magnetometerExist) {\r\n            sensors.push({ sensorTypID: 4, sensorType: \"Magnetometer\" });\r\n        }*/\r\n        return sensors;\r\n    }\r\n\r\n    private async test(sensor: Sensor): Promise<boolean> {\r\n        var finish = false;\r\n        sensor.addEventListener('reading', e => {\r\n            finish = true;\r\n            sensor.stop();\r\n        });\r\n        sensor.start();\r\n        await this.wait(1000);\r\n        sensor.stop();\r\n        return finish;\r\n    }\r\n    private async wait(ms: number) {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n}","D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\DataCollectionController.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\index.tsx",["497","498","499"],"import React, { Component } from 'react';\r\nimport PubSub from 'pubsub-js';\r\nimport Title from '../../components/StartComponents/Title';\r\nimport Input from '../../components/StartComponents/Input';\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from 'react-dom';\r\nimport { States } from '../State';\r\n\r\ntype Props = {\r\n\r\n};\r\n\r\nexport class StartPage extends React.Component<Props, State> implements Page {\r\n    state = new State();\r\n    observers: PageController[] = [];\r\n    constructor(props: Props) {\r\n        super(props);\r\n        const VDOM = (\r\n            <div>\r\n                <Title />\r\n                <Input />\r\n            </div>\r\n        );\r\n        ReactDOM.render(VDOM, document.getElementById('root'));\r\n        this.changeSettings();\r\n    }\r\n\r\n    /**\r\n     * Prüft ob der Nutzer \"Start\" druckt und ändert den Zustand.\r\n     */\r\n    changeSettings() {\r\n        PubSub.subscribe('settingsFinish', (_msg: any, data: {\r\n            newDataSetName: string,\r\n            usedSensorTypes: number[],\r\n            waitTime: number,\r\n            readTime: number,\r\n            availableSensorTypes: { sensorTypID: number, sensorType: string, chosen: boolean; }[];\r\n        }) => {\r\n            this.state.recordingSettings = data;\r\n            this.state.currentState = States.ChangeToDataCollection;\r\n            this.notify();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Die Methoden für Beobachtermuster\r\n     * @param observer Beobachter,nähmlich Controller\r\n     */\r\n    attach(observer: PageController) {\r\n        this.observers.push(observer);\r\n    }\r\n\r\n    detach(observer: PageController) {\r\n        const index = this.observers.indexOf(observer, 0);\r\n        if (index > -1) {\r\n            this.observers.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    notify() {\r\n        for (let index = 0; index < this.observers.length; index++) {\r\n            const element = this.observers[index];\r\n            element.update();\r\n        }\r\n    }\r\n\r\n    getState() {\r\n        return this.state;\r\n    }\r\n}\r\n","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\State.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\SensorData.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\AIModel.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\DataSet.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Session.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\State.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\State.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\State.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\FinishController.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\index.tsx",["500","501"],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ConstantsText\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\NewProjectButton\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoginWindow\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoadModelButton\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\DownloadButton\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\EmailList\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\DataRow.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Label.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\FinishButton\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\State.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\DiagramList\\index.jsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Title\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Input\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\State.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\TimeSpan.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\DataPoint.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\Train\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Title\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LinkText\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\QRImage\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ChangeToVisuBtn\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Diagram\\index.jsx",["502"],"import React, { Component } from 'react';\r\nimport PubSub from 'pubsub-js';\r\n\r\nexport default class Diagram extends Component {\r\n    state = {\r\n        lineLabels: [],\r\n        sensorRow: [],\r\n        datavalue: [],\r\n        time: [],\r\n        showDiagram: false,\r\n        diagram: {},\r\n        diagramLineLabels: {},\r\n        diagramData: {},\r\n        diagramOptions: {},\r\n        color: ['rgba(46,190,87,1)', 'rgba(68,24,232,1)', 'rgba(238,173,14,1)', 'rgba(178,34,34,1)', 'rgba(238, 130, 238,1)', 'rgba(0, 0, 0,1)',\r\n            'rgba(106, 90, 205,1)', 'rgba(238, 118, 0,1)', 'rgba(105, 105, 105,1)'],\r\n        csscolor: ['2EBE57', 'CC00FF', 'EEAD0E', 'B22222', 'EE82EE', '000000',\r\n            '6A5ACD', 'EE7600', '696969'],\r\n    };\r\n    componentDidMount() {\r\n        //PubSub.unsubscribe(\"startDiagram\")\r\n        PubSub.subscribe(\"startDiagram\", (_msg, dataRows) => {\r\n            this.setState({\r\n                lineLabels: [],\r\n                sensorRow: [],\r\n                datavalue: [],\r\n                time: [],\r\n                showDiagram: true\r\n            });\r\n            //put each value Array in State\r\n            var datavalues = [];\r\n            for (var i = 0; i < dataRows.length; i++) {\r\n                this.state.sensorRow.push(dataRows[i][0].sensorType);\r\n                for (var dataCoordinate = 0; dataCoordinate < 3; dataCoordinate++) {\r\n                    for (var j = 0; j < dataRows[i].length; j++) {\r\n                        datavalues.push(dataRows[i][j].value[dataCoordinate]);\r\n                    }\r\n                    this.state.datavalue.push(datavalues);\r\n                    datavalues = []\r\n                }\r\n            }\r\n            // eslint-disable-next-line\r\n            for (var j = 0; j < dataRows[0].length; j++) {\r\n                this.state.time.push(dataRows[0][j].relativeTime);\r\n            }\r\n\r\n            var newDatasets = [];\r\n            var lineLabels = [];\r\n            // eslint-disable-next-line\r\n            for (var i = 0; i < this.state.sensorRow.length * 3; i++) {\r\n                var coordinate = \".X\";\r\n                var sensor = this.state.sensorRow[parseInt(i / 3)];\r\n                // eslint-disable-next-line\r\n                if (i % 3 == 1) {\r\n                    coordinate = \".Y\";\r\n                }\r\n                // eslint-disable-next-line\r\n                if (i % 3 == 2) {\r\n                    coordinate = \".Z\";\r\n                }\r\n\r\n                lineLabels.push(<font color={this.state.csscolor[i]}>■{this.state.sensorRow[parseInt(i / 3)] + coordinate}<br /></font>);\r\n                //this.setState({ lineLabels: lineLabels })\r\n                newDatasets.push(\r\n                    {\r\n                        label: sensor + coordinate,\r\n                        strokeColor: this.state.color[i],\r\n                        borderWidth: 1,\r\n                        data: this.state.datavalue[i],\r\n                    }\r\n                );\r\n            }\r\n            const data = {\r\n                labels: this.state.time,\r\n                datasets: newDatasets\r\n            };\r\n            const options = {\r\n                datasetFill: false,\r\n                pointDotRadius: 2,\r\n                pointHitDetectionRadius: 1,\r\n                offsetGridLines: false,\r\n                pointDot: false\r\n            }\r\n            this.setState({ lineLabels: lineLabels })\r\n            //this.setState({ diagram: { lineLabels, data, options } })\r\n            //this.setState({ diagramLineLabels: lineLabels })\r\n            this.setState({ diagramData: data })\r\n            this.setState({ diagramOptions: options })\r\n        })\r\n\r\n    }\r\n    render() {\r\n\r\n\r\n        var LineChart = require(\"react-chartjs\").Line;\r\n        const { lineLabels, diagramData, diagramOptions, diagram } = this.state\r\n        return (\r\n            <div>\r\n                {lineLabels}\r\n                <LineChart data={diagramData} options={diagramOptions} width=\"400\" height=\"200\" redraw />\r\n            </div>\r\n        );\r\n    }\r\n}","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ProjectList\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Countdown\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ModelList\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\reportWebVitals.ts",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\MainController.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\ReferringController.tsx",["503","504","505","506"],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Facade.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\State.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\StartController.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\VisualizationController.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\DeliveryController.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DatabaseConnector.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\User.tsx",["507"],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\AIBuilder.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\AIDistributor.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Language.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\DataCollectionController.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\SensorManager.tsx",["508","509"],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\index.tsx",["510","511","512"],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\ModelCreationController.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\State.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DeviceData.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Project.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DeliveryFormat.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\State.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\FinishController.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\index.tsx",["513","514"],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ConstantsText\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\NewProjectButton\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoginWindow\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoadModelButton\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\State.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\SensorData.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\AIModel.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Session.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DataSet.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\State.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Title\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Input\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\State.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\DownloadButton\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\EmailList\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\FinishButton\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\State.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DataRow.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Label.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\DiagramList\\index.jsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Title\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Countdown\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Diagram\\index.jsx",["515"],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\QRImage\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LinkText\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ChangeToVisuBtn\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ProjectList\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\Train\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DataPoint.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\TimeSpan.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ModelList\\index.tsx",[],{"ruleId":"516","severity":1,"message":"517","line":8,"column":37,"nodeType":"518","messageId":"519","endLine":8,"endColumn":45},{"ruleId":"516","severity":1,"message":"520","line":8,"column":47,"nodeType":"518","messageId":"519","endLine":8,"endColumn":57},{"ruleId":"516","severity":1,"message":"521","line":8,"column":59,"nodeType":"518","messageId":"519","endLine":8,"endColumn":69},{"ruleId":"516","severity":1,"message":"522","line":8,"column":71,"nodeType":"518","messageId":"519","endLine":8,"endColumn":78},{"ruleId":"523","severity":1,"message":"524","line":312,"column":12,"nodeType":"525","messageId":"526","endLine":312,"endColumn":14},{"ruleId":"516","severity":1,"message":"527","line":3,"column":18,"nodeType":"518","messageId":"519","endLine":3,"endColumn":24},{"ruleId":"516","severity":1,"message":"528","line":4,"column":10,"nodeType":"518","messageId":"519","endLine":4,"endColumn":14},{"ruleId":"516","severity":1,"message":"529","line":189,"column":13,"nodeType":"518","messageId":"519","endLine":189,"endColumn":31},{"ruleId":"516","severity":1,"message":"530","line":191,"column":13,"nodeType":"518","messageId":"519","endLine":191,"endColumn":27},{"ruleId":"516","severity":1,"message":"531","line":1,"column":17,"nodeType":"518","messageId":"519","endLine":1,"endColumn":26},{"ruleId":"532","severity":1,"message":"533","line":41,"column":13,"nodeType":"534","endLine":41,"endColumn":23},{"ruleId":"532","severity":1,"message":"533","line":42,"column":13,"nodeType":"534","endLine":42,"endColumn":23},{"ruleId":"535","severity":1,"message":"536","line":16,"column":13,"nodeType":"537","messageId":"538","endLine":16,"endColumn":22,"fix":"539"},{"ruleId":"532","severity":1,"message":"533","line":40,"column":13,"nodeType":"534","endLine":40,"endColumn":23},{"ruleId":"540","severity":1,"message":"541","line":96,"column":58,"nodeType":"518","messageId":"519","endLine":96,"endColumn":65},{"ruleId":"516","severity":1,"message":"517","line":8,"column":37,"nodeType":"518","messageId":"519","endLine":8,"endColumn":45},{"ruleId":"516","severity":1,"message":"520","line":8,"column":47,"nodeType":"518","messageId":"519","endLine":8,"endColumn":57},{"ruleId":"516","severity":1,"message":"521","line":8,"column":59,"nodeType":"518","messageId":"519","endLine":8,"endColumn":69},{"ruleId":"516","severity":1,"message":"522","line":8,"column":71,"nodeType":"518","messageId":"519","endLine":8,"endColumn":78},{"ruleId":"523","severity":1,"message":"524","line":312,"column":12,"nodeType":"525","messageId":"526","endLine":312,"endColumn":14},{"ruleId":"516","severity":1,"message":"527","line":3,"column":18,"nodeType":"518","messageId":"519","endLine":3,"endColumn":24},{"ruleId":"516","severity":1,"message":"528","line":4,"column":10,"nodeType":"518","messageId":"519","endLine":4,"endColumn":14},{"ruleId":"516","severity":1,"message":"531","line":1,"column":17,"nodeType":"518","messageId":"519","endLine":1,"endColumn":26},{"ruleId":"532","severity":1,"message":"533","line":41,"column":13,"nodeType":"534","endLine":41,"endColumn":23},{"ruleId":"532","severity":1,"message":"533","line":42,"column":13,"nodeType":"534","endLine":42,"endColumn":23},{"ruleId":"535","severity":1,"message":"536","line":16,"column":13,"nodeType":"537","messageId":"538","endLine":16,"endColumn":22,"fix":"542"},{"ruleId":"532","severity":1,"message":"533","line":40,"column":13,"nodeType":"534","endLine":40,"endColumn":23},{"ruleId":"540","severity":1,"message":"541","line":96,"column":58,"nodeType":"518","messageId":"519","endLine":96,"endColumn":65},"@typescript-eslint/no-unused-vars","'QRNumber' is defined but never used.","Identifier","unusedVar","'QRAlphaNum' is defined but never used.","'QR8BitByte' is defined but never used.","'QRKanji' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'States' is defined but never used.","'wait' is defined but never used.","'accelerometerExist' is assigned a value but never used.","'gyroscopeExist' is assigned a value but never used.","'Component' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"543","text":"544"},"no-unused-vars","'diagram' is assigned a value but never used.",{"range":"545","text":"544"},[634,634],"()",[634,634]]
=======
[{"D:\\main1\\Typescript-Frontend\\ki-app\\src\\index.tsx":"1","D:\\main1\\Typescript-Frontend\\ki-app\\src\\reportWebVitals.ts":"2","D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\MainController.tsx":"3","D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\ReferringController.tsx":"4","D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\StartController.tsx":"5","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\State.tsx":"6","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Facade.tsx":"7","D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\DeliveryController.tsx":"8","D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\VisualizationController.tsx":"9","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\index.tsx":"10","D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\DataCollectionController.tsx":"11","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\DatabaseConnector.tsx":"12","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\index.tsx":"13","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Language.tsx":"14","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\AIBuilder.tsx":"15","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\User.tsx":"16","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\AIDistributor.tsx":"17","D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\SensorManager.tsx":"18","D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\ModelCreationController.tsx":"19","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\index.tsx":"20","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\State.tsx":"21","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\index.tsx":"22","D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\FinishController.tsx":"23","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\index.tsx":"24","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\State.tsx":"25","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\DeviceData.tsx":"26","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\DeliveryFormat.tsx":"27","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Project.tsx":"28","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\State.tsx":"29","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ConstantsText\\index.tsx":"30","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\NewProjectButton\\index.tsx":"31","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoadModelButton\\index.tsx":"32","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoginWindow\\index.tsx":"33","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\State.tsx":"34","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\index.tsx":"35","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Title\\index.tsx":"36","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Input\\index.tsx":"37","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\State.tsx":"38","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\SensorData.tsx":"39","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\AIModel.tsx":"40","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Session.tsx":"41","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\DataSet.tsx":"42","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\DownloadButton\\index.tsx":"43","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\EmailList\\index.tsx":"44","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\FinishButton\\index.tsx":"45","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Title\\index.tsx":"46","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\State.tsx":"47","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\DataRow.tsx":"48","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Label.tsx":"49","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\DiagramList\\index.jsx":"50","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Diagram\\index.jsx":"51","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Countdown\\index.tsx":"52","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ProjectList\\index.tsx":"53","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\QRImage\\index.tsx":"54","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ChangeToVisuBtn\\index.tsx":"55","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LinkText\\index.tsx":"56","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\Train\\index.tsx":"57","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\DataPoint.tsx":"58","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\TimeSpan.tsx":"59","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ModelList\\index.tsx":"60","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\FinishPage\\index.tsx":"61","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\FinishPage\\State.tsx":"62","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Input\\Labelling\\index.tsx":"63","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Diagram\\index.jsx":"64","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Title\\index.tsx":"65"},{"size":419,"mtime":1614549621124,"results":"66","hashOfConfig":"67"},{"size":440,"mtime":1613136674313,"results":"68","hashOfConfig":"67"},{"size":3595,"mtime":1614549620545,"results":"69","hashOfConfig":"67"},{"size":7640,"mtime":1615163418350,"results":"70","hashOfConfig":"67"},{"size":3772,"mtime":1615240516630,"results":"71","hashOfConfig":"67"},{"size":4178,"mtime":1615244694981,"results":"72","hashOfConfig":"67"},{"size":17283,"mtime":1614786272216,"results":"73","hashOfConfig":"67"},{"size":2538,"mtime":1614549620412,"results":"74","hashOfConfig":"67"},{"size":2703,"mtime":1614622824668,"results":"75","hashOfConfig":"67"},{"size":6513,"mtime":1615162041311,"results":"76","hashOfConfig":"67"},{"size":2324,"mtime":1615240516666,"results":"77","hashOfConfig":"67"},{"size":11096,"mtime":1614549621732,"results":"78","hashOfConfig":"67"},{"size":2123,"mtime":1615218578518,"results":"79","hashOfConfig":"67"},{"size":1875,"mtime":1613496972051,"results":"80","hashOfConfig":"67"},{"size":4493,"mtime":1614786272172,"results":"81","hashOfConfig":"67"},{"size":14302,"mtime":1615210675537,"results":"82","hashOfConfig":"67"},{"size":2497,"mtime":1614549621376,"results":"83","hashOfConfig":"67"},{"size":9521,"mtime":1615297102884,"results":"84","hashOfConfig":"67"},{"size":2770,"mtime":1614622852933,"results":"85","hashOfConfig":"67"},{"size":1772,"mtime":1614818312628,"results":"86","hashOfConfig":"67"},{"size":731,"mtime":1614549623768,"results":"87","hashOfConfig":"67"},{"size":3812,"mtime":1615254909453,"results":"88","hashOfConfig":"67"},{"size":3819,"mtime":1615297323186,"results":"89","hashOfConfig":"67"},{"size":4692,"mtime":1615297240358,"results":"90","hashOfConfig":"67"},{"size":584,"mtime":1615163418562,"results":"91","hashOfConfig":"67"},{"size":2085,"mtime":1614549621772,"results":"92","hashOfConfig":"67"},{"size":214,"mtime":1613141165634,"results":"93","hashOfConfig":"67"},{"size":7252,"mtime":1614549621875,"results":"94","hashOfConfig":"67"},{"size":276,"mtime":1613603444888,"results":"95","hashOfConfig":"67"},{"size":232,"mtime":1615154918957,"results":"96","hashOfConfig":"67"},{"size":1341,"mtime":1615162173829,"results":"97","hashOfConfig":"67"},{"size":737,"mtime":1615163206213,"results":"98","hashOfConfig":"67"},{"size":3593,"mtime":1615161260300,"results":"99","hashOfConfig":"67"},{"size":433,"mtime":1614549624033,"results":"100","hashOfConfig":"67"},{"size":2158,"mtime":1614820710782,"results":"101","hashOfConfig":"67"},{"size":1002,"mtime":1613136677280,"results":"102","hashOfConfig":"67"},{"size":4029,"mtime":1615210675570,"results":"103","hashOfConfig":"67"},{"size":524,"mtime":1615244694963,"results":"104","hashOfConfig":"67"},{"size":1533,"mtime":1614549621955,"results":"105","hashOfConfig":"67"},{"size":485,"mtime":1613141165378,"results":"106","hashOfConfig":"67"},{"size":1574,"mtime":1614549622013,"results":"107","hashOfConfig":"67"},{"size":6044,"mtime":1614549621668,"results":"108","hashOfConfig":"67"},{"size":363,"mtime":1613603971738,"results":"109","hashOfConfig":"67"},{"size":5962,"mtime":1614820752679,"results":"110","hashOfConfig":"67"},{"size":366,"mtime":1613498190236,"results":"111","hashOfConfig":"67"},{"size":1002,"mtime":1613315191905,"results":"112","hashOfConfig":"67"},{"size":693,"mtime":1614627362296,"results":"113","hashOfConfig":"67"},{"size":2606,"mtime":1614549621605,"results":"114","hashOfConfig":"67"},{"size":1787,"mtime":1613141165915,"results":"115","hashOfConfig":"67"},{"size":5469,"mtime":1615254982472,"results":"116","hashOfConfig":"67"},{"size":4171,"mtime":1615296706827,"results":"117","hashOfConfig":"67"},{"size":1963,"mtime":1615297102938,"results":"118","hashOfConfig":"67"},{"size":3411,"mtime":1615197297982,"results":"119","hashOfConfig":"67"},{"size":551,"mtime":1614872666478,"results":"120","hashOfConfig":"67"},{"size":433,"mtime":1615163206213,"results":"121","hashOfConfig":"67"},{"size":699,"mtime":1614812784997,"results":"122","hashOfConfig":"67"},{"size":10713,"mtime":1614818312572,"results":"123","hashOfConfig":"67"},{"size":946,"mtime":1614549621495,"results":"124","hashOfConfig":"67"},{"size":1370,"mtime":1613141166127,"results":"125","hashOfConfig":"67"},{"size":1855,"mtime":1614818019311,"results":"126","hashOfConfig":"67"},{"size":2427,"mtime":1615296706827,"results":"127","hashOfConfig":"67"},{"size":432,"mtime":1614549623546,"results":"128","hashOfConfig":"67"},{"size":2678,"mtime":1613657758471,"results":"129","hashOfConfig":"67"},{"size":3972,"mtime":1615296706833,"results":"130","hashOfConfig":"67"},{"size":1000,"mtime":1613136675758,"results":"131","hashOfConfig":"67"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"m76rte",{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"184"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"237","messages":"238","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"258","messages":"259","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"260","messages":"261","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"264","messages":"265","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\main1\\Typescript-Frontend\\ki-app\\src\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\reportWebVitals.ts",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\MainController.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\ReferringController.tsx",["268","269","270","271"],"import { Page } from \"../view/pages/PageInterface\";\r\nimport { IState, States } from \"../view/pages/State\";\r\nimport { PageController } from \"./PageController\";\r\nimport { MainController } from \"./MainController\";\r\nimport { DeliveryController } from \"./DeliveryController\";\r\nimport { VisualizationController } from \"./VisualizationController\";\r\nimport { ReferringPage } from \"../view/pages/ReferringPage/index\";\r\nimport { QRCode, ErrorCorrectLevel, QRNumber, QRAlphaNum, QR8BitByte, QRKanji } from 'qrcode-generator-ts/js';\r\n\r\n\r\n/**\r\n* Controller für die Verweisseite\r\n*/\r\nexport class RefferingController implements PageController {\r\n    private page: Page;\r\n    private state: IState;\r\n\r\n    /**\r\n     * Konstruktor des Seitenverwalters. Registriert sich als Beobachter auf seiner Seite und setzt den Start Status. \r\n     */\r\n    constructor() {\r\n        this.page = new ReferringPage({});\r\n        //this.page = new StartPage({});\r\n        //this.page = new ModelCreationPage({});\r\n        // this.page = new VisualizationPage({});\r\n\r\n        this.page.attach(this);\r\n        this.state = this.page.getState();\r\n        this.update();\r\n    }\r\n\r\n    /**\r\n     * Die Update Methode des Seitenverwalters.\r\n     */\r\n    update() {\r\n        this.state = this.page.getState();\r\n        switch (this.state.currentState) {\r\n            case States.LoadProject:\r\n                this.loadProject();\r\n                break;\r\n            case States.Register:\r\n                this.register();\r\n                break;\r\n            case States.Login:\r\n                this.login();\r\n                break;\r\n            case States.NewProjekt:\r\n                this.createNewProject();\r\n                break;\r\n            case States.LoadModel:\r\n                this.loadModel();\r\n                break;\r\n            case States.SetLanguage:\r\n                this.page.setState(MainController.getInstance().setLanguage(this.state.languageCode));\r\n                break;\r\n            case States.NeedMessage:\r\n                this.page.setState(MainController.getInstance().getMessage(this.state.messages));\r\n                break;\r\n            case States.ChangeToVisual:\r\n                MainController.getInstance().changeTo(new VisualizationController(this.state.currentProject!));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Logt den Benutzer ein\r\n     */\r\n    login() {\r\n        let adminData: { name: string, email: string, password: string; } = this.state.adminData!;\r\n        let loginSucess: Promise<boolean> = MainController.getInstance().getFacade().loginAdmin(adminData.email, adminData.password);\r\n        this.state.wait! = loginSucess;\r\n        this.state.currentState = States.waitForDB;\r\n        this.page.setState(this.state);\r\n        loginSucess.then((value: boolean) => {\r\n            if (value) {\r\n                this.state.projectData! = [];\r\n                let projectData: Promise<{ projectID: number; projectName: string; AIModelID: number[]; }[]> = MainController.getInstance().getFacade().getProjectMetas();\r\n                projectData.then((data: { projectID: number; projectName: string; AIModelID: number[]; }[]) => {\r\n                    this.state.projectData! = data;\r\n                    this.page.setState(this.state);\r\n                });\r\n\r\n            } else {\r\n                this.state.currentState = States.LoginFail;\r\n            }\r\n            this.page.setState(this.state);\r\n        });\r\n        loginSucess.catch((value: boolean) => {\r\n            console.log(value);\r\n        });\r\n        //this.state.projectData! = [{ projectID: 1, projectName: \"string\", AIModelID: [1,2] }]\r\n        //this.page.setState(this.state)\r\n    }\r\n\r\n    /**\r\n     * Registriert den Benutzer\r\n     */\r\n    register() {\r\n        let adminData: { name: string, email: string, password: string; } = this.state.adminData!;\r\n        let loginSucess: Promise<boolean> = MainController.getInstance().getFacade().registerAdmin(adminData.name, adminData.email, adminData.password);\r\n        this.state.wait! = loginSucess;\r\n        this.state.currentState = States.waitForDB;\r\n        this.page.setState(this.state);\r\n        loginSucess.then((value: boolean) => {\r\n            if (!value) {\r\n                this.state.currentState = States.LoginFail;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Erstellt ein QRCode und übergibt in an die Seite\r\n     */\r\n    createQR() {\r\n        const url = new URL(document.URL);\r\n        url.searchParams.append(\"SessionID\", MainController.getInstance().getFacade().getSessionID().toString());\r\n        url.searchParams.append(\"isMiner\", \"true\");\r\n        let link: string = url.toString();\r\n        var qr = new QRCode();\r\n        qr.setTypeNumber(5);\r\n        qr.setErrorCorrectLevel(ErrorCorrectLevel.L);\r\n        qr.addData(link);\r\n        qr.make();\r\n        this.state.qr = qr.toDataURL();\r\n        this.state.currentState = States.SetQRC;\r\n        PubSub.publish('getlink', link);\r\n    }\r\n\r\n    /**\r\n     * Erstelle ein neues Projekt, welches auch als momentanes Projekt gesetzt wird.\r\n     */\r\n    createNewProject() {\r\n        let sucess: Promise<boolean> = MainController.getInstance().getFacade().createProject(this.state.currentProject!.projectName);\r\n        this.state.wait! = sucess;\r\n        this.state.currentState = States.waitForDB;\r\n        this.page.setState(this.state);\r\n        sucess.then((value: boolean) => {\r\n            if (value) {\r\n                this.createQR();\r\n                let projectData: Promise<{ projectID: number; projectName: string; AIModelID: number[]; }[]> = MainController.getInstance().getFacade().getProjectMetas();\r\n                projectData.then((data: { projectID: number; projectName: string; AIModelID: number[]; }[]) => {\r\n                    this.state.projectData! = data;\r\n                });\r\n                PubSub.publish('getqr', this.state.qr);\r\n\r\n            } else {\r\n\r\n                this.state.currentState = States.LoadError;\r\n            }\r\n            this.page.setState(this.state);\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Setzt ein Projekt als momentanes Projekt\r\n     */\r\n    loadProject() {\r\n        let projectId: number = this.state.currentProject!.projectID!;\r\n        let sucess: Promise<boolean> = MainController.getInstance().getFacade().loadProject(projectId);\r\n        this.state.wait! = sucess;\r\n        this.state.currentState = States.waitForDB;\r\n        this.page.setState(this.state);\r\n        sucess.then((value: boolean) => {\r\n            if (value) {\r\n                this.createQR();\r\n                PubSub.publish('getqr', this.state.qr);\r\n            } else {\r\n                this.state.currentState = States.LoadError;\r\n            }\r\n        });\r\n        this.page.setState(this.state);\r\n    }\r\n\r\n    /**\r\n     * Läde ein Modell und wechselt zur delivery Seite\r\n     */\r\n    loadModel() {\r\n        let projectId: number = this.state.currentProject!.projectID;\r\n        let sucess: Promise<boolean> = MainController.getInstance().getFacade().loadProject(projectId);\r\n        this.state.wait! = sucess;\r\n        this.state.currentState = States.waitForDB;\r\n        this.page.setState(this.state);\r\n        sucess.then((value: boolean) => {\r\n            if (value) {\r\n                let deliveryConroller: DeliveryController = new DeliveryController(this.state.currentProject!);\r\n                MainController.getInstance().changeTo(deliveryConroller);\r\n            } else {\r\n                this.state.currentState = States.LoadError;\r\n            }\r\n        });\r\n        this.page.setState(this.state);\r\n    }\r\n}","D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\StartController.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\State.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Facade.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\DeliveryController.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\VisualizationController.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\DataCollectionController.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\DatabaseConnector.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\index.tsx",["272","273","274"],"import React, { Component } from 'react';\r\nimport PubSub from 'pubsub-js';\r\nimport Title from '../../components/StartComponents/Title';\r\nimport Input from '../../components/StartComponents/Input';\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from 'react-dom';\r\nimport { States } from '../State';\r\n\r\ntype Props = {\r\n\r\n};\r\n\r\nexport class StartPage extends React.Component<Props, State> implements Page {\r\n    state = new State();\r\n    observers: PageController[] = [];\r\n    constructor(props: Props) {\r\n        super(props);\r\n        const VDOM = (\r\n            <div>\r\n                <Title />\r\n                <Input />\r\n            </div>\r\n        );\r\n        ReactDOM.render(VDOM, document.getElementById('root'));\r\n        this.changeSettings();\r\n    }\r\n\r\n    /**\r\n     * Prüft ob der Nutzer \"Start\" druckt und ändert den Zustand.\r\n     */\r\n    changeSettings() {\r\n        PubSub.subscribe('settingsFinish', (_msg: any, data: {\r\n            newDataSetName: string,\r\n            usedSensorTypes: number[],\r\n            waitTime: number,\r\n            readTime: number,\r\n            availableSensorTypes: { sensorTypID: number, sensorType: string, chosen: boolean; }[];\r\n        }) => {\r\n            this.state.recordingSettings = data;\r\n            this.state.currentState = States.ChangeToDataCollection;\r\n            this.notify();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Die Methoden für Beobachtermuster\r\n     * @param observer Beobachter,nähmlich Controller\r\n     */\r\n    attach(observer: PageController) {\r\n        this.observers.push(observer);\r\n    }\r\n\r\n    detach(observer: PageController) {\r\n        const index = this.observers.indexOf(observer, 0);\r\n        if (index > -1) {\r\n            this.observers.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    notify() {\r\n        for (let index = 0; index < this.observers.length; index++) {\r\n            const element = this.observers[index];\r\n            element.update();\r\n        }\r\n    }\r\n\r\n    getState() {\r\n        return this.state;\r\n    }\r\n}\r\n","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Language.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\AIBuilder.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\User.tsx",["275"],"import { DeviceData } from \"./DeviceData\";\r\nimport { Project } from \"./Project\";\r\nimport { SensorData } from \"./SensorData\";\r\n\r\n/**\r\n * Die Vorlage für alle existierenden Benutzer\r\n */\r\nexport abstract class User {\r\n  protected id: number; //Die eindeutige User ID\r\n  protected name: string; //Der Name des Users\r\n  protected device: DeviceData; //Das Benutzergerät des Benutzers\r\n  protected currentProject?: Project;\r\n\r\n  /**\r\n   * Erstellt einen Benutzer\r\n   * @param id eindeutige Benutzer ID\r\n   * @param name Name des Benutzer\r\n   */\r\n  constructor(id: number, device: DeviceData, name?: string) {\r\n    this.id = id;\r\n    this.device = device;\r\n    if (name != null) {\r\n      this.name = name;\r\n    } else {\r\n      this.name = this.device.getName();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gibt vom aktuellen Projekt die aktuelle Datensatz ID zurück, falls diese nicht existiert wird -1 zurück gegeben.\r\n   */\r\n  getCurrentDataSetID(): number {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.getCurrentDataSetID();\r\n    } else {\r\n      return -1;\r\n    }\r\n  }\r\n\r\n  getCurrentProjectID(): number {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.getID();\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  addDatapoint(dataRowID: number, datapoint: { value: number[], relativeTime: number; }): boolean {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.addDatapoint(dataRowID, datapoint);\r\n    }\r\n    return false;\r\n\r\n  }\r\n\r\n  /**\r\n   * Gibt vom aktuellen Projekt die Datenreihen der Datensatz ID zurück und setzt diesen Datensatz als aktuellen Datensatz\r\n   * @param dataSetID die Datensatz ID von der die Datenreihen gelesen werden sollen\r\n   * @returns die Sensordaten von der Datenreihe\r\n   */\r\n  getDataRows(dataSetID: number): { dataRows?: { sensorType: number, value: number[], relativeTime: number; }[][]; } {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.getDataRows(dataSetID);\r\n    } else {\r\n      return {};\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gibt vom aktuellen Projekt die Datenreihen des aktuellen Datensatzes zurück\r\n   * @param dataSetID die Datensatz ID von der die Datenreihen gelesen werden sollen\r\n   * @returns die Sensordaten von der Datenreihe\r\n   */\r\n  getCurrentDataRows(): { dataRows?: { sensorType: number, value: number[], relativeTime: number; }[][]; } {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.getCurrentDataRows();\r\n    } else {\r\n      return {};\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gibt die Session ID des aktuellen Projekts zurück, -1 falls kein aktuelles Projekt existiert\r\n   */\r\n  getSessionID(): number {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.getSessionID();\r\n    } else {\r\n      return -1;\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Erstellt für das aktuelle Projekt einen neuen Datensatz und setzt diesen als aktuellen Datensatz.\r\n     * @param dataRowSensors die Sensoren, von denen die Daten ausgelesen werden\r\n     * @param dataSetID die eindeutige Datensatz ID\r\n     * @param dataSetName der Datensatznamen\r\n     * @param generateDate die Erstellungszeit von dem Datensatz\r\n     * @returns false, falls kein aktuelles Prokekt existiert\r\n     */\r\n  createDataSet(dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate?: number): boolean {\r\n    if (this.currentProject != null) {\r\n      this.currentProject.createDataSet(dataRowSensors, dataSetID, dataSetName, generateDate);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Löscht vom aktuellen Projekt den Datensatz, mit der übergebenen Datensatz ID\r\n   * @param dataSetID die Datensatz ID\r\n   * @returns false, falls der Datensatz mit der ID nicht existiert oder kein aktuelles Projekt existiert\r\n   */\r\n  deleteDataSet(dataSetID: number): number {\r\n    if (this.currentProject != null) {\r\n      let datasetExist: boolean = this.currentProject.deleteDataSet(dataSetID);\r\n      if (datasetExist) {\r\n        return this.currentProject.getID();\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Erstellt für das aktuelle Projekt und dem aktuellen Datensatz ein Label mit den übergebeben Parametern\r\n   * @param labelID Ist die eindeutige Label ID des Labels.\r\n   * @param start Ist die Startzeit des Labels.\r\n   * @param end Ist die Endzeit des Labels.\r\n   * @returns false, falls kein aktueller Datensatz existiert oder die LabelID für diesen Datensatz nicht eindeutig ist\r\n   */\r\n  createLabel(labelID: number, span: { start: number, end: number; }, labelName: string): boolean {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.createLabel(labelID, span, labelName);\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setzt beim aktuellen Datensatz dem Label mit der LabelID die neu übergebenen Daten\r\n   * @param labelID \r\n   * @param start startzeit des Labels in Millisekunden\r\n   * @param end endzeit des Labels in Millisekunden\r\n   */\r\n  setLabel(labelID: number, span: { start: number, end: number; }, labelName?: string): boolean {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.setLabel(labelID, span, labelName);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Löscht von dem aktuellen Projekt und dem aktuellen Datensatz das Label mit der Label ID\r\n   * @param labelID die Label ID\r\n   * @returns false, falls kein aktueller Datensatz existiert oder kein Label mit der Label ID existiert\r\n   */\r\n  deleteLabel(labelID: number): boolean {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.deleteLabel(labelID);\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gibt alle Daten von allen Labeln vom aktuellen Datensatz zurück.\r\n   * @returns leer, falls kein aktueller Datensatz existiert\r\n   */\r\n  getLabels(): { labels?: { name: string, id: number, start: number, end: number; }[]; } {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.getLabels();\r\n    }\r\n    return {};\r\n  }\r\n\r\n  /**\r\n  * Lädt ein bestehendes Projekt in das Model\r\n  * @param project die Projektdaten\r\n  * @returns false, falls die Projekt ID schon existiert\r\n  */\r\n  abstract loadProject(project: {\r\n    projectID: number, sessionID: number, projectName: string, projectData?: {\r\n      aiModelID?: number[],\r\n      dataSet?: {\r\n        dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate: number,\r\n        dataRows: {\r\n          dataRowID: number, recordingStart: number,\r\n          dataRow: { value: number[], relativeTime: number; }[];\r\n        }[],\r\n        label: { name: string, labelID: number, start: number, end: number; }[];\r\n      }[];\r\n    };\r\n  }): boolean;\r\n\r\n  /**\r\n   * Gibt alle Sensoren aus, die das Benutzergerät und das Programm unterstützt\r\n   */\r\n  getDeviceSensors(sensorTypeID: number[]): SensorData[] {\r\n    return this.device.getSensors(sensorTypeID);\r\n  }\r\n\r\n  /**\r\n   * Gibt die SensorTypID der auswählbaren Sensoren zurück\r\n   */\r\n  getAvailableSensors(): number[] {\r\n    return this.device.getAvailableSensors();\r\n  }\r\n\r\n  /**\r\n   * Gibt von allen Datensätzen vom aktuellen Projekt Informationen zurück\r\n   * @returns dataSetID ist die DatensatzID und dataSetName ist der Datensatzname\r\n   */\r\n  getDataSetMetas(): { dataSetID: number, dataSetName: string; }[] {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.getDataSetMetas();\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setzt einen neuen Benutzernamen\r\n   * @param name der neue Benutzername\r\n   */\r\n  setName(name: string): void {\r\n    this.name = name;\r\n  }\r\n\r\n  /**\r\n   * Gibt den Benutzernamen zurück\r\n   */\r\n  getName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  /**\r\n   * Setzt ein neues Benutzergerät\r\n   * @param device das Benutzergerät\r\n   */\r\n  setDevice(device: DeviceData) {\r\n    this.device = device;\r\n  }\r\n\r\n  /**\r\n   * Gibt falls ein Benutzergerät verfügbar ist dieses zurück\r\n   */\r\n  getDevice(): { device?: DeviceData; } {\r\n    return { device: this.device };\r\n  }\r\n\r\n  /**\r\n   * Gibt die Benutzer ID zurück\r\n   */\r\n  getID(): number {\r\n    return this.id;\r\n  }\r\n}\r\n\r\n/**\r\n * Die Klasse Admin dient für einen Benutzer mit einem Account\r\n */\r\nexport class Admin extends User {\r\n  private email: string; //Die eindeutige Admin Email\r\n  private project: Project[] = []; //Alle Projekte, die zu dem Admin gehören\r\n\r\n  /**\r\n   * Zum erstellen eines Admins\r\n   * @param adminID die Admin ID\r\n   * @param deviceID die Geräte ID des Admins\r\n   * @param adminName der Name des Admins\r\n   * @param email die Emailadresse des Admins\r\n   */\r\n  constructor(adminID: number, deviceID: number, adminName: string, email: string);\r\n\r\n  /**\r\n   * Für die Implementierung eines Bestehenden Admins\r\n   * @param adminID die Admin ID\r\n   * @param deviceID die Geräte ID\r\n   * @param adminName der Admin Name\r\n   * @param email die Emailadresse des Admins\r\n   * @param device das Gerät des Admins\r\n   */\r\n  constructor(adminID: number, deviceID: number, adminName: string, email: string,\r\n    device: { deviceID?: number, deviceName: string, deviceType: string, firmware: string, generation: string, MACADRESS: string, sensorInformation: { sensorTypeID: number, sensorName: string, sensorUniqueID: number; }[]; });\r\n  ////////////////////////////////////////TODO\r\n\r\n  constructor(adminID: number, deviceID: number, adminName: string, email: string,\r\n    device?: { MACADRESS: string, deviceName: string, firmware: string, generation: string, deviceType: string; }) {\r\n    super(adminID, DeviceData.loadDevice(deviceID, device), adminName);\r\n    this.email = email;\r\n  }\r\n\r\n  /**\r\n   * Implementiert die abstrakte Methode von User\r\n   */\r\n  loadProject(project: {\r\n    projectID: number, sessionID: number, projectName: string, projectData?: {\r\n      aiModelID?: number[],\r\n      dataSet?: {\r\n        dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate: number,\r\n        dataRows: {\r\n          dataRowID: number, recordingStart: number,\r\n          dataRow: { value: number[], relativeTime: number; }[];\r\n        }[],\r\n        label: { name: string, labelID: number, start: number, end: number; }[];\r\n      }[];\r\n    };\r\n  }): boolean {\r\n    var id = this.existProject(project.projectID);\r\n    var newProject: Project = new Project(project.projectID, project.sessionID, project.projectName, project.projectData);\r\n    this.currentProject = newProject;\r\n    if (id == -1) {\r\n      this.project.push(newProject);\r\n    } else {\r\n      this.project[id] = newProject;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Fügt ein neues Projekt mit den übergebenen Parametern hinzu und setzt dieses Projekt als aktuelles Projekt\r\n   * @param projectID die Projekt ID, diese muss für den Admin eindeutig sein\r\n   * @param sessionID die Session ID, diese muss global eindeutig sein\r\n   * @param projectName der Name des Projektes\r\n   * @returns Bei angabe einer Project ID, die schon existiert wird false zurück gegeben\r\n   */\r\n  createProject(projectID: number, sessionID: number, projectName: string): boolean {\r\n    if (this.existProject(projectID) === -1) {\r\n      var newproject: Project = new Project(projectID, sessionID, projectName);\r\n      this.project.push(newproject);\r\n      this.currentProject = newproject;\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param projectID \r\n   * @returns -1 falls das Projekt nicht existiert oder die Array Position des Projekts\r\n   */\r\n  private existProject(projectID: number): number {\r\n    for (let i = 0; i < this.project.length; i++) {\r\n      if (this.project[i].getID() === projectID) {\r\n        return i;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Gibt die Admin Emailadresse zurück\r\n   */\r\n  getEmail(): string {\r\n    return this.email;\r\n  }\r\n\r\n  getProjects(): Project[] {\r\n    return this.project;\r\n  }\r\n}\r\n\r\n/**\r\n * Dataminer ist die Klasse, um Datensammler mit ihren Geräte Sensoren zu spreichern\r\n */\r\nexport class Dataminer extends User {\r\n  /**\r\n   * Erstellt einen Datensammler\r\n   * @param id die Benutzer ID\r\n   * @param name der Benutzername\r\n   * @param deviceID die Geräte ID\r\n   */\r\n  constructor(id: number, deviceID: number, name?: string) {\r\n    super(id, DeviceData.loadDevice(deviceID), name);\r\n  }\r\n\r\n  /**\r\n   * Implementiert die abstrakte Methode von User\r\n   */\r\n  loadProject(project: {\r\n    projectID: number, sessionID: number, projectName: string, projectData?: {\r\n      aiModelID?: number[],\r\n      dataSet?: {\r\n        dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate: number,\r\n        dataRows: {\r\n          dataRowID: number, recordingStart: number,\r\n          dataRow: { value: number[], relativeTime: number; }[];\r\n        }[],\r\n        label: { name: string, labelID: number, start: number, end: number; }[];\r\n      }[];\r\n    };\r\n  }): boolean {\r\n\r\n    this.currentProject = new Project(project.projectID, project.sessionID, project.projectName, project.projectData);\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * AIModelUser ist die Klasse, um KI-Modell Benutzer zu speichern\r\n */\r\nexport class AIModelUser extends User {\r\n  /**\r\n   * Erstellt einen KI-Modell Benutzer, wenn Name \"\" gesetzt ist und eine Geräte ID gesetzt ist wird als Name der Geräte Name gewählt\r\n   * @param id die eindeutige Benutzer ID\r\n   * @param name der Benutzername\r\n   * @param deviceID die Geräte ID\r\n   */\r\n  constructor(id: number, deviceID: number, name?: string) {\r\n    super(id, DeviceData.loadDevice(deviceID), name);\r\n  }\r\n  /**\r\n   * Implementiert die abstrakte Methode von User\r\n   */\r\n  loadProject(project: {\r\n    projectID: number, sessionID: number, projectName: string, projectData?: {\r\n      aiModelID?: number[],\r\n      dataSet?: {\r\n        dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate: number,\r\n        dataRows: {\r\n          dataRowID: number, recordingStart: number,\r\n          dataRow: { value: number[], relativeTime: number; }[];\r\n        }[],\r\n        label: { name: string, labelID: number, start: number, end: number; }[];\r\n      }[];\r\n    };\r\n  }): boolean {\r\n\r\n    this.currentProject = new Project(project.projectID, project.sessionID, project.projectName, project.projectData);\r\n    return true;\r\n  }\r\n}","D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\AIDistributor.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\SensorManager.tsx",["276","277"],"import { MainController } from \"./MainController\";\r\nimport { Page } from \"../view/pages/PageInterface\";\r\nimport { IState, States } from \"../view/pages/State\";\r\nimport { wait } from \"@testing-library/dom\";\r\n\r\nexport class SensorManager {\r\n    private currentSensors: Sensor[] = [];\r\n    //private currentSensorIDs: number[] = [];\r\n    private facade = MainController.getInstance().getFacade();\r\n    private waitTime: number = 5;\r\n    private readTime = 10;\r\n    private startTime = 10;\r\n    private saving = true;\r\n    private sensorTypes: number[] = [];\r\n    private dataPoints: { rowId: number, sensorType: number, value: number[]; relativeTime: number; }[] = [];\r\n\r\n    private readonly TO_SECOND = 1000;\r\n\r\n    /**\r\n    * Erzeugt eine neue Datenreihe und setzt diese damit als momentan benutzte Datenreihe. \r\n    * @param sensorTypes Die Angabe der zu benutzenden Sensoren. Die position im Array bestimmt die DataRow ID jedes Sensors.\r\n    * @returns Gibt true für ein erfolgreiches Erstellen eines Dataensatzes zurück, gibt sonst false zurück.\r\n    */\r\n    setUpDataRead(sensorTypes: number[], dataSetName: string, waitTime: number, readTime: number, saving: boolean) {\r\n        //this.currentSensorIDs = sensorTypes;\r\n        // this.waitTime = waitTime * this.TO_SECOND;\r\n        //this.readTime = readTime * this.TO_SECOND;\r\n        //this.startTime = readTime * this.TO_SECOND;\r\n        this.waitTime = waitTime;\r\n        this.readTime = readTime;\r\n        this.saving = saving;\r\n        this.sensorTypes = sensorTypes;\r\n        for (let index = 0; index < sensorTypes.length; index++) {\r\n            switch (sensorTypes[index]) {\r\n                case 2:\r\n                    let accSensor = new Accelerometer({ frequency: 60 });\r\n                    this.currentSensors.push(accSensor);\r\n                    accSensor.addEventListener('reading', e => {\r\n                        this.getData(accSensor, index, sensorTypes[index]);\r\n                    });\r\n                    accSensor.addEventListener('error', event => {\r\n                        console.log(event.error.name, event.error.message);\r\n                    });\r\n                    break;\r\n                case 3:\r\n                    let gyroSensor = new Gyroscope({ frequency: 60 });\r\n                    this.currentSensors.push(gyroSensor);\r\n                    gyroSensor.addEventListener('reading', e => {\r\n                        this.getData(gyroSensor, index, sensorTypes[index]);\r\n                    });\r\n                    gyroSensor.addEventListener('error', event => {\r\n                        console.log(event.error.name, event.error.message);\r\n                    });\r\n                    break;\r\n                case 4:\r\n                    let magSensor = new Magnetometer({ frequency: 60 });\r\n                    this.currentSensors.push(magSensor);\r\n                    magSensor.addEventListener('reading', e => {\r\n                        this.getData(magSensor, index, sensorTypes[index]);\r\n                    });\r\n                    magSensor.addEventListener('error', event => {\r\n                        console.log(event.error.name, event.error.message);\r\n                    });\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        return (this.facade.createDataSet(sensorTypes, dataSetName));\r\n    }\r\n\r\n    /**\r\n    * Erfasst für den momentanene Datensatz Daten und sendet diese an die Explorer Datenbank.\r\n    * Wartet zuerst für die angegebene Wartezeit und nimmt dann für die angegeben Lesezeit daten auf.\r\n    */\r\n    readData(page: Page) {\r\n        let state: IState = page.getState();\r\n        PubSub.publish('usedsensors', this.sensorTypes);\r\n        //Warte für waitTime und update dabei die Seite\r\n        let intervalId1 = setInterval(() => {\r\n            this.waitTime = this.waitTime - 1;\r\n            //state.recordingSettings!.waitTime = this.waitTime;\r\n            //state.currentState = States.SetWaitTime;\r\n            page.setState(state);\r\n            PubSub.publish('nextCount', this.waitTime);\r\n            if (this.waitTime === 0) {\r\n                clearInterval(intervalId1);\r\n                this.startTime = new Date().getTime();\r\n                for (let index = 0; index < this.currentSensors.length; index++) {\r\n                    this.currentSensors[index].start();\r\n                }\r\n                //Nimm Daten auf verteile sie an die Seite und das Modell. Erneuere dabei die aufnahmezeit auf der Seite\r\n                let intervalId2 = setInterval(() => {\r\n                    this.readTime = this.readTime - 1;\r\n                    while (this.dataPoints.length > 0) {\r\n                        let newDataPoint = this.dataPoints.shift()!;\r\n                        state.dataPoints!.push(newDataPoint);\r\n                        MainController.getInstance().getFacade().sendDataPoint(newDataPoint.rowId, { value: newDataPoint.value, relativeTime: newDataPoint.relativeTime });\r\n                        page.setState(state);\r\n                    }\r\n                    if (this.readTime === 0) {\r\n                        clearInterval(intervalId2);\r\n                        for (let index = 0; index < this.currentSensors.length; index++) {\r\n                            this.currentSensors[index].stop();\r\n                        }\r\n                    }\r\n                }, 1000);\r\n\r\n\r\n\r\n            }\r\n        }, 1000);\r\n        /**\r\n              if (this.waitTime === 0) {\r\n                  console.log(this.currentSensors)\r\n                  console.log(this.readTime)\r\n                  for (let index = 0; index < this.currentSensors.length; index++) {\r\n                      this.currentSensors[index].start();\r\n                  }\r\n                  console.log('xxx')\r\n                  //Nimm Daten auf verteile sie an die Seite und das Modell. Erneuere dabei die aufnahmezeit auf der Seite\r\n                  let intervalId2 = setInterval(() => {\r\n                      console.log(this.currentSensors)\r\n                      console.log(this.readTime)\r\n                      console.log(this.dataPoints)\r\n                      this.readTime = this.readTime - 1;\r\n                      while (this.dataPoints.length > 0) {\r\n                          let newDataPoint = this.dataPoints.shift()!;\r\n                          state.dataPoints!.push(newDataPoint);\r\n                          MainController.getInstance().getFacade().sendDataPoint(newDataPoint.rowId, { value: newDataPoint.value, relativeTime: newDataPoint.relativeTime });\r\n                          page.setState(state);\r\n                          console.log(this.readTime)\r\n                          console.log(state.dataPoints)\r\n                      }\r\n                      if (this.readTime === 0) clearInterval(intervalId2);\r\n                  }, 1000);\r\n  \r\n                  for (let index = 0; index < this.currentSensors.length; index++) {\r\n                      this.currentSensors[index].stop();\r\n                  }\r\n              }\r\n           */\r\n    }\r\n\r\n    /**\r\n     * @returns Gibt als Zahl die Zeit in Sekunden zurück, für welche vor der Aufnahme gewartet wird. \r\n     */\r\n    getWaitTime() {\r\n        return this.waitTime;\r\n    }\r\n\r\n    /**\r\n     * @returns Gibt als Zahl die Zeit in Sekunden zurück, für welche die Aufnahme läuft. \r\n     */\r\n    getReadTime() {\r\n        return this.readTime;\r\n    }\r\n\r\n    /**\r\n    * Holt die Sensordaten für einen Sensor\r\n    * @param sensor der Sensor von dem die Daten gelsen werden\r\n    * @param sensorType Die ID des Sensortypes\r\n    */\r\n    getData(sensor: Magnetometer | Gyroscope | Accelerometer, rowId: number, sensorType: number) {\r\n        this.dataPoints.push({ rowId, sensorType, value: [sensor.x!, sensor.y!, sensor.z!], relativeTime: new Date().getTime() - this.startTime });\r\n    }\r\n\r\n    /**\r\n    * Prüft welche Sensoren verfügbar sind.\r\n    * @returns ein Array welches alle SensorTypeIDs enthält die verfügbar sind\r\n    */\r\n    async getAvailableSensors(): Promise<{ sensorTypID: number; sensorType: string; }[]> {\r\n        let sensors: { sensorTypID: number; sensorType: string; }[] = [];\r\n\r\n\r\n        // sensors.push({ sensorTypID: 2, sensorType: \"Accelerometer\" }); //Nur test\r\n        // return sensors;//Nur test\r\n\r\n\r\n        let accelerometer = new Accelerometer({ frequency: 60 });\r\n        let accelerometerExist = this.test(accelerometer);\r\n        let gyroscope = new Gyroscope({ frequency: 60 });\r\n        let gyroscopeExist = this.test(gyroscope);\r\n        /*let magnetometer = new Magnetometer();            Nicht definiert?\r\n        let magnetometerExist = this.test(magnetometer);*/\r\n\r\n        if (await accelerometerExist) {\r\n            sensors.push({ sensorTypID: 2, sensorType: \"Accelerometer\" });\r\n        }\r\n        if (await gyroscopeExist) {\r\n            sensors.push({ sensorTypID: 3, sensorType: \"Gyroscope\" });\r\n        }\r\n\r\n        /*if (await magnetometerExist) {\r\n            sensors.push({ sensorTypID: 4, sensorType: \"Magnetometer\" });\r\n        }*/\r\n        return sensors;\r\n    }\r\n\r\n    private async test(sensor: Sensor): Promise<boolean> {\r\n        var finish = false;\r\n        sensor.addEventListener('reading', e => {\r\n            finish = true;\r\n            sensor.stop();\r\n        });\r\n        sensor.start();\r\n        await this.wait(1000);\r\n        sensor.stop();\r\n        return finish;\r\n    }\r\n    private async wait(ms: number) {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n}","D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\ModelCreationController.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\State.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\controller\\FinishController.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\index.tsx",["278","279"],"import React from 'react';\r\nimport PubSub from 'pubsub-js';\r\nimport Title from '../../components/DataCollectionComponents/Title';\r\nimport Countdown from '../../components/DataCollectionComponents/Countdown';\r\nimport Diagram from '../../components/DataCollectionComponents/Diagram';\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from 'react-dom';\r\nimport { States } from '../State';\r\n\r\ntype Props = {\r\n};\r\n\r\nexport class DataCollectionPage extends React.Component<Props, State> implements Page {\r\n    state = new State;\r\n    observers: PageController[] = [];\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        const VDOM = (\r\n            <div>\r\n                <Title />\r\n                <Countdown />\r\n                <Diagram />\r\n            </div>\r\n        );\r\n        ReactDOM.render(VDOM, document.getElementById('root'));\r\n        this.finishCountdown();\r\n        this.showDiagram();\r\n        this.changeToFinish();\r\n    }\r\n\r\n\r\n    /**\r\n     * Prüft ob Countdown fertig ist und ändert den Zustand.\r\n     */\r\n    finishCountdown() {\r\n        PubSub.unsubscribe('finishCountdown');\r\n        PubSub.subscribe('finishCountdown', () => {\r\n            this.state.currentState = States.NeedInstantDiagram;\r\n            this.notify();\r\n        }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Diese Methode sollte während Datenerfassung jede Sekunde von Controller aufgerufen werden, um Bild zu updaten.\r\n     * @param countdownNumber Die Countdownzahl zu zeigen\r\n     */\r\n    showDiagram() {\r\n        // this.setState({ dataRows: dataRows });\r\n        //this.state.usedSensorNames = usedSensorNames;\r\n        // this.setState({ usedSensorNames: usedSensorNames });\r\n        //PubSub.publish('startDiagram', this.state.dataRows);\r\n        // PubSub.publish('giveLineLabels', this.state.usedSensorNames);\r\n\r\n        //Beispiel\r\n        var exdatarows = []\r\n        var exdatapoints = []\r\n        const allpoints = [{ rowId: 0, sensorType: 85124, value: [55, 66, 12], relativeTime: 0 },\r\n        { rowId: 0, sensorType: 85124, value: [26, 21, 2], relativeTime: 1 },\r\n        { rowId: 0, sensorType: 85124, value: [91, 83, 50], relativeTime: 2 },\r\n        { rowId: 0, sensorType: 85124, value: [22, 71, 23], relativeTime: 3 },\r\n        { rowId: 0, sensorType: 85124, value: [14, 8, 77], relativeTime: 4 },\r\n        { rowId: 1, sensorType: 45157, value: [83, 44, 1], relativeTime: 0 },\r\n        { rowId: 1, sensorType: 45157, value: [78, 55, 2], relativeTime: 1 },\r\n        { rowId: 1, sensorType: 45157, value: [51, 66, 3], relativeTime: 2 },\r\n        { rowId: 1, sensorType: 45157, value: [23, 81, 50], relativeTime: 3 },\r\n        { rowId: 1, sensorType: 45157, value: [13, 20, 5], relativeTime: 4 }\r\n        ]\r\n\r\n        //jede ein datapoints addieren, kann publish in for-schleife sein,\r\n        for (var i = 0; i < allpoints.length; i++) {\r\n            if (i === 0) {\r\n                exdatapoints.push({ sensorType: allpoints[i].sensorType, value: allpoints[i].value, relativeTime: allpoints[i].relativeTime })\r\n                continue;\r\n            }\r\n            if (allpoints[i].rowId === allpoints[i - 1].rowId) {\r\n                exdatapoints.push({ sensorType: allpoints[i].sensorType, value: allpoints[i].value, relativeTime: allpoints[i].relativeTime })\r\n            } else {\r\n                exdatarows.push(exdatapoints)\r\n                exdatapoints = []\r\n                exdatapoints.push({ sensorType: allpoints[i].sensorType, value: allpoints[i].value, relativeTime: allpoints[i].relativeTime })\r\n            }\r\n        }\r\n        exdatarows.push(exdatapoints)\r\n\r\n\r\n        PubSub.publish('startDiagram', exdatarows)\r\n    }\r\n    changeToFinish() {\r\n        PubSub.unsubscribe('changeToFinish')\r\n        PubSub.subscribe('changeToFinish', (_msg: any) => {\r\n            // eslint-disable-next-line\r\n            this.state.currentState = States.ChangeToFinish\r\n            this.notify()\r\n\r\n        })\r\n    }\r\n    /**\r\n     * Die Methoden für Beobachtermuster\r\n     * @param observer Beobachter,nähmlich Controller\r\n     */\r\n    attach(observer: PageController) {\r\n        this.observers.push(observer);\r\n    }\r\n\r\n    detach(observer: PageController) {\r\n        const index = this.observers.indexOf(observer, 0);\r\n        if (index > -1) {\r\n            this.observers.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    notify() {\r\n        for (let index = 0; index < this.observers.length; index++) {\r\n            const element = this.observers[index];\r\n            element.update();\r\n        }\r\n    }\r\n\r\n    getState() {\r\n        return this.state;\r\n    }\r\n\r\n}","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\State.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\DeviceData.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\DeliveryFormat.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Project.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\State.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ConstantsText\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\NewProjectButton\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoadModelButton\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoginWindow\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\State.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Title\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Input\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\State.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\SensorData.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\AIModel.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Session.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\DataSet.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\DownloadButton\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\EmailList\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\FinishButton\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Title\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\State.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\DataRow.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\Label.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\DiagramList\\index.jsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Diagram\\index.jsx",["280"],"import React, { Component } from 'react';\r\nimport PubSub from 'pubsub-js';\r\n\r\nexport default class Diagram extends Component {\r\n    state = {\r\n        lineLabels: [],\r\n        sensorRow: [],\r\n        datavalue: [],\r\n        time: [],\r\n        showDiagram: false,\r\n        diagram: {},\r\n        diagramLineLabels: {},\r\n        diagramData: {},\r\n        diagramOptions: {},\r\n        color: ['rgba(46,190,87,1)', 'rgba(68,24,232,1)', 'rgba(238,173,14,1)', 'rgba(178,34,34,1)', 'rgba(238, 130, 238,1)', 'rgba(0, 0, 0,1)',\r\n            'rgba(106, 90, 205,1)', 'rgba(238, 118, 0,1)', 'rgba(105, 105, 105,1)'],\r\n        csscolor: ['2EBE57', 'CC00FF', 'EEAD0E', 'B22222', 'EE82EE', '000000',\r\n            '6A5ACD', 'EE7600', '696969'],\r\n    };\r\n    componentDidMount() {\r\n        //PubSub.unsubscribe(\"startDiagram\")\r\n        PubSub.subscribe(\"startDiagram\", (_msg, dataRows) => {\r\n            this.setState({\r\n                lineLabels: [],\r\n                sensorRow: [],\r\n                datavalue: [],\r\n                time: [],\r\n                showDiagram: true\r\n            });\r\n            //put each value Array in State\r\n            var datavalues = [];\r\n            for (var i = 0; i < dataRows.length; i++) {\r\n                this.state.sensorRow.push(dataRows[i][0].sensorType);\r\n                for (var dataCoordinate = 0; dataCoordinate < 3; dataCoordinate++) {\r\n                    for (var j = 0; j < dataRows[i].length; j++) {\r\n                        datavalues.push(dataRows[i][j].value[dataCoordinate]);\r\n                    }\r\n                    this.state.datavalue.push(datavalues);\r\n                    datavalues = []\r\n                }\r\n            }\r\n            // eslint-disable-next-line\r\n            for (var j = 0; j < dataRows[0].length; j++) {\r\n                this.state.time.push(dataRows[0][j].relativeTime);\r\n            }\r\n\r\n            var newDatasets = [];\r\n            var lineLabels = [];\r\n            // eslint-disable-next-line\r\n            for (var i = 0; i < this.state.sensorRow.length * 3; i++) {\r\n                var coordinate = \".X\";\r\n                var sensor = this.state.sensorRow[parseInt(i / 3)];\r\n                // eslint-disable-next-line\r\n                if (i % 3 == 1) {\r\n                    coordinate = \".Y\";\r\n                }\r\n                // eslint-disable-next-line\r\n                if (i % 3 == 2) {\r\n                    coordinate = \".Z\";\r\n                }\r\n\r\n                lineLabels.push(<font color={this.state.csscolor[i]}>■{this.state.sensorRow[parseInt(i / 3)] + coordinate}<br /></font>);\r\n                //this.setState({ lineLabels: lineLabels })\r\n                newDatasets.push(\r\n                    {\r\n                        label: sensor + coordinate,\r\n                        strokeColor: this.state.color[i],\r\n                        borderWidth: 1,\r\n                        data: this.state.datavalue[i],\r\n                    }\r\n                );\r\n            }\r\n            const data = {\r\n                labels: this.state.time,\r\n                datasets: newDatasets\r\n            };\r\n            const options = {\r\n                datasetFill: false,\r\n                pointDotRadius: 2,\r\n                pointHitDetectionRadius: 1,\r\n                offsetGridLines: false,\r\n                pointDot: false\r\n            }\r\n            this.setState({ lineLabels: lineLabels })\r\n            //this.setState({ diagram: { lineLabels, data, options } })\r\n            //this.setState({ diagramLineLabels: lineLabels })\r\n            this.setState({ diagramData: data })\r\n            this.setState({ diagramOptions: options })\r\n        })\r\n\r\n    }\r\n\r\n    submit = () => {\r\n        PubSub.publish('changeToFinish');\r\n    }\r\n    render() {\r\n\r\n\r\n        var LineChart = require(\"react-chartjs\").Line;\r\n        const { lineLabels, diagramData, diagramOptions, diagram } = this.state\r\n        return (\r\n            <div>\r\n                {lineLabels}\r\n                <LineChart data={diagramData} options={diagramOptions} width=\"400\" height=\"200\" redraw />\r\n                <button type=\"button\" onClick={this.submit}>ChangeToFinish</button>\r\n            </div>\r\n        );\r\n    }\r\n}","D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Countdown\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ProjectList\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\QRImage\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ChangeToVisuBtn\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LinkText\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\Train\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\DataPoint.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\model\\TimeSpan.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ModelList\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\FinishPage\\index.tsx",["281","282"],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\pages\\FinishPage\\State.tsx",["283"],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Input\\Labelling\\index.tsx",[],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Diagram\\index.jsx",["284"],"D:\\main1\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Title\\index.tsx",[],{"ruleId":"285","severity":1,"message":"286","line":8,"column":37,"nodeType":"287","messageId":"288","endLine":8,"endColumn":45},{"ruleId":"285","severity":1,"message":"289","line":8,"column":47,"nodeType":"287","messageId":"288","endLine":8,"endColumn":57},{"ruleId":"285","severity":1,"message":"290","line":8,"column":59,"nodeType":"287","messageId":"288","endLine":8,"endColumn":69},{"ruleId":"285","severity":1,"message":"291","line":8,"column":71,"nodeType":"287","messageId":"288","endLine":8,"endColumn":78},{"ruleId":"285","severity":1,"message":"292","line":1,"column":17,"nodeType":"287","messageId":"288","endLine":1,"endColumn":26},{"ruleId":"293","severity":1,"message":"294","line":41,"column":13,"nodeType":"295","endLine":41,"endColumn":23},{"ruleId":"293","severity":1,"message":"294","line":42,"column":13,"nodeType":"295","endLine":42,"endColumn":23},{"ruleId":"296","severity":1,"message":"297","line":312,"column":12,"nodeType":"298","messageId":"299","endLine":312,"endColumn":14},{"ruleId":"285","severity":1,"message":"300","line":3,"column":18,"nodeType":"287","messageId":"288","endLine":3,"endColumn":24},{"ruleId":"285","severity":1,"message":"301","line":4,"column":10,"nodeType":"287","messageId":"288","endLine":4,"endColumn":14},{"ruleId":"302","severity":1,"message":"303","line":16,"column":13,"nodeType":"304","messageId":"305","endLine":16,"endColumn":22,"fix":"306"},{"ruleId":"293","severity":1,"message":"294","line":41,"column":13,"nodeType":"295","endLine":41,"endColumn":23},{"ruleId":"307","severity":1,"message":"308","line":100,"column":58,"nodeType":"287","messageId":"288","endLine":100,"endColumn":65},{"ruleId":"285","severity":1,"message":"292","line":1,"column":17,"nodeType":"287","messageId":"288","endLine":1,"endColumn":26},{"ruleId":"285","severity":1,"message":"300","line":10,"column":10,"nodeType":"287","messageId":"288","endLine":10,"endColumn":16},{"ruleId":"309","severity":1,"message":"310","line":2,"column":26,"nodeType":"287","messageId":"311","endLine":2,"endColumn":32},{"ruleId":"307","severity":1,"message":"312","line":3,"column":8,"nodeType":"287","messageId":"288","endLine":3,"endColumn":15},"@typescript-eslint/no-unused-vars","'QRNumber' is defined but never used.","Identifier","unusedVar","'QRAlphaNum' is defined but never used.","'QR8BitByte' is defined but never used.","'QRKanji' is defined but never used.","'Component' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'States' is defined but never used.","'wait' is defined but never used.","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"313","text":"314"},"no-unused-vars","'diagram' is assigned a value but never used.","@typescript-eslint/no-use-before-define","'States' was used before it was defined.","noUseBeforeDefine","'diagram' is defined but never used.",[634,634],"()"]
>>>>>>> c1d72199948466a34ae4b07beef48405ba5f1093
