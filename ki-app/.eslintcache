[{"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\index.tsx":"1","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\reportWebVitals.ts":"2","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\controller\\MainController.tsx":"3","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\controller\\ReferringController.tsx":"4","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\controller\\StartController.tsx":"5","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Facade.tsx":"6","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\State.tsx":"7","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\controller\\DeliveryController.tsx":"8","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\controller\\VisualizationController.tsx":"9","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\AIDistributor.tsx":"10","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\FinishPage\\index.tsx":"11","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\controller\\SensorManager.tsx":"12","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\DatabaseConnector.tsx":"13","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\controller\\DataCollectionController.tsx":"14","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\User.tsx":"15","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Language.tsx":"16","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\SensorData.tsx":"17","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\AIBuilder.tsx":"18","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\index.tsx":"19","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\DeliveryFormat.tsx":"20","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\DeviceData.tsx":"21","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\FinishPage\\State.tsx":"22","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\index.tsx":"23","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\controller\\ModelCreationController.tsx":"24","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\controller\\FinishController.tsx":"25","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\index.tsx":"26","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Project.tsx":"27","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\State.tsx":"28","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\index.tsx":"29","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\State.tsx":"30","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Title\\index.tsx":"31","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Title\\index.tsx":"32","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\State.tsx":"33","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\AIModel.tsx":"34","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Input\\Labelling\\index.tsx":"35","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Input\\index.tsx":"36","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Session.tsx":"37","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\DataSet.tsx":"38","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\index.tsx":"39","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\State.tsx":"40","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Diagram\\index.jsx":"41","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\EmailList\\index.tsx":"42","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\DownloadButton\\index.tsx":"43","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\FinishButton\\index.tsx":"44","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Title\\index.tsx":"45","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\DataRow.tsx":"46","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Countdown\\index.tsx":"47","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\State.tsx":"48","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Label.tsx":"49","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\DiagramList\\index.jsx":"50","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Diagram\\index.jsx":"51","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\Train\\index.tsx":"52","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\DataPoint.tsx":"53","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\TimeSpan.tsx":"54","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\index.tsx":"55","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\State.tsx":"56","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoadModelButton\\index.tsx":"57","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoginWindow\\index.tsx":"58","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ConstantsText\\index.tsx":"59","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\NewProjectButton\\index.tsx":"60","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ProjectList\\index.tsx":"61","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LinkText\\index.tsx":"62","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\QRImage\\index.tsx":"63","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ChangeToVisuBtn\\index.tsx":"64","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ModelList\\index.tsx":"65"},{"size":419,"mtime":1613985249266,"results":"66","hashOfConfig":"67"},{"size":440,"mtime":1613740448413,"results":"68","hashOfConfig":"67"},{"size":3634,"mtime":1616523384825,"results":"69","hashOfConfig":"67"},{"size":8896,"mtime":1616523841369,"results":"70","hashOfConfig":"67"},{"size":3558,"mtime":1616523425557,"results":"71","hashOfConfig":"67"},{"size":17818,"mtime":1616523384840,"results":"72","hashOfConfig":"67"},{"size":5027,"mtime":1616523384926,"results":"73","hashOfConfig":"67"},{"size":2518,"mtime":1616523384822,"results":"74","hashOfConfig":"67"},{"size":6891,"mtime":1616523384831,"results":"75","hashOfConfig":"67"},{"size":2497,"mtime":1613985249269,"results":"76","hashOfConfig":"67"},{"size":3247,"mtime":1616523384915,"results":"77","hashOfConfig":"67"},{"size":9070,"mtime":1616523384829,"results":"78","hashOfConfig":"67"},{"size":11326,"mtime":1616523384838,"results":"79","hashOfConfig":"67"},{"size":2317,"mtime":1616523384821,"results":"80","hashOfConfig":"67"},{"size":14312,"mtime":1616523384856,"results":"81","hashOfConfig":"67"},{"size":1656,"mtime":1616523384843,"results":"82","hashOfConfig":"67"},{"size":1639,"mtime":1616523384846,"results":"83","hashOfConfig":"67"},{"size":4493,"mtime":1616523384832,"results":"84","hashOfConfig":"67"},{"size":3556,"mtime":1616523384924,"results":"85","hashOfConfig":"67"},{"size":214,"mtime":1613740448404,"results":"86","hashOfConfig":"67"},{"size":2085,"mtime":1613985249274,"results":"87","hashOfConfig":"67"},{"size":517,"mtime":1616523384913,"results":"88","hashOfConfig":"67"},{"size":2054,"mtime":1616523384936,"results":"89","hashOfConfig":"67"},{"size":2847,"mtime":1616523384826,"results":"90","hashOfConfig":"67"},{"size":3937,"mtime":1616523384824,"results":"91","hashOfConfig":"67"},{"size":1872,"mtime":1616523384911,"results":"92","hashOfConfig":"67"},{"size":7564,"mtime":1616523384844,"results":"93","hashOfConfig":"67"},{"size":651,"mtime":1616523431963,"results":"94","hashOfConfig":"67"},{"size":3362,"mtime":1616523384910,"results":"95","hashOfConfig":"67"},{"size":276,"mtime":1613740448457,"results":"96","hashOfConfig":"67"},{"size":1000,"mtime":1613740448427,"results":"97","hashOfConfig":"67"},{"size":1002,"mtime":1613740448450,"results":"98","hashOfConfig":"67"},{"size":599,"mtime":1616523384931,"results":"99","hashOfConfig":"67"},{"size":485,"mtime":1613740448401,"results":"100","hashOfConfig":"67"},{"size":3520,"mtime":1616523384869,"results":"101","hashOfConfig":"67"},{"size":4404,"mtime":1616523384898,"results":"102","hashOfConfig":"67"},{"size":1574,"mtime":1613985249279,"results":"103","hashOfConfig":"67"},{"size":6202,"mtime":1616523384837,"results":"104","hashOfConfig":"67"},{"size":2021,"mtime":1616523384918,"results":"105","hashOfConfig":"67"},{"size":967,"mtime":1616523384908,"results":"106","hashOfConfig":"67"},{"size":4005,"mtime":1616523384866,"results":"107","hashOfConfig":"67"},{"size":6259,"mtime":1616523384864,"results":"108","hashOfConfig":"67"},{"size":450,"mtime":1616523384863,"results":"109","hashOfConfig":"67"},{"size":469,"mtime":1616523384906,"results":"110","hashOfConfig":"67"},{"size":1002,"mtime":1613740448419,"results":"111","hashOfConfig":"67"},{"size":3159,"mtime":1616523384835,"results":"112","hashOfConfig":"67"},{"size":1283,"mtime":1616523384859,"results":"113","hashOfConfig":"67"},{"size":698,"mtime":1616523384916,"results":"114","hashOfConfig":"67"},{"size":1806,"mtime":1616523384842,"results":"115","hashOfConfig":"67"},{"size":5952,"mtime":1616523384903,"results":"116","hashOfConfig":"67"},{"size":4279,"mtime":1616523384861,"results":"117","hashOfConfig":"67"},{"size":11148,"mtime":1616523384872,"results":"118","hashOfConfig":"67"},{"size":931,"mtime":1616523384833,"results":"119","hashOfConfig":"67"},{"size":1409,"mtime":1616523384854,"results":"120","hashOfConfig":"67"},{"size":7471,"mtime":1616523384922,"results":"121","hashOfConfig":"67"},{"size":855,"mtime":1616523384920,"results":"122","hashOfConfig":"67"},{"size":1377,"mtime":1616523384881,"results":"123","hashOfConfig":"67"},{"size":2486,"mtime":1616523384883,"results":"124","hashOfConfig":"67"},{"size":324,"mtime":1616523384877,"results":"125","hashOfConfig":"67"},{"size":1346,"mtime":1616523384888,"results":"126","hashOfConfig":"67"},{"size":4150,"mtime":1616523384892,"results":"127","hashOfConfig":"67"},{"size":473,"mtime":1616523384879,"results":"128","hashOfConfig":"67"},{"size":345,"mtime":1616523384894,"results":"129","hashOfConfig":"67"},{"size":731,"mtime":1616523384875,"results":"130","hashOfConfig":"67"},{"size":1342,"mtime":1616523384886,"results":"131","hashOfConfig":"67"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},"1awp6gb",{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"134"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"134"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"134"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"134"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"134"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"134"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"191","usedDeprecatedRules":"134"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"134"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"199","usedDeprecatedRules":"134"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"134"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"134"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"222","usedDeprecatedRules":"134"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"228"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"134"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"134"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"134"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"228"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"134"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"134"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"269","messages":"270","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"277","messages":"278","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"281","messages":"282","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\index.tsx",[],["283","284"],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\reportWebVitals.ts",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\controller\\MainController.tsx",["285"],"import { PageController } from \"./PageController\";\r\nimport { RefferingController } from \"./ReferringController\";\r\nimport { MainControllerInterface } from \"./MainControllerInterface\";\r\nimport { States } from \"../view/pages/State\";\r\nimport { Facade } from \"../model/Facade\";\r\nimport { StartController } from \"./StartController\";\r\n\r\n/**\r\n* Hauptverwalter der Anwendung. Enthält momentane Seite, die Fassade und verwaltet die Sprache.\r\n*/\r\nexport class MainController implements MainControllerInterface {\r\n  /**\r\n  * Fassade des Models\r\n  */\r\n  private facade: Facade;\r\n\r\n  /**\r\n  * Nach dem Singelton Muster enthält sich der Maincontroller genau einmal selber.\r\n  */\r\n  private static mainController: MainController;\r\n\r\n  /**\r\n  * Der momentane Seitencontroller\r\n  */\r\n  private currentPageController: PageController | undefined;\r\n\r\n  /**\r\n   * Konstruktor des MainControllers. Holt sich die Fassade.\r\n   */\r\n  constructor () {\r\n    this.facade = new Facade( \"de-de\" );\r\n  }\r\n\r\n  /**\r\n   * Gibt sich selber zurück und sorgt dafür das nur ein MainController besteht.\r\n   * @returns MainController\r\n   */\r\n  static getInstance () {\r\n    if ( this.mainController === undefined ) {\r\n      this.mainController = new MainController();\r\n      return this.mainController;\r\n    }\r\n    return this.mainController;\r\n  }\r\n\r\n  /**\r\n   * Prüft ob das Gerät auf das Internet zugreifen kann.\r\n   * @returns Gibt true zurück falls eine Internetverbindung besteht, sonst wird false zurück gegeben.\r\n   */\r\n  checkConnection () {\r\n    return window.navigator.onLine;\r\n  }\r\n\r\n  /**\r\n   * Prüft ob der Benutzer angemeldet ist.\r\n   * @returns Gibt true zurück falls der Benutzer angemeldet ist, sonst wird false zurück gegeben.\r\n   */\r\n  checkLoginStatus () {\r\n    return false;//this.facade.checkLogin();\r\n  }\r\n\r\n  /**\r\n   * Setzt den momentanen Seitenverwalter neu\r\n   * @param destinationPageController Der neue Seitenverwalter\r\n   */\r\n  changeTo ( destinationPageController: PageController ) {\r\n    this.currentPageController = destinationPageController;\r\n  }\r\n\r\n  /**\r\n   * Andwendungstart, entscheidet durch die URL ob es sich um Desktop oder Smartphone handelt\r\n   */\r\n  startApp () {\r\n    const queryString = window.location.search;\r\n    let urlParams = new URLSearchParams( queryString );\r\n    var controller: PageController;\r\n    if ( urlParams.get( \"isMiner\" ) === \"true\" ) {\r\n      controller = new StartController();\r\n    } else {\r\n      controller = new RefferingController();\r\n    }\r\n    this.changeTo( controller );\r\n  }\r\n\r\n  /**\r\n   * @returns Gibt die Fassade zurück\r\n   */\r\n  getFacade () {\r\n    return this.facade;\r\n  }\r\n\r\n  /**\r\n   * @param ids Alle ids, zu denen man die Texte möchte.\r\n   * @returns Gibt alle texte zu den übergebenen ids zurück.\r\n   */\r\n  getMessage ( messages: { text: string, id: number; }[] ) {\r\n    return [{ text: \"null\", id: -1 }]\r\n    let messageIDs: number[] = [];\r\n    for ( let index = 0; index < messages.length; index++ ) {\r\n      messageIDs.push( messages[ index ].id );\r\n    }\r\n    let texts: string[] = [];\r\n    for ( let index = 0; index < messages.length; index++ ) {\r\n      messages[ index ].text = texts[ index ];\r\n      return messages;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param languageCode Das Sprachkürzel als string.\r\n   * @returns Gibt true zurück falls der wechsel erfolgt ist, sonst false.\r\n   */\r\n  setLanguage ( languageCode: string ) {\r\n    let nextState: States;\r\n    let success = this.getFacade().setLanguage( languageCode );\r\n    if ( success ) {\r\n      nextState = States.NeedMessage;\r\n    } else {\r\n      nextState = States.LoadError;\r\n    }\r\n    return nextState;\r\n  }\r\n}\r\n","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\controller\\ReferringController.tsx",["286","287","288","289","290"],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\controller\\StartController.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Facade.tsx",["291","292"],"import { DeliveryFormat } from \"./DeliveryFormat\";\r\nimport { DatabaseConnector } from \"./DatabaseConnector\";\r\nimport { Language } from \"./Language\";\r\nimport { Admin, Dataminer, AIModelUser, User } from \"./User\";\r\nimport { AIBuilder } from \"./AIBuilder\";\r\nimport { AIDistributor } from \"./AIDistributor\";\r\nimport { AccelerometerData, GyroscopeData, SensorData } from \"./SensorData\";\r\nimport { isBreakStatement } from \"typescript\";\r\n\r\ninterface FacadeInterface {\r\n  createDataSet(sensorTypes: string[], dataSetName: string): boolean;\r\n  sendDataPoint(dataRowID: number, value: number[]): boolean;\r\n  readDataPoint(dataRowID: number): object;\r\n  loadProject(projectID: number): boolean;\r\n  getProjectMetas(): string[];\r\n  getDataSetMeta(): string[];\r\n  getSessionID(): number;\r\n  getDataRows(dataSetID: number): number[][][];\r\n  getCurrentDataRows(): { value: number, relativeTime: number; }[];\r\n  getMessage(messageID: number): string;\r\n  setLanguage(languageCode: string): boolean;\r\n  getLanguageMetas(): object[];\r\n  getEmail(): string;\r\n  deleteDataSet(dataSetID: number): boolean;\r\n  registerAdmin(adminName: string, email: string, password: string): boolean;\r\n  registerDataminer(dataminerName: string, sessionID: number): boolean;\r\n  registerAIModelUser(aiModelUserName: string): boolean;\r\n  loginAdmin(email: string, password: string): boolean;\r\n  logoutAdmin(): boolean;\r\n  createProject(projectName: string): boolean;\r\n  setLabel(labelID: number, start: number, end: number): boolean;\r\n  createLabel(): number; //labelid von datenbank\r\n  getLabels(): object[];\r\n  checkLogin(): boolean;\r\n  classify(aiId: number, dataSetId: number, callBack: Function): void;\r\n  getAIModel(format: DeliveryFormat): object;\r\n  applyModel(modeldata: object): void;\r\n} export type { FacadeInterface };\r\n\r\n/**\r\n * Die Facade stellt alle interaktionen mit dem Model zur Verfügung\r\n */\r\nexport class Facade {\r\n  private language?: Language; //Alle Nachrichten, in der geladenen Sprache\r\n  private dbCon: DatabaseConnector; //Die Verbindung zur Datenbank\r\n  private user?: User; //Der Benutzer, entweder Admin, Datenerfasser oder AIModelUser\r\n\r\n\r\n  /**\r\n   * Erstellt die Facade\r\n   * @param languageCode der Sprachcode von der Sprache, die geladen werden soll\r\n   */\r\n  constructor(languageCode: string) {\r\n    this.dbCon = new DatabaseConnector();\r\n    this.dbCon.loadLanguage({ languageCode }).then((language: string[]) => { this.language = new Language(language); });\r\n  }\r\n\r\n  /**\r\n   * Erstellt ein Datensatz\r\n   * @param sensorTypeID muss der Sensor Typ ID von einem Sensor des Gerätes übereinstimmen\r\n   * @param dataSetName Name des Datensatzes\r\n   * @returns true, wenn der Datensatz erstellt wurde. Dies ist der Fall, wenn ein Benutzer existiert welcher in einer Session ist und alle Sensortypen existieren.\r\n   */\r\n  async createDataSet(sensorTypeID: number[], dataSetName: string, datarowNames?: string[]): Promise<boolean> {\r\n    if (this.user != null) {\r\n      let sessionID: number = this.getSessionID();\r\n      if (sessionID >= 0) {\r\n        let projectID: number = this.user.getCurrentProjectID();\r\n        let userID: number = this.user.getID();\r\n        let dataRow: { sensorID: number, datarowName?: string; }[] = [];\r\n        for (let i = 0; i < sensorTypeID.length; i++) {\r\n          let sensorID = sensorTypeID[i];\r\n          if (datarowNames != null && datarowNames.length >= i) {\r\n            dataRow.push({ sensorID, datarowName: datarowNames[i] });\r\n          } else {\r\n            dataRow.push({ sensorID });\r\n          }\r\n        }\r\n        let dataSetID: number = await this.dbCon.createDataSet({ sessionID, projectID, userID, dataSetName, dataRow });\r\n        if (dataSetID >= 0) {\r\n          ///////////////////////////////DUMMY\r\n          var sensoren: SensorData[] = [];\r\n          for (let i = 0; i < sensorTypeID.length; i++) {\r\n            switch (sensorTypeID[i]) {\r\n              case 2:\r\n                sensoren.push(new AccelerometerData(-1, \"\", \"\"));\r\n                break;\r\n              case 3:\r\n                sensoren.push(new GyroscopeData(-1, \"\", \"\"));\r\n                break;\r\n            }\r\n          }\r\n          return this.user.createDataSet(sensoren, dataSetID, dataSetName);\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Sendet den Datenpunkt an die Datenbank ////////////////////////////////////////////////////////////////////////////////////////////Daten noch in Model speichern\r\n   * @param dataRowID die ID der aktuellen Datenreihe des eingelesenen Datenpunkts\r\n   * @param value der SensorWert\r\n   * @param relativeTime die relative Zeit zum Aufnahmestart in Millisekunden\r\n   * @return true, wenn der Datenpunkt erfolgreich an die Datenbank gesendet wurde\r\n   */\r\n  async sendDataPoint(dataRowID: number, datapoint: { value: number[], relativeTime: number; }): Promise<boolean> {\r\n    if (this.user != null) {\r\n      let sessionID: number = this.getSessionID();\r\n      let userID: number = this.user.getID();\r\n      let dataSetID: number = this.user.getCurrentDataSetID();\r\n      this.user.addDatapoint(dataRowID, datapoint);\r\n      return this.dbCon.sendDataPoint({ sessionID, userID, dataSetID, dataRowID, datapoint });\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Lädt aus der Datenbank das Projekt mit der übergebenen ID, hierfür muss der Admin angemeldet sein\r\n   * @param projectID die Projekt ID oder keine falls das aktuelle Projekt neu geladen werden soll\r\n   * @returns true, wenn das Projekt erfolgreich geladen wurde dies tritt nur ein, wenn eine Verbindung zur Datenbank besteht,\r\n   *          die Projekt ID existiert und der Admin dafür angemeldet ist\r\n   */\r\n  async loadProject(projectID?: number): Promise<boolean> {\r\n    if (this.user != null && this.user instanceof Admin) {\r\n      if (projectID == null) {\r\n        projectID = this.user?.getCurrentProjectID();\r\n      }\r\n      let adminEmail: string = this.user.getEmail();\r\n      let userID: number = this.user.getID();\r\n      return this.user.loadProject(await this.dbCon.loadProject({ userID, adminEmail, projectID }));\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Lädt vom aktuell angemeldeten Admin von seinen Projekten den Namen und die die Projekt ID\r\n   * @returns Von allen Projekten des Admins Projekt ID und Projektname\r\n   */\r\n  async getProjectMetas(): Promise<{ projectID: number, projectName: string, AIModelID: number[]; }[]> {\r\n    if (this.user != null) {\r\n      let userID: number = this.user.getID();\r\n      return await this.dbCon.getProjectMetas({ userID, adminEmail: this.getAdminEmail() });\r\n    }\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Gibt vom aktuellen Projekt von allen Datensätzen die Datensatz ID und der Datensatz Name zurück\r\n   */\r\n  getDataSetMetas(): { dataSetID: number, dataSetName: string; }[] {\r\n    if (this.user != null) {\r\n      return this.user.getDataSetMetas();\r\n    }\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Gibt die Session ID des aktuellen Projekts zurück, -1 falls kein aktuelles Projekt existiert\r\n   */\r\n  getSessionID(): number {\r\n    if (this.user != null) {\r\n      return this.user.getSessionID();\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Gibt vom aktuellen Projekt die Datenreihen der Datensatz ID zurück und setzt diesen Datensatz als aktuellen Datensatz\r\n   * @param dataSetID die Datensatz ID von der die Datenreihen gelesen werden sollen\r\n   * @returns die Sensordaten von der Datenreihe\r\n   */\r\n  getDataRows(dataSetID: number): { dataRows: { sensorType: number, datapoint: { value: number[], relativeTime: number; }[]; }[]; } {\r\n    if (this.user != null) {\r\n      return this.user.getDataRows(dataSetID);\r\n    }\r\n    return { dataRows: [] };\r\n  }\r\n\r\n  /**\r\n   * Gibt vom aktuellen Projekt die Datenreihen des aktuellen Datensatzes zurück\r\n   * @param dataSetID die Datensatz ID von der die Datenreihen gelesen werden sollen\r\n   * @returns die Sensordaten von der Datenreihe\r\n   */\r\n  getCurrentDataRows(): { dataRows: { sensorType: number, datapoint: { value: number[], relativeTime: number; }[]; }[]; } {\r\n    if (this.user != null) {\r\n      return this.user.getCurrentDataRows();\r\n    }\r\n    return { dataRows: [] };\r\n  }\r\n\r\n  /**\r\n   * Gibt aus der geladenen Sprache die Nachrichten die über die IDs angegeben werden\r\n   * @param messageID alle IDs, von denen die Sprachnachricht geladen werden soll\r\n   * @returns alle Nachrichten, in der gleichen Reihenfolge wie angefordert\r\n   */\r\n  getMessage(messageID: number[]): { messageID: number, message: string; }[] {\r\n    if (this.language != null) {\r\n      return this.language.getMessage(messageID);\r\n    }\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Gibt die auswählbaren Sensoren als ID mit ihrer Art in der Passenden Sprache zurück\r\n   */\r\n  getAvailableSensors(): { sensorTypID: number, sensorType: string; }[] {\r\n    if (this.user != null && this.language != null) {\r\n      var sensors: { sensorTypID: number, sensorType: string; }[] = [];\r\n      let message: { messageID: number, message: string; }[] = this.language.getMessage(this.user.getAvailableSensors());\r\n      for (let i = 0; i < message.length; i++) {\r\n        sensors.push({ sensorTypID: message[i].messageID, sensorType: message[i].message });\r\n      }\r\n      return sensors;\r\n    }\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Lädt die Sprache aus der Datenbank mit dem übergebenen Sprachcode\r\n   * @param languageCode Sprachcode\r\n   * @returns true, falls die Sprache erfolgreich geladen wurde\r\n   */\r\n  async setLanguage(languageCode: string): Promise<boolean> {\r\n    if (this.language != null && languageCode != this.language.getLanguageCode()) {\r\n      const language: string[] = await this.dbCon.loadLanguage({ languageCode });\r\n      return this.language.setLanguage(language);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Gibt von allen in der Datenbank verfügbaren Sprachen den Sprachcode sowie den Sprachennamen zurück\r\n   */\r\n  getLanguageMetas(): Promise<{ languageCode: number, languageName: string; }[]> {\r\n    return this.dbCon.getLanguageMetas();\r\n  };\r\n\r\n  /**\r\n   * Gibt die Email vom Admin zurück, diese kann leer sein falls kein Admin angemeldet ist\r\n   */\r\n  getAdminEmail(): string {\r\n    if (this.user instanceof Admin) {\r\n      return this.user.getEmail();\r\n    }\r\n    return \"\";\r\n  }\r\n\r\n  /**\r\n   * Löscht den Datensatz mit der übergebenen Datensatz ID\r\n   * @param dataSetID die Datensatz ID\r\n   * @returns true, wenn das löschen erfolgreich ist\r\n   */\r\n  async deleteDataSet(dataSetID: number): Promise<boolean> {\r\n    if (this.user != null) {\r\n      let projectID: number = this.user.deleteDataSet(dataSetID);\r\n      if (projectID >= 0) {\r\n        let adminEmail: string = this.getAdminEmail();\r\n        let userID = this.user.getID();\r\n        return this.dbCon.deleteDataSet({ userID, adminEmail, projectID, dataSetID });\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n\r\n  //wann Device erstellen ??? + constructor in User anpassen mit neuem Device parameter \r\n  async registerAdmin(adminName: string, adminEmail: string, password: string): Promise<boolean> {\r\n    //TODO Device\r\n    let device: { deviceID?: number, deviceName: string, deviceType: string, firmware: string, generation: string, MACADRESS: string, sensorInformation: { sensorTypeID: number, sensorName: string, sensorUniqueID: number; }[]; } = { deviceID: -1, deviceName: \"\", deviceType: \"\", firmware: \"\", generation: \"\", MACADRESS: \"\", sensorInformation: [] };\r\n    let IDs: { adminID: number, device: { deviceID: number, sensorID: number[]; }; } = await this.dbCon.registerAdmin({ adminName, adminEmail, password, device });\r\n    if (IDs.adminID >= 0) {\r\n      this.user = new Admin(IDs.adminID, IDs.device.deviceID, adminName, adminEmail);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  async registerDataminer(dataminerName: string, sessionID: number): Promise<boolean> {\r\n    //TODO Device\r\n    let device: { deviceID?: number, deviceName: string, deviceType: string, firmware: string, generation: string, MACADRESS: string, sensorInformation: { sensorTypeID: number, sensorName: string, sensorUniqueID: number; }[]; } = { deviceID: -1, deviceName: \"\", deviceType: \"\", firmware: \"\", generation: \"\", MACADRESS: \"\", sensorInformation: [] };\r\n    let dataminer: { dataminerID: number, device: { deviceID: number, sensorID: number[]; }, project: { projectID: number, projectName: string, sessionID: number; }; } = await this.dbCon.registerDataminer({ dataminerName, sessionID, device });\r\n    if (dataminer.dataminerID >= 0 && dataminer.device.deviceID >= 0) {\r\n      this.user = new Dataminer(dataminer.dataminerID, dataminer.device.deviceID, dataminerName);\r\n      this.user.loadProject(dataminer.project);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param aiModelUserName \r\n   */\r\n  async registerAIModelUser(aiModelUserName: string, modelID: number): Promise<boolean> {\r\n    //TODO Device\r\n    let device: { deviceID?: number, deviceName: string, deviceType: string, firmware: string, generation: string, MACADRESS: string, sensorInformation: { sensorTypeID: number, sensorName: string, sensorUniqueID: number; }[]; } = { deviceID: -1, deviceName: \"\", deviceType: \"\", firmware: \"\", generation: \"\", MACADRESS: \"\", sensorInformation: [] };\r\n    let aiModelUser: { aiModelUserID: number, device: { deviceID: number, sensorID: number[]; }, project: { projectID: number, projectName: string, sessionID: -1; }; } = await this.dbCon.registerAIModelUser({ aiModelUserName, modelID, device });\r\n    if (aiModelUser.aiModelUserID >= 0 && aiModelUser.device.deviceID >= 0) {\r\n      this.user = new AIModelUser(aiModelUser.aiModelUserID, aiModelUser.device.deviceID, aiModelUserName);\r\n      this.user.loadProject(aiModelUser.project);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  //TODO Device\r\n  async loginAdmin(adminEmail: string, password: string): Promise<boolean> {\r\n    if (this.user == null) {\r\n      let adminData: { admin: { adminID: number, deviceID: number, adminName: string, email: string, device: { deviceID?: number, deviceName: string, deviceType: string, firmware: string, generation: string, MACADRESS: string, sensorInformation: { sensorTypeID: number, sensorName: string, sensorUniqueID: number; }[]; }; }; } = await this.dbCon.loginAdmin({ adminEmail, password });\r\n      if (adminData.admin != null && adminData.admin.adminID !== -1) {\r\n        let admin = adminData.admin;\r\n        this.user = new Admin(admin.adminID, admin.deviceID, admin.adminName, admin.email, admin.device);\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /* eventuell implementieren\r\n    logoutAdmin(): boolean {\r\n      if (this.user != null) {\r\n        let logout = this.dbCon.logoutAdmin(this.getAdminEmail());\r\n        if (logout) {\r\n          delete this.user;\r\n        } else {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n    */\r\n\r\n  async createProject(projectName: string): Promise<boolean> {\r\n    if (this.user instanceof Admin) {\r\n      let userID = this.user.getID();\r\n      let adminEmail = this.getAdminEmail();\r\n      let project: { projectID: number, sessionID: number; } = await this.dbCon.createProject({ userID, adminEmail, projectName });\r\n      return this.user.createProject(project.projectID, project.sessionID, projectName);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  async createLabel(span: { start: number, end: number; }, labelName: string): Promise<number> {\r\n    if (this.user != null) {\r\n      let sessionID: number = this.getSessionID();\r\n      let userID: number = this.user.getID();\r\n      let datasetID: number = this.user.getCurrentDataSetID();\r\n      let labelID: number = await this.dbCon.createLabel({ sessionID, userID, datasetID, label: { span, labelName } });\r\n      if (labelID >= 0) {\r\n        let created: boolean = this.user.createLabel(labelID, span, labelName);\r\n        if (created) {\r\n          return labelID;\r\n        }\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  async setLabel(labelID: number, span: { start: number, end: number; }, labelName?: string): Promise<boolean> {\r\n    if (this.user != null) {\r\n      let setted: boolean = this.user.setLabel(labelID, span, labelName);\r\n      if (setted) {\r\n        let sessionID: number = this.getSessionID();\r\n        let userID: number = this.user.getID();\r\n        let datasetID: number = this.user.getCurrentDataSetID();\r\n        return this.dbCon.setLabel({ sessionID, userID, datasetID, label: { labelID, span, labelName } });\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  async deleteLabel(labelID: number): Promise<boolean> {\r\n    if (this.user != null) {\r\n      let deleted: boolean = this.user.deleteLabel(labelID);\r\n      if (deleted) {\r\n        let sessionID: number = this.getSessionID();\r\n        let userID: number = this.user.getID();\r\n        let dataSetID: number = this.user.getCurrentDataSetID();\r\n        return this.dbCon.deleteLabel({ sessionID, userID, dataSetID, labelID });\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n\r\n  getLabels(): { labels: { name: string, id: number, start: number, end: number; }[]; } {\r\n    if (this.user != null) {\r\n      return this.user.getLabels();\r\n    }\r\n    return { labels: [] };\r\n  }\r\n\r\n  classify(aiId: number, dataSetId: number, callBack: <R = unknown>(prediction: string | object) => R): void {\r\n    let aiBuilder = new AIBuilder(aiId);\r\n    aiBuilder.classify(dataSetId, callBack);\r\n  };\r\n\r\n  getAIModel(id: number, format: DeliveryFormat): object {\r\n    let aiDist = new AIDistributor(id, format);\r\n    return aiDist.getAIModel();\r\n  }\r\n\r\n  applyModel(trainingParameter: { dataSets: number[], imputator: string, classifier: string, scaler: string, features: string[], trainingDataPercentage?: number, slidingWindowSize?: number, slidingWindowStep?: number; }): void {\r\n    let aiBuilder = new AIBuilder(-1);\r\n    aiBuilder.applyModel(trainingParameter);\r\n  }\r\n\r\n}","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\State.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\controller\\DeliveryController.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\controller\\VisualizationController.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\AIDistributor.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\FinishPage\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\controller\\SensorManager.tsx",["293","294","295"],"import { MainController } from \"./MainController\";\r\nimport { Page } from \"../view/pages/PageInterface\";\r\nimport { IState, States } from \"../view/pages/State\";\r\nimport { State } from \"../view/pages/DeliveryPage/State\";\r\nimport { NotificationManager } from \"react-notifications\";\r\n\r\nexport class SensorManager {\r\n    private currentSensors: Sensor[] = [];\r\n    //private currentSensorIDs: number[] = [];\r\n    private facade = MainController.getInstance().getFacade();\r\n    private waitTime: number = 5;\r\n    private readTime = 10;\r\n    private startTime = 10;\r\n    private saving = true;\r\n    private page: Page | undefined = undefined\r\n    private sensorTypes: number[] = [];\r\n    private dataPoints: { rowId: number, sensorType: number, value: number[]; relativeTime: number; }[] = [];\r\n    private dataRows: { sensorType: number, datapoint: { value: number[]; relativeTime: number; }[]; }[] = [];\r\n\r\n    private readonly TO_SECOND = 1000;\r\n\r\n    /**\r\n    * Erzeugt eine neue Datenreihe und setzt diese damit als momentan benutzte Datenreihe. \r\n    * @param sensorTypes Die Angabe der zu benutzenden Sensoren. Die position im Array bestimmt die DataRow ID jedes Sensors.\r\n    * @returns Gibt true für ein erfolgreiches Erstellen eines Dataensatzes zurück, gibt sonst false zurück.\r\n    */\r\n    setUpDataRead(sensorTypes: number[], dataSetName: string, waitTime: number, readTime: number, saving: boolean) {\r\n        //this.currentSensorIDs = sensorTypes;\r\n        // this.waitTime = waitTime * this.TO_SECOND;\r\n        //this.readTime = readTime * this.TO_SECOND;\r\n        //this.startTime = readTime * this.TO_SECOND;\r\n        this.waitTime = waitTime;\r\n        this.readTime = readTime;\r\n        this.saving = saving;\r\n        this.sensorTypes = sensorTypes;\r\n        for (let index = 0; index < sensorTypes.length; index++) {\r\n            switch (sensorTypes[index]) {\r\n                case 2:\r\n                    let accSensor = new Accelerometer({ frequency: 60 });\r\n                    this.currentSensors.push(accSensor);\r\n                    accSensor.addEventListener('reading', e => {\r\n                        this.getData(accSensor, index, sensorTypes[index]);\r\n                    });\r\n                    accSensor.addEventListener('error', event => {\r\n                        console.log(event.error.name, event.error.message);\r\n                    });\r\n                    break;\r\n                case 3:\r\n                    let gyroSensor = new Gyroscope({ frequency: 60 });\r\n                    this.currentSensors.push(gyroSensor);\r\n                    gyroSensor.addEventListener('reading', e => {\r\n                        this.getData(gyroSensor, index, sensorTypes[index]);\r\n                    });\r\n                    gyroSensor.addEventListener('error', event => {\r\n                        console.log(event.error.name, event.error.message);\r\n                    });\r\n                    break;\r\n                case 4:\r\n                    let magSensor = new Magnetometer({ frequency: 60 });\r\n                    this.currentSensors.push(magSensor);\r\n                    magSensor.addEventListener('reading', e => {\r\n                        this.getData(magSensor, index, sensorTypes[index]);\r\n                    });\r\n                    magSensor.addEventListener('error', event => {\r\n                        console.log(event.error.name, event.error.message);\r\n                    });\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        return (this.facade.createDataSet(sensorTypes, dataSetName));\r\n    }\r\n\r\n    /**\r\n    * Erfasst für den momentanene Datensatz Daten und sendet diese an die Explorer Datenbank.\r\n    * Wartet zuerst für die angegebene Wartezeit und nimmt dann für die angegeben Lesezeit daten auf.\r\n    */\r\n    readData(page: Page) {\r\n        this.page = page\r\n        let state: IState = page.getState();\r\n        state.recordingSettings!.usedSensorTypes = this.sensorTypes\r\n        state.currentState = States.waitForDB\r\n        page.setState(state)\r\n        //Warte für waitTime und update dabei die Seite\r\n        let intervalId1 = setInterval(() => {\r\n            this.waitTime = this.waitTime - 1;\r\n            state.recordingSettings!.waitTime = this.waitTime;\r\n            //state.currentState = States.SetWaitTime;\r\n            page.setState(state);\r\n            if (this.waitTime === 0) {\r\n                clearInterval(intervalId1);\r\n                this.startTime = new Date().getTime();\r\n                for (let index = 0; index < this.currentSensors.length; index++) {\r\n                    this.currentSensors[index].start();\r\n                }\r\n                //Nimm Daten auf verteile sie an die Seite und das Modell. Erneuere dabei die aufnahmezeit auf der Seite\r\n                let intervalId2 = setInterval(() => {\r\n                    this.readTime = this.readTime - 1;\r\n                    while (this.dataPoints.length > 0) {\r\n                        let newDataPoint = this.dataPoints.shift()!;\r\n                        state.dataPoints!.push(newDataPoint);\r\n                        MainController.getInstance().getFacade().sendDataPoint(newDataPoint.rowId, { value: newDataPoint.value, relativeTime: newDataPoint.relativeTime });\r\n                        page.setState(state);\r\n                    }\r\n                    if (this.readTime === 0) {\r\n                        clearInterval(intervalId2);\r\n                        for (let index = 0; index < this.currentSensors.length; index++) {\r\n                            this.currentSensors[index].stop();\r\n                        }\r\n                    }\r\n                }, 1000);\r\n            }\r\n        }, 1000);\r\n    }\r\n\r\n    private saveDatapointinRow(dataPoint: { rowId: number, sensorType: number, value: number[]; relativeTime: number; }) {\r\n        while (this.dataRows.length - 1 < dataPoint.rowId) {\r\n            this.dataRows.push({ sensorType: -1, datapoint: [] });\r\n        }\r\n        this.dataRows[dataPoint.rowId].sensorType = dataPoint.sensorType;\r\n        this.dataRows[dataPoint.rowId].datapoint.push({ value: dataPoint.value, relativeTime: dataPoint.relativeTime });\r\n\r\n        if (this.page != undefined) {\r\n            let state = this.page.getState()\r\n            state.dataRows = this.dataRows\r\n            this.page.setState(state)\r\n        }\r\n        \r\n        PubSub.publish('startDiagram', this.dataRows);\r\n        PubSub.publish('finishDiagram', this.dataRows);\r\n    }\r\n\r\n    /**\r\n     * @returns Gibt als Zahl die Zeit in Sekunden zurück, für welche vor der Aufnahme gewartet wird. \r\n     */\r\n    getWaitTime() {\r\n        return this.waitTime;\r\n    }\r\n\r\n    /**\r\n     * @returns Gibt als Zahl die Zeit in Sekunden zurück, für welche die Aufnahme läuft. \r\n     */\r\n    getReadTime() {\r\n        return this.readTime;\r\n    }\r\n\r\n    /**\r\n    * Holt die Sensordaten für einen Sensor\r\n    * @param sensor der Sensor von dem die Daten gelsen werden\r\n    * @param sensorType Die ID des Sensortypes\r\n    */\r\n    private getData(sensor: Magnetometer | Gyroscope | Accelerometer, rowId: number, sensorType: number) {\r\n        const point = { rowId, sensorType, value: [sensor.x!, sensor.y!, sensor.z!], relativeTime: (new Date().getTime() - this.startTime) / 1000 };\r\n        this.dataPoints.push(point);\r\n        this.saveDatapointinRow(point);\r\n    }\r\n\r\n    /**\r\n    * Prüft welche Sensoren verfügbar sind.\r\n    * @returns ein Array welches alle SensorTypeIDs enthält die verfügbar sind\r\n    */\r\n    async getAvailableSensors(): Promise<{ sensorTypID: number; sensorType: string; }[]> {\r\n        let sensors: { sensorTypID: number; sensorType: string; }[] = [];\r\n\r\n\r\n        // sensors.push({ sensorTypID: 2, sensorType: \"Accelerometer\" }); //Nur test\r\n        // return sensors;//Nur test\r\n\r\n\r\n        let accelerometer = new Accelerometer({ frequency: 60 });\r\n        let accelerometerExist = this.existSensor(accelerometer);\r\n        let gyroscope = new Gyroscope({ frequency: 60 });\r\n        let gyroscopeExist = this.existSensor(gyroscope);\r\n        /*let magnetometer = new Magnetometer();            Nicht definiert?\r\n        let magnetometerExist = this.test(magnetometer);*/\r\n\r\n        if (await accelerometerExist) {\r\n            sensors.push({ sensorTypID: 2, sensorType: \"Accelerometer\" });\r\n        }\r\n        if (await gyroscopeExist) {\r\n            sensors.push({ sensorTypID: 3, sensorType: \"Gyroscope\" });\r\n        }\r\n\r\n        /*if (await magnetometerExist) {\r\n            sensors.push({ sensorTypID: 4, sensorType: \"Magnetometer\" });\r\n        }*/\r\n        return sensors;\r\n    }\r\n\r\n    private async existSensor(sensor: Sensor): Promise<boolean> {\r\n        var finish = false;\r\n        sensor.addEventListener('reading', e => {\r\n            finish = true;\r\n            sensor.stop();\r\n        });\r\n        sensor.start();\r\n        await this.wait(1000);\r\n        sensor.stop();\r\n        return finish;\r\n    }\r\n    private async wait(ms: number) {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n}","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\DatabaseConnector.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\controller\\DataCollectionController.tsx",["296"],"import { DataCollectionPage } from \"../view/pages/DataCollectionPage/index\";\r\nimport { Page } from \"../view/pages/PageInterface\";\r\nimport { IState, States } from \"../view/pages/State\";\r\nimport { PageController } from \"./PageController\";\r\nimport { SensorManager } from \"./SensorManager\";\r\nimport { MainController } from \"./MainController\";\r\nimport { FinishController } from \"./FinishController\";\r\nimport { NotificationManager } from \"react-notifications\";\r\n\r\n/**\r\n* Controller der die Datenerfassungsseite verwaltet\r\n*/\r\nexport class DataCollectionController implements PageController {\r\n    /**\r\n    * Für die Verwaltung der Sensoren verantwortlich\r\n    */\r\n    private sensorManager: SensorManager;\r\n    /**\r\n    * Seite welche gerade von dem Controller verwaltet wird\r\n    */\r\n    private page: Page = new DataCollectionPage();\r\n    /**\r\n    * Status der Seite\r\n    */\r\n    private state: IState;\r\n\r\n    /**\r\n     * Konstruktor des Seitenverwalters. Registriert sich als Beobachter auf seiner Seite und setzt den start Status.\r\n     * Dieser Seitenverwalter benötigt einen SensorManager, welcher schon initilisiert wurde. \r\n     */\r\n    constructor(sensorManager: SensorManager) {\r\n        this.sensorManager = sensorManager;\r\n        this.page.attach(this);\r\n        this.state = this.page.getState();\r\n        this.state.leadTime = this.sensorManager.getWaitTime();\r\n\r\n        this.sensorManager.readData(this.page);\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * Die Update Methode des Seitenverwalters.\r\n     */\r\n    update() {\r\n        let state = this.page.getState();\r\n        switch (state.currentState) {\r\n            case States.StartDataRead:\r\n                this.sensorManager.readData(this.page);\r\n                break;\r\n            case States.NeedMessage:\r\n                this.page.setState(MainController.getInstance().getMessage(this.state.messages));\r\n                break;\r\n            case States.NeedInstantDiagram:\r\n                break;\r\n            case States.ChangeToFinish:\r\n                MainController.getInstance().changeTo(new FinishController());\r\n                break;\r\n            //case States.SetWaitTime:\r\n            //    PubSub.publish('nextCount', this.state.recordingSettings!.waitTime);\r\n            //    break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\User.tsx",["297","298"],"import { DeviceData } from \"./DeviceData\";\r\nimport { Project } from \"./Project\";\r\nimport { SensorData } from \"./SensorData\";\r\n\r\n/**\r\n * Die Vorlage für alle existierenden Benutzer\r\n */\r\nexport abstract class User {\r\n  protected id: number; //Die eindeutige User ID\r\n  protected name: string; //Der Name des Users\r\n  protected device: DeviceData; //Das Benutzergerät des Benutzers\r\n  protected currentProject?: Project;\r\n\r\n  /**\r\n   * Erstellt einen Benutzer\r\n   * @param id eindeutige Benutzer ID\r\n   * @param name Name des Benutzer\r\n   */\r\n  constructor(id: number, device: DeviceData, name?: string) {\r\n    this.id = id;\r\n    this.device = device;\r\n    if (name != null) {\r\n      this.name = name;\r\n    } else {\r\n      this.name = this.device.getName();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gibt vom aktuellen Projekt die aktuelle Datensatz ID zurück, falls diese nicht existiert wird -1 zurück gegeben.\r\n   */\r\n  getCurrentDataSetID(): number {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.getCurrentDataSetID();\r\n    } else {\r\n      return -1;\r\n    }\r\n  }\r\n\r\n  getCurrentProjectID(): number {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.getID();\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  addDatapoint(dataRowID: number, datapoint: { value: number[], relativeTime: number; }): boolean {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.addDatapoint(dataRowID, datapoint);\r\n    }\r\n    return false;\r\n\r\n  }\r\n\r\n  /**\r\n   * Gibt vom aktuellen Projekt die Datenreihen der Datensatz ID zurück und setzt diesen Datensatz als aktuellen Datensatz\r\n   * @param dataSetID die Datensatz ID von der die Datenreihen gelesen werden sollen\r\n   * @returns die Sensordaten von der Datenreihe\r\n   */\r\n  getDataRows(dataSetID: number): { dataRows: { sensorType: number, datapoint: { value: number[], relativeTime: number; }[]; }[]; } {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.getDataRows(dataSetID);\r\n    } else {\r\n      return { dataRows: [] };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gibt vom aktuellen Projekt die Datenreihen des aktuellen Datensatzes zurück\r\n   * @param dataSetID die Datensatz ID von der die Datenreihen gelesen werden sollen\r\n   * @returns die Sensordaten von der Datenreihe\r\n   */\r\n  getCurrentDataRows(): { dataRows: { sensorType: number, datapoint: { value: number[], relativeTime: number; }[]; }[]; } {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.getCurrentDataRows();\r\n    } else {\r\n      console.log(this.currentProject);\r\n      return { dataRows: [] };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gibt die Session ID des aktuellen Projekts zurück, -1 falls kein aktuelles Projekt existiert\r\n   */\r\n  getSessionID(): number {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.getSessionID();\r\n    } else {\r\n      return -1;\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Erstellt für das aktuelle Projekt einen neuen Datensatz und setzt diesen als aktuellen Datensatz.\r\n     * @param dataRowSensors die Sensoren, von denen die Daten ausgelesen werden\r\n     * @param dataSetID die eindeutige Datensatz ID\r\n     * @param dataSetName der Datensatznamen\r\n     * @param generateDate die Erstellungszeit von dem Datensatz\r\n     * @returns false, falls kein aktuelles Prokekt existiert\r\n     */\r\n  createDataSet(dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate?: number): boolean {\r\n    if (this.currentProject != null) {\r\n      this.currentProject.createDataSet(dataRowSensors, dataSetID, dataSetName, generateDate);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Löscht vom aktuellen Projekt den Datensatz, mit der übergebenen Datensatz ID\r\n   * @param dataSetID die Datensatz ID\r\n   * @returns false, falls der Datensatz mit der ID nicht existiert oder kein aktuelles Projekt existiert\r\n   */\r\n  deleteDataSet(dataSetID: number): number {\r\n    if (this.currentProject != null) {\r\n      let datasetExist: boolean = this.currentProject.deleteDataSet(dataSetID);\r\n      if (datasetExist) {\r\n        return this.currentProject.getID();\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Erstellt für das aktuelle Projekt und dem aktuellen Datensatz ein Label mit den übergebeben Parametern\r\n   * @param labelID Ist die eindeutige Label ID des Labels.\r\n   * @param start Ist die Startzeit des Labels.\r\n   * @param end Ist die Endzeit des Labels.\r\n   * @returns false, falls kein aktueller Datensatz existiert oder die LabelID für diesen Datensatz nicht eindeutig ist\r\n   */\r\n  createLabel(labelID: number, span: { start: number, end: number; }, labelName: string): boolean {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.createLabel(labelID, span, labelName);\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setzt beim aktuellen Datensatz dem Label mit der LabelID die neu übergebenen Daten\r\n   * @param labelID \r\n   * @param start startzeit des Labels in Millisekunden\r\n   * @param end endzeit des Labels in Millisekunden\r\n   */\r\n  setLabel(labelID: number, span: { start: number, end: number; }, labelName?: string): boolean {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.setLabel(labelID, span, labelName);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Löscht von dem aktuellen Projekt und dem aktuellen Datensatz das Label mit der Label ID\r\n   * @param labelID die Label ID\r\n   * @returns false, falls kein aktueller Datensatz existiert oder kein Label mit der Label ID existiert\r\n   */\r\n  deleteLabel(labelID: number): boolean {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.deleteLabel(labelID);\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gibt alle Daten von allen Labeln vom aktuellen Datensatz zurück.\r\n   * @returns leer, falls kein aktueller Datensatz existiert\r\n   */\r\n  getLabels(): { labels: { name: string, id: number, start: number, end: number; }[]; } {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.getLabels();\r\n    }\r\n    return { labels: [] };\r\n  }\r\n\r\n  /**\r\n  * Lädt ein bestehendes Projekt in das Model\r\n  * @param project die Projektdaten\r\n  * @returns false, falls die Projekt ID schon existiert\r\n  */\r\n  abstract loadProject(project: {\r\n    projectID: number, sessionID: number, projectName: string, projectData?: {\r\n      aiModelID?: number[],\r\n      dataSet?: {\r\n        dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate: number,\r\n        dataRows: {\r\n          dataRowID: number,\r\n          dataRow: { value: number[], relativeTime: number; }[];\r\n        }[],\r\n        label: { name: string, labelID: number, start: number, end: number; }[];\r\n      }[];\r\n    };\r\n  }): boolean;\r\n\r\n  /**\r\n   * Gibt alle Sensoren aus, die das Benutzergerät und das Programm unterstützt\r\n   */\r\n  getDeviceSensors(sensorTypeID: number[]): SensorData[] {\r\n    return this.device.getSensors(sensorTypeID);\r\n  }\r\n\r\n  /**\r\n   * Gibt die SensorTypID der auswählbaren Sensoren zurück\r\n   */\r\n  getAvailableSensors(): number[] {\r\n    return this.device.getAvailableSensors();\r\n  }\r\n\r\n  /**\r\n   * Gibt von allen Datensätzen vom aktuellen Projekt Informationen zurück\r\n   * @returns dataSetID ist die DatensatzID und dataSetName ist der Datensatzname\r\n   */\r\n  getDataSetMetas(): { dataSetID: number, dataSetName: string; }[] {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.getDataSetMetas();\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setzt einen neuen Benutzernamen\r\n   * @param name der neue Benutzername\r\n   */\r\n  setName(name: string): void {\r\n    this.name = name;\r\n  }\r\n\r\n  /**\r\n   * Gibt den Benutzernamen zurück\r\n   */\r\n  getName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  /**\r\n   * Setzt ein neues Benutzergerät\r\n   * @param device das Benutzergerät\r\n   */\r\n  setDevice(device: DeviceData) {\r\n    this.device = device;\r\n  }\r\n\r\n  /**\r\n   * Gibt falls ein Benutzergerät verfügbar ist dieses zurück\r\n   */\r\n  getDevice(): { device?: DeviceData; } {\r\n    return { device: this.device };\r\n  }\r\n\r\n  /**\r\n   * Gibt die Benutzer ID zurück\r\n   */\r\n  getID(): number {\r\n    return this.id;\r\n  }\r\n}\r\n\r\n/**\r\n * Die Klasse Admin dient für einen Benutzer mit einem Account\r\n */\r\nexport class Admin extends User {\r\n  private email: string; //Die eindeutige Admin Email\r\n  private project: Project[] = []; //Alle Projekte, die zu dem Admin gehören\r\n\r\n  /**\r\n   * Zum erstellen eines Admins\r\n   * @param adminID die Admin ID\r\n   * @param deviceID die Geräte ID des Admins\r\n   * @param adminName der Name des Admins\r\n   * @param email die Emailadresse des Admins\r\n   */\r\n  constructor(adminID: number, deviceID: number, adminName: string, email: string);\r\n\r\n  /**\r\n   * Für die Implementierung eines Bestehenden Admins\r\n   * @param adminID die Admin ID\r\n   * @param deviceID die Geräte ID\r\n   * @param adminName der Admin Name\r\n   * @param email die Emailadresse des Admins\r\n   * @param device das Gerät des Admins\r\n   */\r\n  constructor(adminID: number, deviceID: number, adminName: string, email: string,\r\n    device: { deviceID?: number, deviceName: string, deviceType: string, firmware: string, generation: string, MACADRESS: string, sensorInformation: { sensorTypeID: number, sensorName: string, sensorUniqueID: number; }[]; });\r\n  ////////////////////////////////////////TODO\r\n\r\n  constructor(adminID: number, deviceID: number, adminName: string, email: string,\r\n    device?: { MACADRESS: string, deviceName: string, firmware: string, generation: string, deviceType: string; }) {\r\n    super(adminID, DeviceData.loadDevice(deviceID, device), adminName);\r\n    this.email = email;\r\n  }\r\n\r\n  /**\r\n   * Implementiert die abstrakte Methode von User\r\n   */\r\n  loadProject(project: {\r\n    projectID: number, sessionID: number, projectName: string, projectData?: {\r\n      aiModelID?: number[],\r\n      dataSet: {\r\n        dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate: number,\r\n        dataRows: {\r\n          dataRowID: number,\r\n          dataRow: { value: number[], relativeTime: number; }[];\r\n        }[],\r\n        label: { name: string, labelID: number, start: number, end: number; }[];\r\n      }[];\r\n    };\r\n  }): boolean {\r\n    var id = this.existProject(project.projectID);\r\n    var newProject: Project = new Project(project.projectID, project.sessionID, project.projectName, project.projectData);\r\n    this.currentProject = newProject;\r\n    if (id == -1) {\r\n      this.project.push(newProject);\r\n    } else {\r\n      this.project[id] = newProject;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Fügt ein neues Projekt mit den übergebenen Parametern hinzu und setzt dieses Projekt als aktuelles Projekt\r\n   * @param projectID die Projekt ID, diese muss für den Admin eindeutig sein\r\n   * @param sessionID die Session ID, diese muss global eindeutig sein\r\n   * @param projectName der Name des Projektes\r\n   * @returns Bei angabe einer Project ID, die schon existiert wird false zurück gegeben\r\n   */\r\n  createProject(projectID: number, sessionID: number, projectName: string): boolean {\r\n    if (this.existProject(projectID) === -1) {\r\n      var newproject: Project = new Project(projectID, sessionID, projectName);\r\n      this.project.push(newproject);\r\n      this.currentProject = newproject;\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param projectID \r\n   * @returns -1 falls das Projekt nicht existiert oder die Array Position des Projekts\r\n   */\r\n  private existProject(projectID: number): number {\r\n    for (let i = 0; i < this.project.length; i++) {\r\n      if (this.project[i].getID() == projectID) {\r\n        return i;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Gibt die Admin Emailadresse zurück\r\n   */\r\n  getEmail(): string {\r\n    return this.email;\r\n  }\r\n\r\n  getProjects(): Project[] {\r\n    return this.project;\r\n  }\r\n}\r\n\r\n/**\r\n * Dataminer ist die Klasse, um Datensammler mit ihren Geräte Sensoren zu spreichern\r\n */\r\nexport class Dataminer extends User {\r\n  /**\r\n   * Erstellt einen Datensammler\r\n   * @param id die Benutzer ID\r\n   * @param name der Benutzername\r\n   * @param deviceID die Geräte ID\r\n   */\r\n  constructor(id: number, deviceID: number, name?: string) {\r\n    super(id, DeviceData.loadDevice(deviceID), name);\r\n  }\r\n\r\n  /**\r\n   * Implementiert die abstrakte Methode von User\r\n   */\r\n  loadProject(project: {\r\n    projectID: number, sessionID: number, projectName: string, projectData?: {\r\n      aiModelID?: number[],\r\n      dataSet: {\r\n        dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate: number,\r\n        dataRows: {\r\n          dataRowID: number,\r\n          dataRow: { value: number[], relativeTime: number; }[];\r\n        }[],\r\n        label: { name: string, labelID: number, start: number, end: number; }[];\r\n      }[];\r\n    };\r\n  }): boolean {\r\n\r\n    this.currentProject = new Project(project.projectID, project.sessionID, project.projectName, project.projectData);\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * AIModelUser ist die Klasse, um KI-Modell Benutzer zu speichern\r\n */\r\nexport class AIModelUser extends User {\r\n  /**\r\n   * Erstellt einen KI-Modell Benutzer, wenn Name \"\" gesetzt ist und eine Geräte ID gesetzt ist wird als Name der Geräte Name gewählt\r\n   * @param id die eindeutige Benutzer ID\r\n   * @param name der Benutzername\r\n   * @param deviceID die Geräte ID\r\n   */\r\n  constructor(id: number, deviceID: number, name?: string) {\r\n    super(id, DeviceData.loadDevice(deviceID), name);\r\n  }\r\n  /**\r\n   * Implementiert die abstrakte Methode von User\r\n   */\r\n  loadProject(project: {\r\n    projectID: number, sessionID: number, projectName: string, projectData?: {\r\n      aiModelID?: number[],\r\n      dataSet: {\r\n        dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate: number,\r\n        dataRows: {\r\n          dataRowID: number,\r\n          dataRow: { value: number[], relativeTime: number; }[];\r\n        }[],\r\n        label: { name: string, labelID: number, start: number, end: number; }[];\r\n      }[];\r\n    };\r\n  }): boolean {\r\n\r\n    this.currentProject = new Project(project.projectID, project.sessionID, project.projectName, project.projectData);\r\n    return true;\r\n  }\r\n}","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Language.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\SensorData.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\AIBuilder.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\DeliveryFormat.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\DeviceData.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\FinishPage\\State.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\index.tsx",["299"],"import React from 'react'\r\nimport './VisualizationPage.css'\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from 'react-dom';\r\nimport { States } from '../State';\r\nimport FinishButton from '../../components/VisualizationComponents/FinishButton';\r\nimport DiagramList from '../../components/VisualizationComponents/DiagramList';\r\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\r\nimport 'react-notifications/lib/notifications.css';\r\n\r\n\r\nexport class VisualizationPage implements Page {\r\n    private state: State\r\n    private observers: PageController[] = [];\r\n\r\n    constructor() {\r\n        this.state = new State()\r\n        this.update()\r\n    }\r\n\r\n    update() {\r\n        this.notify()\r\n        const VDOM = (\r\n            <div className=\"visualizationpage\">\r\n\r\n                <DiagramList\r\n                    currentDataSet={this.state.currentDataSet!}\r\n                //testDataSet={this.state.testDataSet!}\r\n                />\r\n                <FinishButton pageChangeToCreation={this.changetoCreation.bind(this)} />\r\n\r\n                <NotificationContainer />\r\n            </div>\r\n        );\r\n        ReactDOM.render(VDOM, document.getElementById('root'));\r\n    }\r\n\r\n\r\n    attach(observer: PageController) {\r\n        this.observers.push(observer);\r\n    }\r\n\r\n    detach(observer: PageController) {\r\n        const index = this.observers.indexOf(observer, 0);\r\n        if (index > -1) {\r\n            this.observers.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    notify() {\r\n        for (let index = 0; index < this.observers.length; index++) {\r\n            const element = this.observers[index];\r\n            element.update();\r\n        }\r\n    }\r\n\r\n    getState() {\r\n        return this.state;\r\n    }\r\n    setState(state: any) {\r\n        this.state = state\r\n        this.update()\r\n    }\r\n\r\n    changetoCreation() {\r\n        this.state.currentState = States.ChangeToCreation\r\n        this.notify()\r\n    }\r\n}\r\n","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\controller\\ModelCreationController.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\controller\\FinishController.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\index.tsx",["300","301","302"],"import React from 'react';\r\nimport DownloadButton from '../../components/DeliveryComponents/DownloadButton';\r\nimport EmailList from '../../components/DeliveryComponents/EmailList';\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from 'react-dom';\r\nimport { States } from '../State';\r\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\r\nimport 'react-notifications/lib/notifications.css';\r\nexport class DeliveryPage implements Page {\r\n\r\n\tstate = new State;\r\n\tobservers: PageController[] = [];\r\n\r\n\tconstructor() {\r\n\t\tthis.state = new State()\r\n\t}\r\n\r\n\r\n\tupdate() {\r\n\t\tthis.notify()\r\n\t\tconst VDOM = (\r\n\t\t\t<div>\r\n\t\t\t\t<EmailList delivery={this.delivery.bind(this)} />\r\n\t\t\t\t<DownloadButton download={this.download.bind(this)} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t\tif (document.getElementById( 'root' ) !== null) {\r\n            ReactDOM.render( VDOM, document.getElementById( 'root' ) );\r\n        }\r\n\t}\r\n\r\n\r\n\tattach(observer: PageController) {\r\n\t\tthis.observers.push(observer);\r\n\t}\r\n\r\n\tdetach(observer: PageController) {\r\n\t\tconst index = this.observers.indexOf(observer, 0);\r\n\t\tif (index > -1) {\r\n\t\t\tthis.observers.splice(index, 1);\r\n\t\t}\r\n\t}\r\n\r\n\tnotify() {\r\n\t\tfor (let index = 0; index < this.observers.length; index++) {\r\n\t\t\tconst element = this.observers[index];\r\n\t\t\telement.update();\r\n\t\t}\r\n\t}\r\n\r\n\tgetState() {\r\n\t\treturn this.state;\r\n\t}\r\n\r\n\tsetState(state: any) {\r\n\t\tthis.state = state\r\n\t\tthis.update()\r\n\t}\r\n\r\n\tdelivery(chosenEmails: string[]) {\r\n\r\n\t\t// eslint-disable-next-line\r\n\t\tthis.state.currentState = States.DeliverWeb\r\n\t\t// eslint-disable-next-line\r\n\t\tthis.state.chosenEmails = chosenEmails\r\n\t\tthis.notify()\r\n\t}\r\n\r\n\tdownload() {\r\n\r\n\t\t// eslint-disable-next-line\r\n\t\tthis.state.currentState = States.NeedDownload\r\n\t\tthis.notify()\r\n\t}\r\n\r\n\r\n}\r\n","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Project.tsx",["303","304","305"],"import { AIModel } from \"./AIModel\";\r\nimport { DataSet } from \"./DataSet\";\r\nimport { SensorData } from \"./SensorData\";\r\nimport { Session } from \"./Session\";\r\n\r\n/**\r\n * Diese Klasse speichert alle Informationen zu einem Projekt.\r\n * Ein Projekt beinhaltet aufgezeichnete Datensätze (DataSet) sowie Informationen zu den Datensätzen.\r\n */\r\nexport class Project {\r\n  private id: number; //Die eindeutige Projekt ID\r\n  private name: string; //Der Name des Projektes\r\n  private session: Session; //Die Session in dem das Projekt arbeitet\r\n  private aiModel: AIModel[] = []; //Das AIModel von dem Projekt\r\n  private dataSet: DataSet[] = []; //Die Datensätze, die zu dem Projekt gehören\r\n  private currentDataSet?: DataSet; //Aktueller Datensatz\r\n\r\n  /**\r\n     * Eine bereits existierendes Projekt kann wie folgt in das Model geladen werden.\r\n     * @param projectID Die Projekt ID\r\n     * @param sessionID Die Session ID\r\n     * @param projectName Der Projektnamen\r\n     * @param admin Der Besitzer dieses Projekts für die Session\r\n     * @param aiModelID Die schon existierenden AIModel IDs\r\n     * @param dataSet Die schon existierenden Datensätze\r\n     */\r\n  constructor(projectID: number, sessionID: number, projectName: string, projectData?: {\r\n    aiModelID?: number[],\r\n    dataSet: {\r\n      dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate: number,\r\n      dataRows: {\r\n        dataRowID: number,\r\n        dataRow: { value: number[], relativeTime: number; }[];\r\n      }[],\r\n      label: { name: string, labelID: number, start: number, end: number; }[];\r\n    }[];\r\n  }) {\r\n    this.id = projectID;\r\n    this.name = projectName;\r\n    this.session = new Session(sessionID);\r\n    if (projectData != null) {\r\n      if (projectData.aiModelID != null) {\r\n        for (let i = 0; i < projectData.aiModelID.length; i++) {\r\n          this.aiModel.push(new AIModel(projectData.aiModelID[i]));\r\n        }\r\n      }\r\n      for (let i = 0; i < projectData.dataSet.length; i++) {\r\n        this.dataSet.push(new DataSet(projectData.dataSet[i].dataRowSensors, projectData.dataSet[i].dataSetID, projectData.dataSet[i].dataSetName, projectData.dataSet[i].generateDate, projectData.dataSet[i].dataRows, projectData.dataSet[i].label));\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Gibt den Projektnamen zurück\r\n   */\r\n  getName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  /**\r\n   * Löscht den Datensatz mit der DatensatzID\r\n   * @param dataSetID die Datensatz ID\r\n   */\r\n  deleteDataSet(dataSetID: number): boolean {\r\n    for (let i = 0; i < this.dataSet.length; i++) {\r\n      if (this.dataSet[i].getID() === dataSetID) {\r\n        this.dataSet.splice(i, 1);\r\n        if (this.currentDataSet != null && this.currentDataSet.getID() === dataSetID) {\r\n          delete this.currentDataSet;\r\n        }\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Gibt die Projekt ID zurück.\r\n   */\r\n  getID(): number {\r\n    return this.id;\r\n  }\r\n\r\n\r\n  /**\r\n   * Erstellt einen neuen Datensatz und setzt diesen als aktuellen Datensatz.\r\n   * @param dataRowSensors die Sensoren, von denen die Daten ausgelesen werden\r\n   * @param dataSetID die eindeutige Datensatz ID\r\n   * @param dataSetName der Datensatznamen\r\n   * @param generateDate die Erstellungszeit von dem Datensatz\r\n   */\r\n  createDataSet(dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate?: number): boolean {\r\n    if (dataRowSensors.length <= 0 || dataSetID < 0 || dataSetName.length <= 0 || generateDate != null && generateDate < 0) {\r\n      return false;\r\n    }\r\n    for (let i = 0; i < this.dataSet.length; i++) {\r\n      if (this.dataSet[i].getID() == dataSetID) {\r\n        return false;\r\n      }\r\n    }\r\n    var dataSet: DataSet = new DataSet(dataRowSensors, dataSetID, dataSetName, generateDate);\r\n    this.dataSet.push(dataSet);\r\n    this.currentDataSet = dataSet;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Gibt die aktuelle Datensatz ID zurück, falls diese nicht existiert wird -1 zurück gegeben\r\n   */\r\n  getCurrentDataSetID(): number {\r\n    if (this.currentDataSet != null) {\r\n      return this.currentDataSet.getID();\r\n    }\r\n    return -1;\r\n\r\n  }\r\n\r\n  addDatapoint(dataRowID: number, datapoint: { value: number[], relativeTime: number; }): boolean {\r\n    if (this.currentDataSet != null) {\r\n      return this.currentDataSet.addDatapoint(dataRowID, datapoint);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Gibt von allen Datensätzen Informationen zurück\r\n   * @returns dataSetID ist die DatensatzID und dataSetName ist der Datensatzname\r\n   */\r\n  getDataSetMetas(): { dataSetID: number, dataSetName: string; }[] {\r\n    var dataSetMetas: { dataSetID: number, dataSetName: string; }[] = [];\r\n    for (let i = 0; i < this.dataSet.length; i++) {\r\n      dataSetMetas.push({ dataSetID: this.dataSet[i].getID(), dataSetName: this.dataSet[i].getName() });\r\n    }\r\n    return dataSetMetas;\r\n  }\r\n\r\n  /**\r\n   * Gibt die Datenreihen der Datensatz ID zurück und setzt diesen Datensatz als aktuellen Datensatz\r\n   * @param dataSetID die Datensatz ID von der die Datenreihen gelesen werden sollen\r\n   * @returns die Sensordaten von der Datenreihe\r\n   */\r\n  getDataRows(dataSetID: number): { dataRows: { sensorType: number, datapoint: { value: number[], relativeTime: number; }[]; }[]; } {\r\n    for (let i = 0; i < this.dataSet.length; i++) {\r\n      if (this.dataSet[i].getID() === dataSetID) {\r\n        this.currentDataSet = this.dataSet[i];\r\n        return { dataRows: this.dataSet[i].getDataRows() };\r\n      }\r\n    }\r\n    return { dataRows: [] };\r\n  }\r\n\r\n  /**\r\n   * Gibt die Datenreihen der aktuellen Datenreihe zurück\r\n   * @returns die Sensordaten von der Datenreihe\r\n   */\r\n  getCurrentDataRows(): { dataRows: { sensorType: number, datapoint: { value: number[], relativeTime: number; }[]; }[]; } {\r\n    if (this.currentDataSet != null) {\r\n      return { dataRows: this.currentDataSet.getDataRows() };\r\n    }\r\n    return { dataRows: [] };\r\n  }\r\n\r\n  /**\r\n   * Gibt die Session ID zurück\r\n   */\r\n  getSessionID(): number {\r\n    return this.session.getId();\r\n  }\r\n\r\n  /**\r\n   * Setzt dem Label mit der übergebenen ID neue Werte.\r\n   * @param start Ist die neue Startzeit des Labels.\r\n   * @param end Ist die neue Endzeit des Labels.\r\n   * @param labelID Die Label ID, welche überarbeitet werden soll.\r\n   * @param labelName Ist bei Angabe der neue Name des Labels.\r\n   * @returns falls das Label nicht existiert oder es kein aktuellen Datensatz gibt wird false zurück gegeben\r\n   */\r\n  createLabel(labelID: number, span: { start: number, end: number; }, labelName: string): boolean {\r\n    if (this.currentDataSet != null) {\r\n      return this.currentDataSet.createLabel(labelID, span, labelName);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  setLabel(labelID: number, span: { start: number, end: number; }, labelName?: string): boolean {\r\n    if (this.currentDataSet != null) {\r\n      return this.currentDataSet.setLabel(labelID, span, labelName);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  deleteLabel(labelID: number): boolean {\r\n    if (this.currentDataSet != null) {\r\n      return this.currentDataSet.deleteLabel(labelID);\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gibt alle Daten von allen Labeln vom aktuellen Datensatz zurück.\r\n   * @returns leer, falls kein aktueller Datensatz existiert\r\n   */\r\n  getLabels(): { labels: { name: string, id: number, start: number, end: number; }[]; } {\r\n    if (this.currentDataSet != null) {\r\n      return { labels: this.currentDataSet.getLabels() };\r\n    }\r\n    return { labels: [] };\r\n  }\r\n}","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\State.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\index.tsx",["306","307"],"import Title from '../../components/DataCollectionComponents/Title';\r\nimport Countdown from '../../components/DataCollectionComponents/Countdown';\r\nimport Diagram from '../../components/DataCollectionComponents/Diagram';\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from 'react-dom';\r\nimport { States } from '../State';\r\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\r\nimport 'react-notifications/lib/notifications.css';\r\n\r\n/**\r\n * Darstellungsseite der Datenerfassungsseite\r\n */\r\nexport class DataCollectionPage implements Page {\r\n    state = new State;\r\n    observers: PageController[] = [];\r\n\r\n    /**\r\n    * Konstruktor der Darstellungsseite.\r\n    */\r\n    constructor () {\r\n        this.state = new State();\r\n    }\r\n\r\n    /**\r\n    * Update Methode der Darstellungsseite. Diese Methode wird nach jeder Änderung, die kein Seitenwechsel ist, aufgerufen. \r\n    * Die Methode enthält den Aufbau der Seite und wird von ihr gerendert.\r\n    * Es werden durch notify() alle controller über ein Update informiert und alle Seiten Elemente werden aktualisiert und erneut gerendert. \r\n    */\r\n    private update () {\r\n        this.notify();\r\n        const VDOM = (\r\n            <div>\r\n                <Title />\r\n                <Countdown countdownNumber={ this.state.recordingSettings?.waitTime! } chosenSensors={ this.state.recordingSettings?.usedSensorTypes! } />\r\n                <Diagram dataRows={ this.state.dataRows! } pageChangeToFinish={ this.changeToFinish.bind( this ) } />\r\n                <NotificationContainer />\r\n            </div>\r\n        );\r\n        if (document.getElementById( 'root' ) !== null) {\r\n            ReactDOM.render( VDOM, document.getElementById( 'root' ) );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Wechsel der Seite zur Fertigungsseite.\r\n     */\r\n    private changeToFinish () {\r\n        this.state.currentState = States.ChangeToFinish;\r\n        this.notify(); // Kein Update, da sonst die Seite neu rendert und der Seitenwechsel fehlschlägt\r\n    }\r\n\r\n    /**\r\n    * Durch diese Methode kann sich ein Controller als Beobachter anmelden.\r\n    * @param oberver neuer Beobachter\r\n    */\r\n    attach ( observer: PageController ) {\r\n        this.observers.push( observer );\r\n    }\r\n\r\n    /**\r\n    * Durch diese Methode kann sich ein Controller als Beobachter abmelden.\r\n    * @param oberver Beobachter der zu entfernen ist\r\n    */\r\n    detach ( observer: PageController ) {\r\n        const index = this.observers.indexOf( observer, 0 );\r\n        if ( index > -1 ) {\r\n            this.observers.splice( index, 1 );\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Durch diese Methode werden alle Beobachter über eine Änderung auf der Seite informiert.\r\n    */\r\n    notify () {\r\n        for ( let index = 0; index < this.observers.length; index++ ) {\r\n            const element = this.observers[ index ];\r\n            element.update();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Gibt den Status der Seite zurück\r\n    */\r\n    setState ( state: any ) {\r\n        this.state = state;\r\n        this.update();\r\n    }\r\n\r\n    /**\r\n     * Setzt einen neuen Zustand für die Seite und aktualisiert sie\r\n     * @param state neuer Zustand für die Seite\r\n     */\r\n    getState () {\r\n        return this.state;\r\n    }\r\n}","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\State.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Title\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Title\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\State.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\AIModel.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Input\\Labelling\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Input\\index.tsx",["308"],"import React, { Component } from \"react\";\r\nimport {NotificationContainer, NotificationManager} from 'react-notifications';\r\nimport './Input.css'\r\n\r\nexport default class Input extends Component {\r\n\r\n  props = {\r\n    pageChangeSettings: function(recordingSettings: {\r\n      newDataSetName: string, usedSensorTypes: number[], waitTime: number, readTime: number,\r\n      availableSensorTypes: { sensorTypID: number, sensorType: string, chosen: boolean; }[]\r\n    }){},\r\n    availableSensorTypes: [] as { sensorTypID: number, sensorType: string, chosen: boolean; }[]\r\n  }\r\n\r\n  state = {\r\n    name: \"\",\r\n    usedSensorTypes: [] as number[],\r\n    leadTime: \"\",\r\n    collectionTime: \"\",\r\n    //wait: new Promise(resolve => setTimeout(resolve, 1000))\r\n  };\r\n\r\n  changeLeadtime = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      leadTime: e.target.value,\r\n    });\r\n  };\r\n  \r\n  changeCollectionTime = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      collectionTime: e.target.value,\r\n    });\r\n  };\r\n\r\n  changeSensors = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    this.setState({\r\n      chosenSensors: e.target.value,\r\n    });\r\n  };\r\n\r\n  changeName = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      name: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleCheckBoxChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    let newAvailableSensorTypes = this.props.availableSensorTypes;\r\n    for (var i = 0; i < newAvailableSensorTypes.length; i++) {\r\n      // eslint-disable-next-line\r\n      if (newAvailableSensorTypes[i].sensorTypID == +e.target.value) {\r\n        newAvailableSensorTypes[i].chosen = !newAvailableSensorTypes[i].chosen;\r\n        this.setState({ availableSensorTypes: newAvailableSensorTypes, });\r\n        return;\r\n      }\r\n    }\r\n  };\r\n\r\n  submit = () => {\r\n    if (\r\n      parseInt(this.state.leadTime) >= 0 &&\r\n      parseInt(this.state.collectionTime) >= 0\r\n    ) {\r\n      let availableSensorTypes = this.props.availableSensorTypes;\r\n      var usedSensorTypes: number[] = [];\r\n      for (var i = 0; i < availableSensorTypes.length; i++) {\r\n        // eslint-disable-next-line\r\n        if (availableSensorTypes[i].chosen == true) {\r\n          usedSensorTypes.push(availableSensorTypes[i].sensorTypID);\r\n        }\r\n      }\r\n      this.setState({ usedSensorTypes: usedSensorTypes });\r\n\r\n      if ( isNaN(+this.state.leadTime) || isNaN(+this.state.collectionTime)){\r\n        NotificationManager.error(\"Die Eingabe der Zeit ist ungültig. Nur Ganze Zahlen sind Erlaubt\");\r\n        return\r\n      }\r\n\r\n      const newDataSetName = this.state.name;\r\n      const waitTime = +this.state.leadTime;\r\n      const readTime = +this.state.collectionTime;\r\n      this.props.pageChangeSettings({\r\n        newDataSetName: newDataSetName, usedSensorTypes: usedSensorTypes, waitTime: waitTime, readTime: readTime,\r\n        availableSensorTypes: availableSensorTypes\r\n      });\r\n    } else {\r\n      NotificationManager.error(\"Die Eingabe ist ungültig\");\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"input\">\r\n        <form>\r\n          Aufnahmeparameter einstellen\r\n          <br />\r\n          Vorlaufzeit:\r\n          <input\r\n            type=\"leadTime\"\r\n            value={this.state.leadTime}\r\n            onChange={this.changeLeadtime.bind(this)}\r\n          />\r\n          s<br />\r\n          Aufnahmedauer:\r\n          <input\r\n            type=\"collectionTime\"\r\n            value={this.state.collectionTime}\r\n            onChange={this.changeCollectionTime.bind(this)}\r\n          />\r\n          s<br />\r\n          Datenname:\r\n          <input\r\n            type=\"datenname\"\r\n            value={this.state.name}\r\n            onChange={this.changeName.bind(this)}\r\n          /><br />\r\n          Sensoren:\r\n          {\r\n            this.props.availableSensorTypes.map((type: { sensorTypID: number, sensorType: string, chosen: boolean; }) => {\r\n              return (<div>\r\n                <input type=\"checkbox\" value={type.sensorTypID} checked={type.chosen} onChange={(e: React.ChangeEvent<HTMLInputElement>): void => this.handleCheckBoxChange(e)} />\r\n                {type.sensorType}\r\n              </div>);\r\n            })\r\n          }\r\n\r\n          <br />\r\n          <button type=\"button\" onClick={this.submit} className=\"submit-btn\">\r\n            Start\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Session.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\DataSet.tsx",["309"],"import { DataRow } from \"./DataRow\";\r\nimport { Label } from \"./Label\";\r\nimport { SensorData } from \"./SensorData\";\r\n\r\n/**\r\n * Die Klasse fasst Datenreihen, welche Sensorwerte und deren relative Zeit besitzen, zu einem Datensatz zusammen.\r\n */\r\nexport class DataSet {\r\n  private generateDate: number; //Dies ist die Erstellungszeit dieses Datensatzes in Millisekunden.\r\n  private id: number; //Dies ist die Datensatz ID.\r\n  private name: string; //Dies ist der Name des Datensatzes.\r\n  private dataRow: DataRow[] = []; //Dies sind die Datenreihen, welche zu dem Datensatz gehören.\r\n  private label: Label[] = []; //Dies sind die existierenden Labels für den Datensatz.\r\n\r\n\r\n  /**\r\n   * Erstellt einen neuen Datensatz.\r\n   * @param dataRowSensors die Sensoren, von denen die Daten ausgelesen werden\r\n   * @param dataSetID die eindeutige Datensatz ID\r\n   * @param dataSetName der Datensatznamen\r\n   * @param generateDate die Erstellungszeit von dem Datensatz\r\n   */\r\n  constructor(dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate?: number);\r\n\r\n  /**\r\n   * Eine bereits existierende Datensatz kann wie folgt in das Model geladen werden.\r\n   * @param dataRowSensors die Sensoren, von denen die Daten ausgelesen werden, \r\n   * die Anzahl muss mit der Anzahl der Datenreihen übereinstimmen. Und der i´te Sensor wird zur i´ten Datenreihe hinzugefügt.\r\n   * @param dataSetID die eindeutige Datensatz ID\r\n   * @param dataSetName der Datensatznamen\r\n   * @param generateDate die Erstellungszeit von dem Datensatz\r\n   * @param dataRows die schon existierenden Datenreihen\r\n   * @param label die schon existierenden Labels\r\n   */\r\n  constructor(dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate: number, dataRows: { dataRowID: number, dataRow: { value: number[], relativeTime: number; }[]; }[], label: { name: string, labelID: number, start: number, end: number; }[]);\r\n  constructor(dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate?: number, dataRows?: { dataRowID: number, dataRow: { value: number[], relativeTime: number; }[]; }[], label?: { name: string, labelID: number, start: number, end: number; }[]) {\r\n    if (dataRows != null) {\r\n      for (let i = 0; i < dataRows.length && i < dataRowSensors.length; i++) {\r\n        this.dataRow.push(new DataRow(dataRowSensors[i], dataRows[i].dataRowID, dataRows[i].dataRow));\r\n      }\r\n    } else {\r\n      for (let i = 0; i < dataRowSensors.length; i++) {\r\n        this.dataRow.push(new DataRow(dataRowSensors[i], i));\r\n      }\r\n    }\r\n    if (label != null) {\r\n      for (let i = 0; i < label.length; i++) {\r\n        this.label.push(new Label(label[i].name, label[i].labelID, label[i].start, label[i].end));\r\n      }\r\n    }\r\n    if (generateDate != null) {\r\n      this.generateDate = generateDate;\r\n    } else {\r\n      this.generateDate = new Date().getTime();\r\n    }\r\n    this.id = dataSetID;\r\n    this.name = dataSetName;\r\n  }\r\n\r\n  /**\r\n   * Gibt die Datensatz ID zurück.\r\n   */\r\n  public getID(): number {\r\n    return this.id;\r\n  }\r\n\r\n  /**\r\n   * Gibt den Datensatz Namen zurück.\r\n   */\r\n  public getName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  addDatapoint(dataRowID: number, datapoint: { value: number[], relativeTime: number; }): boolean {\r\n    for (let i = 0; i < this.dataRow.length; i++) {\r\n      if (this.dataRow[i].getID() === dataRowID) {\r\n        return this.dataRow[i].addDatapoint(datapoint);\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Gibt alle Datenreihen zurück.\r\n   * @returns Ein zwei Dimensionales Array, die Erste Dimension wählt die Datenreihe und die zweite Dimension den Datenpunkt.\r\n   */\r\n  public getDataRows(): { sensorType: number, datapoint: { value: number[], relativeTime: number; }[]; }[] {\r\n    var dataRows: { sensorType: number, datapoint: { value: number[], relativeTime: number; }[]; }[] = [];\r\n    for (let i = 0; i < this.dataRow.length; i++) {\r\n      dataRows.push(this.dataRow[i].getDataRow());\r\n    }\r\n    return dataRows;\r\n  }\r\n\r\n  /**\r\n   * Erstellt ein Label\r\n   * @param labelID die eindeutige Label ID\r\n   * @param name der Labelname\r\n   * @param start die Startzeit des Zeitfensters in Millisekunden\r\n   * @param end die Endzeit des Zeitfensters in Millisekunden\r\n   * @returns falls das Label mit der ID schon existiert wird false zurück gegeben\r\n   */\r\n  public createLabel(labelID: number, span: { start: number, end: number; }, labelName: string): boolean {\r\n    if (labelID < 0 || span.start < 0 || span.end < span.start) {\r\n      return false;\r\n    }\r\n    for (let i = 0; i < this.label.length; i++) {\r\n      if (this.label[i].getID() === labelID) {\r\n        return false;\r\n      }\r\n    }\r\n    this.label.push(new Label(labelName, labelID, span.start, span.end));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Setzt dem Label mit der übergebenen ID neue Werte.\r\n   * @param span ist die Start- und Endzeit in Millisekunden.\r\n   * @param labelID Die Label ID, welche überarbeitet werden soll.\r\n   * @param labelName Ist bei Angabe der neue Name des Labels.\r\n   * @returns falls das Label nicht existiert wird false zurück gegeben\r\n   */\r\n  public setLabel(labelID: number, span: { start: number, end: number; }, labelName?: string): boolean {\r\n    for (let i = 0; i < this.label.length; i++) {\r\n      if (this.label[i].getID() === labelID) {\r\n        return this.label[i].setLabel(span, labelName);\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Löscht das Label mit der übergebenen LabelID.\r\n   * @param labelID die LabelID\r\n   */\r\n  public deleteLabel(labelID: number): boolean {\r\n    for (let i = 0; i < this.label.length; i++) {\r\n      if (this.label[i].getID() == labelID) { //keine absolute gleichheit!\r\n        this.label.splice(i, 1);\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Gibt alle Daten von allen Labeln zurück.\r\n   */\r\n  public getLabels(): { name: string, id: number, start: number, end: number; }[] {\r\n    var labelList: { name: string, id: number, start: number, end: number; }[] = [];\r\n    for (let i = 0; i < this.label.length; i++) {\r\n      labelList.push(this.label[i].getLabel());\r\n    }\r\n    return labelList;\r\n  }\r\n}","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\index.tsx",["310","311"],"import React from 'react';\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from 'react-dom';\r\nimport './ModelCreationPage.css';\r\nimport { States } from '../State';\r\nimport Train from '../../components/ModelCreationComponents/Train';\r\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\r\nimport 'react-notifications/lib/notifications.css';\r\n\r\nexport class ModelCreationPage implements Page {\r\n\tstate = new State;\r\n\tobservers: PageController[] = [];\r\n\r\n\tconstructor() {\r\n\t\tthis.state = new State()\r\n\t}\r\n\r\n\tupdate() {\r\n\t\tthis.notify()\r\n\t\tconst VDOM = (\r\n\t\t\t<div>\r\n\t\t\t\t<Train\r\n\t\t\t\t\tdataSetMetas={this.state.dataSetMetas!}\r\n\t\t\t\t\ttrain={this.train.bind(this)}\r\n\t\t\t\t/>\r\n\t\t\t\t<NotificationContainer />\r\n\t\t\t</div>\r\n\t\t);\r\n\t\tif (document.getElementById( 'root' ) !== null) {\r\n            ReactDOM.render( VDOM, document.getElementById( 'root' ) );\r\n        }\r\n\t}\r\n\r\n\tattach(observer: PageController) {\r\n\t\tthis.observers.push(observer);\r\n\t}\r\n\r\n\tdetach(observer: PageController) {\r\n\t\tconst index = this.observers.indexOf(observer, 0);\r\n\t\tif (index > -1) {\r\n\t\t\tthis.observers.splice(index, 1);\r\n\t\t}\r\n\t}\r\n\r\n\tnotify() {\r\n\t\tfor (let index = 0; index < this.observers.length; index++) {\r\n\t\t\tconst element = this.observers[index];\r\n\t\t\telement.update();\r\n\t\t}\r\n\t}\r\n\r\n\tgetState() {\r\n\t\treturn this.state;\r\n\t}\r\n\r\n\tsetState(state: any) {\r\n\t\tthis.state = state\r\n\t\tthis.update()\r\n\t}\r\n\r\n\ttrain(dataSets: number[], imputator: string, classifier: string, scaler: string, features: string[]) {\r\n\t\t// eslint-disable-next-line\r\n\t\tthis.state.currentState = States.NeedKiTraining;\r\n\t\t// eslint-disable-next-line\r\n\t\tthis.state.trainingParameter!.dataSets = dataSets;\r\n\t\tthis.state.trainingParameter!.imputator = imputator;\r\n\t\tthis.state.trainingParameter!.classifier = classifier;\r\n\t\tthis.state.trainingParameter!.scaler = scaler;\r\n\t\tthis.state.trainingParameter!.features = features;\r\n\t\tthis.notify();\r\n\t}\r\n\r\n}\r\n","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\State.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Diagram\\index.jsx",["312","313","314"],"import { Component } from 'react';\r\nimport PubSub from 'pubsub-js';\r\nimport diagram from './index.module.css';\r\n\r\nexport default class Diagram extends Component {\r\n    state = {\r\n        lineLabels: [],\r\n        sensorRow: [],\r\n        datavalue: [],\r\n        time: [],\r\n        showDiagram: false,\r\n        diagramLineLabels: {},\r\n        diagramData: {},\r\n        diagramOptions: {},\r\n        color: ['rgba(46,190,87,1)', 'rgba(68,24,232,1)', 'rgba(238,173,14,1)', 'rgba(178,34,34,1)', 'rgba(238, 130, 238,1)', 'rgba(0, 0, 0,1)',\r\n            'rgba(106, 90, 205,1)', 'rgba(238, 118, 0,1)', 'rgba(105, 105, 105,1)'],\r\n        csscolor: ['2EBE57', 'CC00FF', 'EEAD0E', 'B22222', 'EE82EE', '000000',\r\n            '6A5ACD', 'EE7600', '696969'],\r\n    };\r\n\r\n    props = {\r\n        dataRows: [{ sensorType: 1, datapoint: [{ value: [5], relativeTime: 5 }] }],\r\n    };\r\n\r\n    componentDidMount() {//{ sensorType: number, datapoint:{value: number[], relativeTime: number; }[]}[]\r\n\r\n        this.setState({\r\n            lineLabels: [],\r\n            sensorRow: [],\r\n            datavalue: [],\r\n            time: [],\r\n            showDiagram: true\r\n        });\r\n        //put each value Array in State\r\n        var datavalues = [];\r\n        for (var i = 0; i < this.props.dataRows.length; i++) {\r\n            this.state.sensorRow.push(this.props.dataRows[i].sensorType);\r\n            for (var dataCoordinate = 0; dataCoordinate < 3; dataCoordinate++) {\r\n                for (var j = 0; j < this.props.dataRows[i].datapoint.length; j++) {\r\n                    datavalues.push(this.props.dataRows[i].datapoint[j].value[dataCoordinate]);\r\n                }\r\n                this.state.datavalue.push(datavalues);\r\n                datavalues = [];\r\n            }\r\n        }\r\n        // eslint-disable-next-line\r\n        if (this.props.dataRows != 0) {\r\n            for (var j = 0; j < this.props.dataRows[0].datapoint.length; j++) {\r\n                this.state.time.push(this.props.dataRows[0].datapoint[j].relativeTime);\r\n            }\r\n        }\r\n\r\n        var newDatasets = [];\r\n        var lineLabels = [];\r\n        // eslint-disable-next-line\r\n        for (var i = 0; i < this.state.sensorRow.length * 3; i++) {\r\n            var coordinate = \".X\";\r\n            var sensor = this.state.sensorRow[parseInt(i / 3)];\r\n            // eslint-disable-next-line\r\n            if (i % 3 == 1) {\r\n                coordinate = \".Y\";\r\n            }\r\n            // eslint-disable-next-line\r\n            if (i % 3 == 2) {\r\n                coordinate = \".Z\";\r\n            }\r\n\r\n            lineLabels.push(<font color={this.state.csscolor[i]}>■{this.state.sensorRow[parseInt(i / 3)] + coordinate}<br /></font>);\r\n            //this.setState({ lineLabels: lineLabels })\r\n            newDatasets.push(\r\n                {\r\n                    label: sensor + coordinate,\r\n                    strokeColor: this.state.color[i],\r\n                    borderWidth: 1,\r\n                    data: this.state.datavalue[i],\r\n                }\r\n            );\r\n        }\r\n        const data = {\r\n            labels: this.state.time,\r\n            datasets: newDatasets\r\n        };\r\n        const options = {\r\n            datasetFill: false,\r\n            pointDotRadius: 2,\r\n            pointHitDetectionRadius: 1,\r\n            offsetGridLines: false,\r\n            pointDot: false\r\n        };\r\n        this.setState({ lineLabels: lineLabels });\r\n        //this.setState({ diagram: { lineLabels, data, options } })\r\n        //this.setState({ diagramLineLabels: lineLabels })\r\n        this.setState({ diagramData: data });\r\n        this.setState({ diagramOptions: options });\r\n\r\n    }\r\n\r\n    render() {\r\n        var LineChart = require(\"react-chartjs\").Line;\r\n        const { lineLabels, diagramData, diagramOptions } = this.state;\r\n        return (\r\n            <div>\r\n                {lineLabels}\r\n                <LineChart data={diagramData} options={diagramOptions} width=\"400\" height=\"200\" redraw />\r\n            </div>\r\n        );\r\n    }\r\n}",["315","316"],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\EmailList\\index.tsx",["317"],"import React, { Component } from 'react'\r\nimport { nanoid } from 'nanoid';\r\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\r\nimport 'react-notifications/lib/notifications.css';\r\nexport default class EmailList extends Component {\r\n\tprops = {\r\n\t\tdelivery: function (chosenEmails: string[]) { }\r\n\t}\r\n\r\n\tstate = {\r\n\t\tmouse: false,\r\n\t\taddButtonClick: false,\r\n\t\tinputempty: true,\r\n\t\tinputemail: {\r\n\t\t\tid: '',\r\n\t\t\taddress: '',\r\n\t\t\tchosen: false\r\n\t\t},\r\n\t\temails: [{\r\n\t\t\tid: 'example',\r\n\t\t\taddress: 'xxxxx@xxx.xx(Beispiel, nach erstmal Addieren automatisch gelöscht)',\r\n\t\t\tchosen: false\r\n\t\t}]\r\n\t}\r\n\r\n\thandleCreate = () => {\r\n\t\tthis.setState({ addButtonClick: true });\r\n\t};\r\n\r\n\tinputchange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\t// eslint-disable-next-line\r\n\t\tif (e.target.value == '') {\r\n\t\t\tthis.setState({ inputempty: true })\r\n\t\t} else {\r\n\t\t\tthis.setState({ inputemail: { id: nanoid(), address: e.target.value, chosen: false }, inputempty: false })\r\n\t\t}\r\n\r\n\t}\r\n\thandleKeyUp = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n\t\tthis.deleteEmail('example')\r\n\t\tconst { keyCode } = e;\r\n\t\t//check ENTER-key\r\n\t\tif (keyCode !== 13) return;\r\n\t\t//cant add empty email\r\n\t\tconst { inputemail, inputempty, emails } = this.state\r\n\t\tif (inputempty) {\r\n\t\t\tNotificationManager.error(\"Eingabe darf nicht leer sein!\", \"\", 3000);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet exist = false\r\n\t\temails.map((emailObj) => {\r\n\t\t\t// eslint-disable-next-line\r\n\t\t\tif (emailObj.address == inputemail.address) exist = true\r\n\t\t\treturn emailObj\r\n\t\t})\r\n\t\tif (exist) {\r\n\t\t\tNotificationManager.error(\"Es gibt schon Emailadresse in List!\", \"\", 3000);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar pattern = /^([A-Za-z0-9_\\-.])+@([A-Za-z0-9_\\-.])+\\.([A-Za-z])+$/\r\n\t\tif (pattern.test(inputemail.address)) {\r\n\t\t\tthis.addEmail(inputemail);\r\n\t\t} else {\r\n\t\t\tNotificationManager.error(\"Sie müssen eine Emailadresse eingeben!\", \"\", 3000);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t//hide inputbox\r\n\t\tthis.setState({ addButtonClick: false });\r\n\t};\r\n\r\n\t//handle emailItem\r\n\thandleMouse = (flag: boolean) => {\r\n\t\treturn () => {\r\n\t\t\tthis.setState({ mouse: flag });\r\n\t\t};\r\n\t};\r\n\r\n\thandleCheck = (id: string, chosen: boolean) => {\r\n\t\tconst { emails } = this.state\r\n\t\tconst newEmails = emails.map((emailObj) => {\r\n\t\t\t// eslint-disable-next-line\r\n\t\t\tif (emailObj.id == id) return { ...emailObj, chosen };\r\n\t\t\telse return emailObj;\r\n\t\t})\r\n\t\tthis.setState({ emails: newEmails })\r\n\t};\r\n\r\n\thandleDelete = (id: string) => {\r\n\t\tif (window.confirm('Sind Sie sicher, die gewählt Emailadresse zu löschen?')) {\r\n\t\t\tconst { emails } = this.state\r\n\t\t\tconst newEmails = emails.filter((emailObj) => {\r\n\t\t\t\treturn emailObj.id !== id;\r\n\t\t\t});\r\n\t\t\t//update emailList\r\n\t\t\tthis.setState({ emails: newEmails })\r\n\t\t}\r\n\t};\r\n\r\n\t//addEmail for add new Email\r\n\taddEmail = (emailObj: { id: string, address: string, chosen: boolean }) => {\r\n\t\t//add new one\r\n\t\tconst { emails } = this.state\r\n\t\tconst newEmails = [emailObj, ...emails];\r\n\t\t//update emailList\r\n\t\tthis.setState({ emails: newEmails })\r\n\t};\r\n\r\n\t//deleteEmail for delete emailObj\r\n\tdeleteEmail = (id: string) => {\r\n\t\t//get orignal emailList\r\n\t\t//delete emailObj with id\r\n\t\tconst { emails } = this.state\r\n\t\tconst newEmails = emails.filter((emailObj) => {\r\n\t\t\treturn emailObj.id !== id;\r\n\t\t});\r\n\t\t//update emailList\r\n\t\tthis.setState({ emails: newEmails })\r\n\t};\r\n\r\n\t//checkAllEmail for all chosen email\r\n\tchooseAllEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\t//get orignal emailList\r\n\t\tconst chosen = e.target.checked\r\n\t\tconst { emails } = this.state\r\n\t\tconst newEmails = emails.map((emailObj) => {\r\n\t\t\treturn { ...emailObj, chosen };\r\n\t\t});\r\n\t\t//update emailList\r\n\t\tthis.setState({ emails: newEmails })\r\n\t};\r\n\r\n\t//clearAllChosen for delete all emails\r\n\tclearAllChosen = () => {\r\n\t\tif (window.confirm('Sind Sie sicher, alle gewähte Emailadressen zu löschen?')) {\r\n\t\t\t//get orignal emailList\r\n\t\t\tconst { emails } = this.state;\r\n\t\t\t//filter datas\r\n\t\t\tconst newEmails = emails.filter((emailObj) => {\r\n\t\t\t\treturn !emailObj.chosen;\r\n\t\t\t});\r\n\t\t\t//update emailLists\r\n\t\t\tthis.setState({ emails: newEmails })\r\n\t\t}\r\n\t};\r\n\t//sendmethod\r\n\tdelivery = () => {\r\n\t\tconst { emails } = this.state;\r\n\t\tlet emailaddressList: string[] = []\r\n\t\temails.map((emailObj) => {\r\n\t\t\tif (emailObj.chosen) emailaddressList.push(emailObj.address)\r\n\t\t\treturn emailObj\r\n\t\t});\r\n\t\t//console.log(emailaddressList)\r\n\t\tthis.props.delivery(emailaddressList)\r\n\t}\r\n\trender() {\r\n\t\tconst { mouse, emails } = this.state\r\n\t\tconst chosenCount = emails.reduce((pre, email) => pre + (email.chosen ? 1 : 0), 0)\r\n\t\t//total amount\r\n\t\tconst total = emails.length\r\n\t\treturn (\r\n\t\t\t<div className=\"email-main\">\r\n\t\t\t\t<div className=\"addemailbutton\">\r\n\t\t\t\t\t<button onClick={() => this.handleCreate()} className=\"addemail-btn\" >Addieren eine neue Emailadresse!(Addieren Eingaben mit 'Enter'-Taste)</button>\r\n\t\t\t\t\t{this.state.addButtonClick ?\r\n\t\t\t\t\t\t<div className=\"inputbox\">\r\n\t\t\t\t\t\t\t<input onKeyUp={this.handleKeyUp} onChange={this.inputchange} type=\"text\" placeholder=\"input email address with ENTER-key\" />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t: null}\r\n\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{emails.map(emailObj => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<li style={{ backgroundColor: mouse ? '#ddd' : 'white' }} onMouseEnter={this.handleMouse(true)} onMouseLeave={this.handleMouse(false)}>\r\n\t\t\t\t\t\t\t<label>\r\n\t\t\t\t\t\t\t\t<input type=\"checkbox\" checked={emailObj.chosen} onChange={(e: React.ChangeEvent<HTMLInputElement>): void => this.handleCheck(emailObj.id, e.target.checked)} />\r\n\t\t\t\t\t\t\t\t<span>{emailObj.address}</span>\r\n\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t\t<button onClick={() => this.handleDelete(emailObj.id)} className=\"btn-item\" style={{ display: mouse ? 'block' : 'none' }}>Löschen</button>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t)\r\n\t\t\t\t})}\r\n\r\n\t\t\t\t<div className=\"handleallemail\">\r\n\t\t\t\t\t<label>\r\n\t\t\t\t\t\t<input type=\"checkbox\" onChange={this.chooseAllEmail} checked={chosenCount === total && total !== 0 ? true : false} />\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t<span>Gewählt: {chosenCount}</span> / Insegesamt: {total}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\t<button onClick={() => this.clearAllChosen()} className=\"btn-clear\">Löschen alle gewählte Emailadressen!</button>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"deliverybutton\">\r\n\t\t\t\t\t<button onClick={() => this.delivery()} className=\"btn\" >Liefern Aus!</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\DownloadButton\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\FinishButton\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Title\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\DataRow.tsx",["318","319"],"import { relative } from \"node:path\";\r\nimport { DataPoint } from \"./DataPoint\";\r\nimport { AccelerometerData, GyroscopeData } from \"./SensorData\";\r\n\r\n/**\r\n * Die Klasse DataRow beschreibt eine Reihe aufgenommener Daten eines Sensors.\r\n */\r\nexport class DataRow {\r\n  private id: number; //Dies ist die DataRow ID, diese ist eindeutig für Datensätze.\r\n  private datapoint: DataPoint[] = []; //Dies ist Datenreihe, eine Reihe von Datenpunkten.\r\n  private sensor: AccelerometerData | GyroscopeData; //Dies ist der Sensor von dem die Daten gelesen wurden.\r\n\r\n  /**\r\n   * Eine neue Datenreihe erstellen.\r\n   * @param sensor Sensor, von dem die Daten gelesen werden.\r\n   * @param dataRowID Eine eindeutige Datenreihen ID.\r\n   */\r\n  constructor(sensor: AccelerometerData | GyroscopeData, dataRowID: number);\r\n\r\n  /**\r\n   * Eine bereits existierende Datenreihe kann wie folgt in das Model geladen werden.\r\n   * @param sensor der Sensor von dem die Daten gelesen wurden\r\n   * @param dataRowID die ID, welche die Datenreihe bei der ersten Erstellung zugeteilt bekommen hat\r\n   * @param dataRow die aufgenommenen Daten\r\n   * @param dataRow.value der Sensor Messwert\r\n   * @param dataRow.relativeTime die relative Zeit zum Aufnahmestart\r\n   */\r\n  constructor(sensor: AccelerometerData | GyroscopeData, dataRowID: number, dataRow: { value: number[], relativeTime: number; }[]);\r\n  constructor(sensor: AccelerometerData | GyroscopeData, dataRowID: number, dataRow?: { value: number[], relativeTime: number; }[]) {\r\n    this.sensor = sensor;\r\n    this.id = dataRowID;\r\n    if (dataRow != null) {\r\n      for (let i = 0; i < dataRow.length; i++) {\r\n        this.datapoint.push(new DataPoint(dataRow[i].value, dataRow[i].relativeTime));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gibt die DataRow ID zurück.\r\n   */\r\n  public getID(): number {\r\n    return this.id;\r\n  }\r\n\r\n  /**\r\n   * Fügt den Datenpunkt der Datenreihe hinzu\r\n   * \r\n   */\r\n\r\n  /**\r\n   * Fügt den Datenpunkt der Datenreihe hinzu\r\n   * @param datapoint der Datenpunkt\r\n   * @returns false, falls datapoint.value leer ist oder datapoint.relativeTime < 0\r\n   */\r\n  public addDatapoint(datapoint: { value: number[], relativeTime: number; }): boolean {\r\n    if (datapoint.value.length == 0 || datapoint.relativeTime < 0) {\r\n      return false;\r\n    } else {\r\n      this.datapoint.push(new DataPoint(datapoint.value, datapoint.relativeTime));\r\n      return true;\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Gibt die Datenreihe zurück.\r\n   * @returns value ist der Messwert und relativeTime die relative Zeit in Millisekunden zum Aufnahmestart.\r\n   */\r\n  public getDataRow(): { sensorType: number, datapoint: { value: number[], relativeTime: number; }[]; } {\r\n    var dataRow: { sensorType: number, datapoint: { value: number[], relativeTime: number; }[]; };\r\n    var datapoint: { value: number[], relativeTime: number; }[] = [];\r\n    for (let i = 0; i < this.datapoint.length; i++) {\r\n      datapoint[i] = { value: this.datapoint[i].getValue(), relativeTime: this.datapoint[i].getRelativeTime() };\r\n    }\r\n    var sensorType: number = this.sensor.SensorTypeID;\r\n    dataRow = { sensorType, datapoint };\r\n    return dataRow;\r\n  }\r\n}","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Countdown\\index.tsx",["320","321"],"import { Component } from 'react';\r\nimport { NotificationManager } from 'react-notifications';\r\n\r\nexport default class Countdown extends Component {\r\n\r\n    props = {\r\n        countdownNumber: 5, chosenSensors: [1]\r\n    }\r\n\r\n    render() {\r\n        let countdown\r\n        if (this.props.countdownNumber > 0) {\r\n            countdown = this.props.countdownNumber\r\n        } else if (this.props.countdownNumber != 0) {\r\n            countdown = \" \"\r\n        } else {\r\n            countdown = \"Aufnahme gestartet\"\r\n        }\r\n        \r\n        let sensornames: string[] = []\r\n        for (let sensor in this.props.chosenSensors) {\r\n            switch(sensor){\r\n                case \"0\":\r\n                    sensornames.push(\"Accelerometer\")\r\n                    break;\r\n                case \"1\":\r\n                    sensornames.push(\"Gyroscope\")\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <h2>Bereit machen zur Aufnahme!</h2>\r\n                <h2>{ countdown }</h2>\r\n                <h2>Verwendete Sensoren:</h2>\r\n                {\r\n                   sensornames.map((x) => {\r\n                        return <h4>{x}</h4>;\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\State.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\Label.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\DiagramList\\index.jsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Diagram\\index.jsx",["322","323","324","325"],"import React, { Component } from 'react';\r\n\r\nexport default class Diagram extends Component {\r\n\r\n    props = {\r\n        dataRows: [{ sensorType: 1, datapoint: [{ value: [5], relativeTime: 5 }] }],\r\n        pageChangeToFinish: function () { }\r\n    }\r\n\r\n    diagrammData = {\r\n        lineLabels: [],\r\n        sensorRow: [],\r\n        datavalue: [],\r\n        time: [],\r\n        showDiagram: false,\r\n        diagram: {},\r\n        diagramLineLabels: {},\r\n        diagramData: {},\r\n        diagramOptions: {},\r\n        color: ['rgba(46,190,87,1)', 'rgba(68,24,232,1)', 'rgba(238,173,14,1)', 'rgba(178,34,34,1)', 'rgba(238, 130, 238,1)', 'rgba(0, 0, 0,1)',\r\n            'rgba(106, 90, 205,1)', 'rgba(238, 118, 0,1)', 'rgba(105, 105, 105,1)'],\r\n        csscolor: ['2EBE57', 'CC00FF', 'EEAD0E', 'B22222', 'EE82EE', '000000',\r\n            '6A5ACD', 'EE7600', '696969'],\r\n    };\r\n\r\n    updateDiagramm() {\r\n        //PubSub.unsubscribe(\"startDiagram\")\r\n        //put each value Array in State\r\n        this.diagrammData.lineLabels = []\r\n        this.diagrammData.sensorRow = []\r\n        this.diagrammData.datavalue = []\r\n        this.diagrammData.time = []\r\n        this.diagrammData.showDiagram = true\r\n\r\n        var datavalues = [];\r\n        for (var i = 0; i < this.props.dataRows.length; i++) {\r\n            this.diagrammData.sensorRow.push(this.props.dataRows[i].sensorType);\r\n            for (var dataCoordinate = 0; dataCoordinate < 3; dataCoordinate++) {\r\n                for (var j = 0; j < this.props.dataRows[i].datapoint.length; j++) {\r\n                    datavalues.push(this.props.dataRows[i].datapoint[j].value[dataCoordinate]);\r\n                }\r\n                this.diagrammData.datavalue.push(datavalues);\r\n                datavalues = [];\r\n            }\r\n        }\r\n        // eslint-disable-next-line\r\n        for (var j = 0; j < this.props.dataRows[0].datapoint.length; j++) {\r\n            this.diagrammData.time.push(this.props.dataRows[0].datapoint[j].relativeTime);\r\n        }\r\n\r\n        var newDatasets = [];\r\n        var lineLabels = [];\r\n        for (var i = 0; i < this.diagrammData.sensorRow.length * 3; i++) {\r\n            var coordinate = \".X\";\r\n            var sensor = this.diagrammData.sensorRow[parseInt(i / 3)];\r\n            var sensorName = ''\r\n            switch (sensor) {\r\n                case 2:\r\n                    sensorName = 'Accelerometer'\r\n                    break;\r\n                case 3:\r\n                    sensorName = 'Gyroscope'\r\n                    break;\r\n                case 4:\r\n                    sensorName = 'Magnetometer'\r\n                    break;\r\n            }\r\n            if (i % 3 == 1) {\r\n                coordinate = \".Y\";\r\n            }\r\n            if (i % 3 == 2) {\r\n                coordinate = \".Z\";\r\n            }\r\n\r\n            lineLabels.push(<font color={this.diagrammData.csscolor[i]}>■{sensorName + coordinate}<br /></font>);\r\n            //this.setState({ lineLabels: lineLabels })\r\n            newDatasets.push(\r\n                {\r\n                    label: sensor + coordinate,\r\n                    strokeColor: this.diagrammData.color[i],\r\n                    borderWidth: 1,\r\n                    data: this.diagrammData.datavalue[i],\r\n                }\r\n            );\r\n        }\r\n        const data = {\r\n            labels: this.diagrammData.time,\r\n            datasets: newDatasets\r\n        };\r\n        const options = {\r\n            datasetFill: false,\r\n            pointDotRadius: 2,\r\n            pointHitDetectionRadius: 1,\r\n            offsetGridLines: false,\r\n            pointDot: false\r\n        };\r\n        this.diagrammData.diagramData = data\r\n        this.diagrammData.lineLabels = lineLabels\r\n        this.diagrammData.diagramOptions = options\r\n    }\r\n\r\n    submit = () => {\r\n        this.props.pageChangeToFinish()\r\n    };\r\n\r\n    render() {\r\n        var LineChart = require(\"react-chartjs\").Line;\r\n        this.updateDiagramm()\r\n        return (\r\n            <div>\r\n                {this.diagrammData.lineLabels}\r\n                <LineChart data={this.diagrammData.diagramData} options={this.diagrammData.diagramOptions} width=\"400\" height=\"200\" redraw />\r\n                <button type=\"button\" onClick={this.submit}>ChangeToFinish</button>\r\n            </div>\r\n        );\r\n    }\r\n}","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\Train\\index.tsx",["326","327"],"import React, { Component } from 'react';\r\nimport NewWindow from 'react-new-window';\r\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\r\nimport 'react-notifications/lib/notifications.css';\r\nimport './Train.css'\r\nexport default class Train extends Component {\r\n\tprops = {\r\n\t\tdataSetMetas: [{ dataSetID: -1, dataSetName: 'ex' }],\r\n\t\ttrain: function (dataSets: number[], imputator: string, classifier: string, scaler: string, features: string[]) { }\r\n\t}\r\n\tstate = {\r\n\t\tmouse: false,\r\n\t\topenNewWindow: false,\r\n\t\tvalue: '',\r\n\t\tdatabaseList: [] as { dataSetID: number, dataSetName: string, chosen: boolean; }[],\r\n\t\tdatasets: [] as { dataSetID: number, dataSetName: string, chosen: boolean; }[],\r\n\t\timputators: [\r\n\t\t\t{ name: \"Mittel\", checked: false, tag: 'MEAN' },\r\n\t\t\t{ name: \"Letzer Wert fortgeführt\", checked: false, tag: 'FORWARD' },\r\n\t\t\t{ name: \"Bewegter Durchschnitt\", checked: false, tag: 'MOVING' },\r\n\t\t\t{ name: \"Lineare Interpolation\", checked: false, tag: 'LINEAR' },\r\n\t\t\t{ name: \"Spline Interpolation\", checked: false, tag: 'SPLINE' }\r\n\t\t],\r\n\t\tscalers: [\r\n\t\t\t{ name: \"Standard Scaler\", checked: false, tag: 'STANDARD' },\r\n\t\t\t{ name: \"Robust Scaler\", checked: false, tag: 'ROBUST' },\r\n\t\t\t{ name: \"Min-Max Scaler\", checked: false, tag: 'MIN_MAX' },\r\n\t\t\t{ name: \"Normalizer\", checked: false, tag: 'NORMALIZER' },\r\n\t\t\t{ name: \"Anteilstrafo\", checked: false, tag: 'SHARE' }\r\n\t\t],\r\n\t\tmyfeatures: [\r\n\t\t\t{ name: \"Minimum\", checked: false, tag: 'MIN' },\r\n\t\t\t{ name: \"Maximum\", checked: false, tag: 'MAX' },\r\n\t\t\t{ name: \"Varianz\", checked: false, tag: 'VARIANCE' },\r\n\t\t\t{ name: \"Energie\", checked: false, tag: 'ENERGY' },\r\n\t\t\t{ name: \"Fourier-T\", checked: false, tag: 'FOURIER_TRANSFORM' },\r\n\t\t\t{ name: \"Mittelwert\", checked: false, tag: 'MEAN' },\r\n\t\t\t{ name: \"Autoregressiv\", checked: false, tag: 'AUTOREGRESSIVE' },\r\n\t\t\t{ name: \"Abweichung\", checked: false, tag: 'SKEWNESS' },\r\n\t\t\t{ name: \"Wölbung\", checked: false, tag: 'KURTOSIS' },\r\n\t\t\t{ name: \"IQR\", checked: false, tag: 'IQR' }\r\n\t\t],\r\n\t\tclassifiers: [\r\n\t\t\t{ name: \"MLPClassifier\", checked: false, tag: 'MLP' },\r\n\t\t\t{ name: \"RandomForestClassifier\", checked: false, tag: 'RANDOM_FOREST' },\r\n\t\t\t{ name: \"KNeighborsClassifier\", checked: false, tag: 'K_NEIGHOBORS' },\r\n\t\t\t{ name: \"Support Vector Machine\", checked: false, tag: 'SVM' }\r\n\t\t],\r\n\t\tchosenScaler: 0,\r\n\t\tchosenclassifier: 0,\r\n\t\tchosenImputator: 0\r\n\t};\r\n\r\n\tcomponentDidMount() {\r\n\t\tlet newDatabaseList: { dataSetID: number, dataSetName: string, chosen: boolean; }[] = [];\r\n\t\tthis.props.dataSetMetas?.map((dataset) => {\r\n\t\t\tnewDatabaseList.push({ dataSetID: dataset.dataSetID, dataSetName: dataset.dataSetName, chosen: false });\r\n\t\t})\r\n\t\tthis.setState({ databaseList: newDatabaseList });\r\n\r\n\t}\r\n\r\n\thandleMouse = (flag: boolean) => {\r\n\t\treturn () => {\r\n\t\t\tthis.setState({ mouse: flag });\r\n\t\t};\r\n\t};\r\n\r\n\thandleCheck = (id: number, chosen: boolean) => {\r\n\t\tconst { datasets } = this.state;\r\n\t\tconst newDatasets = datasets.map((dataset) => {\r\n\t\t\t// eslint-disable-next-line\r\n\t\t\tif (dataset.dataSetID == id) return { ...dataset, chosen };\r\n\t\t\telse return dataset;\r\n\t\t});\r\n\t\tthis.setState({ datasets: newDatasets });\r\n\t};\r\n\r\n\thandleDelete = (id: number) => {\r\n\t\tif (window.confirm('Sind Sie sicher, die gewählt Emailadresse zu löschen?')) {\r\n\t\t\tconst { datasets } = this.state;\r\n\t\t\tconst newDatasets = datasets.filter((dataset) => {\r\n\t\t\t\treturn dataset.dataSetID !== id;\r\n\t\t\t});\r\n\t\t\t//update emailList\r\n\t\t\tthis.setState({ datasets: newDatasets });\r\n\t\t}\r\n\t};\r\n\r\n\t//addDataset for add new Dataset\r\n\taddDataset = (datasetObj: { dataSetID: number, dataSetName: string, chosen: boolean; }) => {\r\n\t\t//get orignal datasetList\r\n\t\tconst { datasets } = this.state;\r\n\t\t//add new one\r\n\t\tconst newDatasets = [datasetObj, ...datasets];\r\n\t\t//update datasetList\r\n\t\tthis.setState({ datasets: newDatasets });\r\n\t};\r\n\r\n\thandleCreate = () => {\r\n\t\t//if (this.state.databaseList == []) {\r\n\t\t//\t}\r\n\t\tconst flag = !this.state.openNewWindow;\r\n\t\tthis.setState({ openNewWindow: flag });\r\n\t};\r\n\r\n\thandleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n\t\tthis.setState({\r\n\t\t\tvalue: e.target.value\r\n\t\t});\r\n\t};\r\n\r\n\thandleChoose = () => {\r\n\t\t/* wait to change load model*/\r\n\t\tthis.setState({ openNewWindow: false });\r\n\t\t// eslint-disable-next-line\r\n\t\tif (this.state.value == '') {\r\n\t\t\tNotificationManager.error(\"Kein Wählen!\", \"\", 3000);\r\n\t\t} else {\r\n\t\t\tconst { databaseList } = this.state;\r\n\t\t\tconst newDatabaseList1 = databaseList.map((databaseObj) => {\r\n\t\t\t\t// eslint-disable-next-line\r\n\t\t\t\tif (databaseObj.dataSetName == this.state.value) {\r\n\t\t\t\t\tdatabaseObj.chosen = true;\r\n\t\t\t\t\tconst datasetObj = { dataSetID: databaseObj.dataSetID, dataSetName: databaseObj.dataSetName, chosen: false };\r\n\t\t\t\t\tthis.addDataset(datasetObj);\r\n\t\t\t\t}\r\n\t\t\t\treturn databaseObj;\r\n\t\t\t}\r\n\t\t\t);\r\n\t\t\tconst newDatabaseList2 = newDatabaseList1.filter((databaseObj) => {\r\n\t\t\t\t// eslint-disable-next-line\r\n\t\t\t\treturn databaseObj.chosen == false;\r\n\t\t\t});\r\n\t\t\t//update emailList\r\n\t\t\tthis.setState({ databaseList: newDatabaseList2 });\r\n\t\t}\r\n\t};\r\n\r\n\toptions = () => {\r\n\t\tconst { databaseList } = this.state;\r\n\t\t/*way to add new into list\r\n\t\tand wait to get databaseList\r\n\t\tconst newdatabase = {id:'003', name:'dataset3', chosen: false}\r\n\t\tdatabaseList.push(newdatabase)\r\n\t\t*/\r\n\t\treturn databaseList.map(dataset =>\r\n\t\t\t<option key={dataset.dataSetID} value={dataset.dataSetName}>{dataset.dataSetName}</option>);\r\n\t};\r\n\r\n\thandleImputation = (index: number) => {\r\n\t\tvar newList = [...this.state.imputators];\r\n\t\tvar newChosen = this.state.chosenImputator;\r\n\t\tif (newList[index].checked) { newChosen--; }\r\n\t\telse { newChosen++; }\r\n\t\tif (newChosen <= 1) {\r\n\t\t\tnewList[index].checked = !newList[index].checked;\r\n\t\t\tthis.setState({ chosenImputator: newChosen, imputators: newList });\r\n\t\t} else {\r\n\t\t\tNotificationManager.error(\"Darf nicht mehrer Imputationen wählen!\", \"\", 3000);\r\n\t\t\treturn;\r\n\t\t}\r\n\t};\r\n\r\n\thandleScaler = (index: number) => {\r\n\r\n\t\tvar newList = [...this.state.scalers];\r\n\t\tvar newChosen = this.state.chosenScaler;\r\n\t\tif (newList[index].checked) { newChosen--; }\r\n\t\telse { newChosen++; }\r\n\t\tif (newChosen <= 1) {\r\n\t\t\tnewList[index].checked = !newList[index].checked;\r\n\t\t\tthis.setState({ chosenScaler: newChosen });\r\n\t\t\tthis.setState({ scalers: newList });\r\n\t\t} else {\r\n\t\t\tNotificationManager.error(\"Darf nicht mehrer Scaler wählen!\", \"\", 3000);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t};\r\n\r\n\thandleExtraction = (index: number) => {\r\n\t\tvar newList = [...this.state.myfeatures];\r\n\t\tnewList[index].checked = !newList[index].checked;\r\n\t\tthis.setState({ features: newList });\r\n\t};\r\n\r\n\thandleClassifier = (index: number) => {\r\n\t\tvar newList = [...this.state.classifiers];\r\n\t\tvar newChosen = this.state.chosenclassifier;\r\n\t\tif (newList[index].checked) { newChosen--; }\r\n\t\telse { newChosen++; }\r\n\t\tif (newChosen <= 1) {\r\n\t\t\tnewList[index].checked = !newList[index].checked;\r\n\t\t\tthis.setState({ chosenclassifier: newChosen });\r\n\t\t\tthis.setState({ classifiers: newList });\r\n\t\t} else {\r\n\t\t\tNotificationManager.error(\"Darf nicht mehrer Classifier wählen!\", \"\", 3000);\r\n\t\t\treturn;\r\n\t\t}\r\n\t};\r\n\r\n\thandleTrain = () => {\r\n\t\tvar dataSets: number[] = [], imputator = \"\", classifier = '', scaler = '', features: string[] = [];\r\n\t\tconst { datasets, imputators, classifiers, scalers, myfeatures } = this.state;\r\n\t\tdatasets.map((datasetObj) => {\r\n\t\t\tif (datasetObj.chosen) dataSets.push(datasetObj.dataSetID);\r\n\t\t\treturn datasetObj;\r\n\t\t});\r\n\t\timputators.map((imputatorObj) => {\r\n\t\t\tif (imputatorObj.checked) imputator = imputatorObj.tag;\r\n\t\t\treturn imputatorObj;\r\n\t\t});\r\n\t\tclassifiers.map((classifierObj) => {\r\n\t\t\tif (classifierObj.checked) classifier = classifierObj.tag;\r\n\t\t\treturn classifierObj;\r\n\t\t});\r\n\t\tscalers.map((scalerObj) => {\r\n\t\t\tif (scalerObj.checked) scaler = scalerObj.tag;\r\n\t\t\treturn scalerObj;\r\n\t\t});\r\n\t\tmyfeatures.map((featureObj) => {\r\n\t\t\tif (featureObj.checked) features.push(featureObj.tag);\r\n\t\t\treturn featureObj;\r\n\t\t});\r\n\t\t//console.log(chosendataSets, chosenImputator, chosenclassifier, chosenscaler, chosenFeatures)\r\n\t\tthis.props.train(dataSets, imputator, classifier, scaler, features);\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst { mouse, datasets, imputators, scalers, myfeatures, classifiers } = this.state;\r\n\t\treturn (\r\n\t\t\t<div className=\"train\">\r\n\t\t\t\t<h3>Datasets</h3>\r\n\t\t\t\t{datasets.map(dataset => {\r\n\t\t\t\t\treturn (\r\n\r\n\t\t\t\t\t\t<li style={{ backgroundColor: mouse ? '#ddd' : 'white' }} onMouseEnter={this.handleMouse(true)} onMouseLeave={this.handleMouse(false)}>\r\n\t\t\t\t\t\t\t<label>\r\n\t\t\t\t\t\t\t\t<input type=\"checkbox\" checked={dataset.chosen} onChange={(e: React.ChangeEvent<HTMLInputElement>): void => this.handleCheck(dataset.dataSetID, e.target.checked)} />\r\n\t\t\t\t\t\t\t\t<span>{dataset.dataSetName}</span>\r\n\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t\t<button onClick={() => this.handleDelete(dataset.dataSetID)} className=\"btn-item\" style={{ display: mouse ? 'block' : 'none' }}>Löschen</button>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\r\n\t\t\t\t<div className=\"adddatasetbutton\">\r\n\t\t\t\t\t{this.state.openNewWindow && (\r\n\t\t\t\t\t\t<NewWindow>\r\n\t\t\t\t\t\t\t<div className=\"login-window\">\r\n\t\t\t\t\t\t\t\t<h1>DatabaseList</h1>\r\n\t\t\t\t\t\t\t\t<select onChange={this.handleChange}>\r\n\t\t\t\t\t\t\t\t\t<option value=\"choose dataset\">choose dataset</option>\r\n\t\t\t\t\t\t\t\t\t{this.options()}\r\n\t\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t\t\t<button onClick={this.handleChoose} className=\"btn\" >Add!</button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</NewWindow>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t<button onClick={() => this.handleCreate()} className=\"adddataset-btn\" >Add new Dataset</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"list\">\r\n\t\t\t\t\t<div className=\"imputationlist\">\r\n\t\t\t\t\t\t<h3>Imputation</h3>\r\n\t\t\t\t\t\t{imputators.map((imputator, index) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<div key={index}>\r\n\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" value={index} checked={imputator.checked} onChange={() => this.handleImputation(index)} /><span>{imputator.name}</span>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"scalerlist\">\r\n\t\t\t\t\t\t<h3>Normalisierung</h3>\r\n\t\t\t\t\t\t{scalers.map((scaler, index) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<div key={index}>\r\n\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" value={index} checked={scaler.checked} onChange={() => this.handleScaler(index)} /><span>{scaler.name}</span>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"list\">\r\n\t\t\t\t\t<div className=\"extractionlist\">\r\n\t\t\t\t\t\t<h3>Merkmalextraktion</h3>\r\n\t\t\t\t\t\t{myfeatures.map((extraction, index) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<div key={index}>\r\n\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" value={index} checked={extraction.checked} onChange={() => this.handleExtraction(index)} /><span>{extraction.name}</span>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"classifierlist\">\r\n\t\t\t\t\t\t<h3>Modell</h3>\r\n\t\t\t\t\t\t{classifiers.map((classifier, index) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<div key={index}>\r\n\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" value={index} checked={classifier.checked} onChange={() => this.handleClassifier(index)} /><span>{classifier.name}</span>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<br></br>\r\n\r\n\t\t\t\t<div className=\"clearfloat\">\r\n\t\t\t\t\t<button onClick={() => this.handleTrain()} className=\"train-btn\" >Train Start!</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\r\n\t\t);\r\n\t}\r\n\r\n}\r\n","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\DataPoint.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\model\\TimeSpan.tsx",["328"],"import { runInThisContext } from \"node:vm\";\r\n\r\n/**\r\n * Diese Klasse repräsentiert ein Zeitfenster.\r\n * Mit start als Anfang und end als Ende des Zeitfensters.\r\n */\r\nexport class TimeSpan {\r\n  private start: number; //Startpunkt des Zeitfensters in Sekunden.\r\n  private end: number; //Enpunkt des Zeitfensters in Sekunden.\r\n\r\n  /**\r\n   * Erstellt ein Zeitfenster.\r\n   * @param start Startpunkt in Sekunden (start >= 0)\r\n   * @param end Endpunkt in Sekunden (end >= start)\r\n   */\r\n  public constructor(start: number, end: number) {\r\n    if (start >= 0) {\r\n      this.start = start;\r\n    } else {\r\n      this.start = 0;\r\n    }\r\n    if (end >= this.start) {\r\n      this.end = end;\r\n    } else {\r\n      this.end = this.start;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setzt das übergebene Zeitfenster als Zeitfenster, wenn dies den Anforderungen entspricht. (0 <= start <= end)\r\n   * @returns false, falls das Zeitfenster nicht gesetzt wurde\r\n   */\r\n  public setTimeSpan(span: { start: number, end: number; }): boolean {\r\n    if (span.end >= span.start && span.start >= 0) {\r\n      this.start = span.start;\r\n      this.end = span.end;\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Gibt den Startpunkt in Sekunden zurück.\r\n   */\r\n  public getStart(): number {\r\n    return this.start;\r\n  }\r\n\r\n  /**\r\n   * Gibt den Enpunkt in Sekunden zurück.\r\n   */\r\n  public getEnd(): number {\r\n    return this.end;\r\n  }\r\n}","D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\index.tsx",["329"],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\State.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoadModelButton\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoginWindow\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ConstantsText\\index.tsx",["330","331"],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\NewProjectButton\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ProjectList\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LinkText\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\QRImage\\index.tsx",["332"],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ChangeToVisuBtn\\index.tsx",[],"D:\\PSE\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ModelList\\index.tsx",["333"],{"ruleId":"334","replacedBy":"335"},{"ruleId":"336","replacedBy":"337"},{"ruleId":"338","severity":1,"message":"339","line":98,"column":5,"nodeType":"340","messageId":"341","endLine":106,"endColumn":6},{"ruleId":"342","severity":1,"message":"343","line":8,"column":10,"nodeType":"344","messageId":"345","endLine":8,"endColumn":20},{"ruleId":"342","severity":1,"message":"346","line":9,"column":37,"nodeType":"344","messageId":"345","endLine":9,"endColumn":45},{"ruleId":"342","severity":1,"message":"347","line":9,"column":47,"nodeType":"344","messageId":"345","endLine":9,"endColumn":57},{"ruleId":"342","severity":1,"message":"348","line":9,"column":59,"nodeType":"344","messageId":"345","endLine":9,"endColumn":69},{"ruleId":"342","severity":1,"message":"349","line":9,"column":71,"nodeType":"344","messageId":"345","endLine":9,"endColumn":78},{"ruleId":"342","severity":1,"message":"350","line":8,"column":10,"nodeType":"344","messageId":"345","endLine":8,"endColumn":26},{"ruleId":"351","severity":1,"message":"352","line":225,"column":47,"nodeType":"353","messageId":"354","endLine":225,"endColumn":49},{"ruleId":"342","severity":1,"message":"355","line":4,"column":10,"nodeType":"344","messageId":"345","endLine":4,"endColumn":15},{"ruleId":"342","severity":1,"message":"356","line":5,"column":10,"nodeType":"344","messageId":"345","endLine":5,"endColumn":29},{"ruleId":"351","severity":1,"message":"352","line":124,"column":23,"nodeType":"353","messageId":"354","endLine":124,"endColumn":25},{"ruleId":"342","severity":1,"message":"356","line":8,"column":10,"nodeType":"344","messageId":"345","endLine":8,"endColumn":29},{"ruleId":"351","severity":1,"message":"357","line":313,"column":12,"nodeType":"353","messageId":"354","endLine":313,"endColumn":14},{"ruleId":"351","severity":1,"message":"357","line":346,"column":35,"nodeType":"353","messageId":"354","endLine":346,"endColumn":37},{"ruleId":"342","severity":1,"message":"356","line":10,"column":33,"nodeType":"344","messageId":"345","endLine":10,"endColumn":52},{"ruleId":"342","severity":1,"message":"358","line":9,"column":10,"nodeType":"344","messageId":"345","endLine":9,"endColumn":31},{"ruleId":"342","severity":1,"message":"356","line":9,"column":33,"nodeType":"344","messageId":"345","endLine":9,"endColumn":52},{"ruleId":"359","severity":1,"message":"360","line":13,"column":10,"nodeType":"361","messageId":"362","endLine":13,"endColumn":19,"fix":"363"},{"ruleId":"364","severity":1,"message":"365","line":94,"column":80,"nodeType":"366","messageId":"367","endLine":94,"endColumn":82},{"ruleId":"364","severity":1,"message":"365","line":94,"column":104,"nodeType":"366","messageId":"367","endLine":94,"endColumn":106},{"ruleId":"351","severity":1,"message":"357","line":98,"column":35,"nodeType":"353","messageId":"354","endLine":98,"endColumn":37},{"ruleId":"342","severity":1,"message":"356","line":9,"column":33,"nodeType":"344","messageId":"345","endLine":9,"endColumn":52},{"ruleId":"359","severity":1,"message":"360","line":16,"column":13,"nodeType":"361","messageId":"362","endLine":16,"endColumn":22,"fix":"368"},{"ruleId":"342","severity":1,"message":"358","line":2,"column":9,"nodeType":"344","messageId":"345","endLine":2,"endColumn":30},{"ruleId":"351","severity":1,"message":"357","line":138,"column":33,"nodeType":"353","messageId":"354","endLine":138,"endColumn":35},{"ruleId":"342","severity":1,"message":"356","line":9,"column":33,"nodeType":"344","messageId":"345","endLine":9,"endColumn":52},{"ruleId":"359","severity":1,"message":"360","line":13,"column":10,"nodeType":"361","messageId":"362","endLine":13,"endColumn":19,"fix":"369"},{"ruleId":"370","severity":1,"message":"371","line":2,"column":8,"nodeType":"344","messageId":"345","endLine":2,"endColumn":14},{"ruleId":"370","severity":1,"message":"372","line":3,"column":8,"nodeType":"344","messageId":"345","endLine":3,"endColumn":15},{"ruleId":"373","severity":1,"message":"374","line":48,"column":22,"nodeType":"344","messageId":"375","endLine":48,"endColumn":23},{"ruleId":"334","replacedBy":"335"},{"ruleId":"336","replacedBy":"337"},{"ruleId":"342","severity":1,"message":"358","line":3,"column":10,"nodeType":"344","messageId":"345","endLine":3,"endColumn":31},{"ruleId":"342","severity":1,"message":"376","line":1,"column":10,"nodeType":"344","messageId":"345","endLine":1,"endColumn":18},{"ruleId":"351","severity":1,"message":"357","line":57,"column":32,"nodeType":"353","messageId":"354","endLine":57,"endColumn":34},{"ruleId":"342","severity":1,"message":"356","line":2,"column":10,"nodeType":"344","messageId":"345","endLine":2,"endColumn":29},{"ruleId":"351","severity":1,"message":"352","line":14,"column":47,"nodeType":"353","messageId":"354","endLine":14,"endColumn":49},{"ruleId":"373","severity":1,"message":"377","line":53,"column":18,"nodeType":"344","messageId":"375","endLine":53,"endColumn":19},{"ruleId":"378","severity":1,"message":"379","line":57,"column":13,"nodeType":"380","messageId":"381","endLine":67,"endColumn":14},{"ruleId":"351","severity":1,"message":"357","line":68,"column":23,"nodeType":"353","messageId":"354","endLine":68,"endColumn":25},{"ruleId":"351","severity":1,"message":"357","line":71,"column":23,"nodeType":"353","messageId":"354","endLine":71,"endColumn":25},{"ruleId":"342","severity":1,"message":"358","line":3,"column":10,"nodeType":"344","messageId":"345","endLine":3,"endColumn":31},{"ruleId":"382","severity":1,"message":"383","line":56,"column":42,"nodeType":"384","messageId":"385","endLine":56,"endColumn":44},{"ruleId":"342","severity":1,"message":"386","line":1,"column":10,"nodeType":"344","messageId":"345","endLine":1,"endColumn":26},{"ruleId":"351","severity":1,"message":"357","line":127,"column":55,"nodeType":"353","messageId":"354","endLine":127,"endColumn":57},{"ruleId":"342","severity":1,"message":"387","line":1,"column":10,"nodeType":"344","messageId":"345","endLine":1,"endColumn":16},{"ruleId":"342","severity":1,"message":"388","line":2,"column":17,"nodeType":"344","messageId":"345","endLine":2,"endColumn":26},{"ruleId":"342","severity":1,"message":"371","line":2,"column":8,"nodeType":"344","messageId":"345","endLine":2,"endColumn":14},{"ruleId":"351","severity":1,"message":"357","line":22,"column":38,"nodeType":"353","messageId":"354","endLine":22,"endColumn":40},"no-native-reassign",["389"],"no-negated-in-lhs",["390"],"no-unreachable","Unreachable code.","VariableDeclaration","unreachableCode","@typescript-eslint/no-unused-vars","'FinishPage' is defined but never used.","Identifier","unusedVar","'QRNumber' is defined but never used.","'QRAlphaNum' is defined but never used.","'QR8BitByte' is defined but never used.","'QRKanji' is defined but never used.","'isBreakStatement' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'State' is defined but never used.","'NotificationManager' is defined but never used.","Expected '===' and instead saw '=='.","'NotificationContainer' is defined but never used.","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"391","text":"392"},"no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator",{"range":"393","text":"392"},{"range":"394","text":"392"},"no-unused-vars","'PubSub' is defined but never used.","'diagram' is defined but never used.","no-redeclare","'j' is already defined.","redeclared","'relative' is defined but never used.","'i' is already defined.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'runInThisContext' is defined but never used.","'Method' is defined but never used.","'Component' is defined but never used.","no-global-assign","no-unsafe-negation",[600,600],"()",[706,706],[555,555]]