[{"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/index.tsx":"1","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/reportWebVitals.ts":"2","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/controller/MainController.tsx":"3","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/controller/ReferringController.tsx":"4","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/pages/State.tsx":"5","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/model/Facade.tsx":"6","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/controller/DeliveryController.tsx":"7","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/controller/VisualizationController.tsx":"8","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/model/Language.tsx":"9","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/model/DatabaseConnector.tsx":"10","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/model/User.tsx":"11","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/model/Sensor.tsx":"12","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/model/AIBuilder.tsx":"13","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/pages/FinishPage/index.tsx":"14","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/controller/ModelCreationController.tsx":"15","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/pages/DeliveryPage/index.tsx":"16","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/pages/VisualizationPage/index.tsx":"17","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/model/Device.tsx":"18","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/model/Project.tsx":"19","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/pages/FinishPage/State.tsx":"20","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/pages/DeliveryPage/State.tsx":"21","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/pages/VisualizationPage/State.tsx":"22","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/pages/ModelCreationPage/index.tsx":"23","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/model/AIModel.tsx":"24","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/model/DataSet.tsx":"25","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/model/Session.tsx":"26","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/FinishComponents/Body/index.tsx":"27","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/FinishComponents/Title/index.tsx":"28","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/FinishComponents/Input/Labelling/index.tsx":"29","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/pages/ModelCreationPage/State.tsx":"30","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/DeliveryComponents/DownloadButton/index.tsx":"31","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/VisualizationComponents/ImageList/index.tsx":"32","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/VisualizationComponents/ShowImage/index.tsx":"33","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/VisualizationComponents/FinishButton/index.tsx":"34","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/DeliveryComponents/EmailList/index.tsx":"35","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/model/DataRow.tsx":"36","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/model/Label.tsx":"37","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/ModelCreationComponents/ImputationList/index.tsx":"38","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/ModelCreationComponents/ModelTypeList/index.tsx":"39","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/ModelCreationComponents/NormalizationList/index.tsx":"40","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/ModelCreationComponents/FeatureList/index.tsx":"41","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/ModelCreationComponents/TrainButton/index.tsx":"42","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/model/TimeSpan.tsx":"43","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/model/DataPoint.tsx":"44","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/ModelCreationComponents/DatasetList/index.jsx":"45","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/ModelCreationComponents/AddDatasetButton/index.jsx":"46","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/ModelCreationComponents/DatasetItem/index.jsx":"47","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/pages/ReferringPage/index.tsx":"48","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/pages/ReferringPage/State.tsx":"49","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/ReferringComponents/ConstantsText/index.tsx":"50","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/ReferringComponents/LoadModelButton/index.tsx":"51","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/ReferringComponents/NewProjectButton/index.tsx":"52","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/ReferringComponents/LoginWindow/index.tsx":"53","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/ReferringComponents/LinkText/index.tsx":"54","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/ReferringComponents/QRImage/index.tsx":"55","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/ReferringComponents/ProjectList/index.tsx":"56","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/ReferringComponents/ChangeToVisuBtn/index.tsx":"57","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/ReferringComponents/ModelList/index.tsx":"58","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/controller/StartController.tsx":"59","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/controller/DataCollectionController.tsx":"60","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/controller/SensorManager.tsx":"61","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/pages/StartPage/index.tsx":"62","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/pages/StartPage/State.tsx":"63","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/controller/FinishController.tsx":"64","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/pages/DataCollectionPage/index.tsx":"65","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/StartComponents/Title/index.tsx":"66","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/pages/DataCollectionPage/State.tsx":"67","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/StartComponents/Input/index.tsx":"68","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/DataCollectionComponents/Diagram/index.tsx":"69","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/DataCollectionComponents/Countdown/index.tsx":"70","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/DataCollectionComponents/Title/index.tsx":"71"},{"size":468,"mtime":1613365606311,"results":"72","hashOfConfig":"73"},{"size":425,"mtime":1613365606313,"results":"74","hashOfConfig":"73"},{"size":3164,"mtime":1613816748932,"results":"75","hashOfConfig":"73"},{"size":6011,"mtime":1613825108026,"results":"76","hashOfConfig":"73"},{"size":3585,"mtime":1613828503486,"results":"77","hashOfConfig":"73"},{"size":16972,"mtime":1613815910149,"results":"78","hashOfConfig":"73"},{"size":2228,"mtime":1613653426719,"results":"79","hashOfConfig":"73"},{"size":3422,"mtime":1613486923053,"results":"80","hashOfConfig":"73"},{"size":1817,"mtime":1613491666434,"results":"81","hashOfConfig":"73"},{"size":11238,"mtime":1613757460123,"results":"82","hashOfConfig":"73"},{"size":13800,"mtime":1613491666434,"results":"83","hashOfConfig":"73"},{"size":5905,"mtime":1613814967165,"results":"84","hashOfConfig":"73"},{"size":4311,"mtime":1613815465300,"results":"85","hashOfConfig":"73"},{"size":1577,"mtime":1613660650476,"results":"86","hashOfConfig":"73"},{"size":1412,"mtime":1613486923054,"results":"87","hashOfConfig":"73"},{"size":1553,"mtime":1613660650475,"results":"88","hashOfConfig":"73"},{"size":2296,"mtime":1613660650476,"results":"89","hashOfConfig":"73"},{"size":1698,"mtime":1613365606312,"results":"90","hashOfConfig":"73"},{"size":7363,"mtime":1613491666434,"results":"91","hashOfConfig":"73"},{"size":325,"mtime":1613660650475,"results":"92","hashOfConfig":"73"},{"size":266,"mtime":1613660650475,"results":"93","hashOfConfig":"73"},{"size":286,"mtime":1613497539315,"results":"94","hashOfConfig":"73"},{"size":3068,"mtime":1613465348061,"results":"95","hashOfConfig":"73"},{"size":465,"mtime":1613365606311,"results":"96","hashOfConfig":"73"},{"size":6236,"mtime":1613365606312,"results":"97","hashOfConfig":"73"},{"size":1524,"mtime":1613365606313,"results":"98","hashOfConfig":"73"},{"size":571,"mtime":1613660650472,"results":"99","hashOfConfig":"73"},{"size":967,"mtime":1613365606315,"results":"100","hashOfConfig":"73"},{"size":2603,"mtime":1613660650472,"results":"101","hashOfConfig":"73"},{"size":556,"mtime":1613365606322,"results":"102","hashOfConfig":"73"},{"size":347,"mtime":1613660650471,"results":"103","hashOfConfig":"73"},{"size":1721,"mtime":1613497539313,"results":"104","hashOfConfig":"73"},{"size":679,"mtime":1613497539314,"results":"105","hashOfConfig":"73"},{"size":352,"mtime":1613660650474,"results":"106","hashOfConfig":"73"},{"size":5663,"mtime":1613660650471,"results":"107","hashOfConfig":"73"},{"size":3279,"mtime":1613365606312,"results":"108","hashOfConfig":"73"},{"size":1727,"mtime":1613365606312,"results":"109","hashOfConfig":"73"},{"size":1058,"mtime":1613365606315,"results":"110","hashOfConfig":"73"},{"size":1166,"mtime":1613365606315,"results":"111","hashOfConfig":"73"},{"size":1239,"mtime":1613365606315,"results":"112","hashOfConfig":"73"},{"size":1402,"mtime":1613365606315,"results":"113","hashOfConfig":"73"},{"size":313,"mtime":1613365606315,"results":"114","hashOfConfig":"73"},{"size":1315,"mtime":1613365606313,"results":"115","hashOfConfig":"73"},{"size":897,"mtime":1613365606312,"results":"116","hashOfConfig":"73"},{"size":642,"mtime":1613365606315,"results":"117","hashOfConfig":"73"},{"size":2487,"mtime":1613365606315,"results":"118","hashOfConfig":"73"},{"size":984,"mtime":1613365606315,"results":"119","hashOfConfig":"73"},{"size":5788,"mtime":1613826421926,"results":"120","hashOfConfig":"73"},{"size":823,"mtime":1613825108026,"results":"121","hashOfConfig":"73"},{"size":218,"mtime":1613365606316,"results":"122","hashOfConfig":"73"},{"size":701,"mtime":1613823396902,"results":"123","hashOfConfig":"73"},{"size":1232,"mtime":1613823444231,"results":"124","hashOfConfig":"73"},{"size":3143,"mtime":1613660650474,"results":"125","hashOfConfig":"73"},{"size":620,"mtime":1613365606316,"results":"126","hashOfConfig":"73"},{"size":493,"mtime":1613365606317,"results":"127","hashOfConfig":"73"},{"size":3009,"mtime":1613819318684,"results":"128","hashOfConfig":"73"},{"size":382,"mtime":1613465301585,"results":"129","hashOfConfig":"73"},{"size":1813,"mtime":1613660650474,"results":"130","hashOfConfig":"73"},{"size":3177,"mtime":1613653905567,"results":"131","hashOfConfig":"73"},{"size":1560,"mtime":1613365606311,"results":"132","hashOfConfig":"73"},{"size":3136,"mtime":1613663078306,"results":"133","hashOfConfig":"73"},{"size":2232,"mtime":1613489484944,"results":"134","hashOfConfig":"73"},{"size":498,"mtime":1613489484944,"results":"135","hashOfConfig":"73"},{"size":3602,"mtime":1613828503486,"results":"136","hashOfConfig":"73"},{"size":2541,"mtime":1613365606322,"results":"137","hashOfConfig":"73"},{"size":968,"mtime":1613365606319,"results":"138","hashOfConfig":"73"},{"size":350,"mtime":1613365606322,"results":"139","hashOfConfig":"73"},{"size":3707,"mtime":1613489484943,"results":"140","hashOfConfig":"73"},{"size":351,"mtime":1613365606313,"results":"141","hashOfConfig":"73"},{"size":1034,"mtime":1613365606313,"results":"142","hashOfConfig":"73"},{"size":968,"mtime":1613365606313,"results":"143","hashOfConfig":"73"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"147"},"1oczjs0",{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"147"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"147"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"147"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"147"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"147"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"147"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"147"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"147"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"147"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"147"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"147"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"147"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"147"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"249"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"249"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"249"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"256","messages":"257","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"147"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"147"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"147"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"147"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"147"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289","usedDeprecatedRules":"147"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"294","messages":"295","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"296","usedDeprecatedRules":"147"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303","usedDeprecatedRules":"147"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"147"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/index.tsx",["311","312"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport { MainController } from './controller/MainController';\n\nMainController.getInstance().startApp();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["313","314"],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/reportWebVitals.ts",[],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/controller/MainController.tsx",["315","316"],"import { PageController } from \"./PageController\";\nimport { RefferingController } from \"./ReferringController\";\nimport { MainControllerInterface } from \"./MainControllerInterface\";\nimport { IState, States } from \"../view/pages/State\";\nimport { Facade } from \"../model/Facade\";\nimport { StartController } from \"./StartController\";\n\nexport class MainController implements MainControllerInterface {\n  private facade: Facade;\n\n  private static mainController: MainController;\n\n  private currentPageController: PageController | undefined;\n\n  /**\n   * Konstruktor des MainControllers. Holt sich die Fassade.\n   */\n  constructor() {\n    this.facade = new Facade(\"de-de\");\n  }\n\n  /**\n   * Gibt sich selber zurück und sorgt dafür das nur ein MainController besteht.\n   * @returns MainController\n   */\n  static getInstance() {\n    if (this.mainController === undefined) {\n      this.mainController = new MainController();\n      return this.mainController;\n    }\n    return this.mainController;\n  }\n\n  /**\n   * Prüft ob das Gerät auf das Internet zugreifen kann.\n   * @returns Gibt true zurück falls eine Internetverbindung besteht, sonst wird false zurück gegeben.\n   */\n  checkConnection() {\n    return window.navigator.onLine;\n  }\n\n  /**\n   * Prüft ob der Benutzer angemeldet ist.\n   * @returns Gibt true zurück falls der Benutzer angemeldet ist, sonst wird false zurück gegeben.\n   */\n  checkLoginStatus() {\n    return false;//this.facade.checkLogin();\n  }\n\n  // static getSession() {\n  //    return false\n  //}\n\n  /**\n   * Setzt den momentanen Seitenverwalter neu\n   * @param destinationPageController Der neue Seitenverwalter\n   */\n  changeTo(destinationPageController: PageController) {\n    this.currentPageController = destinationPageController;\n  }\n\n  /**\n   * Andwendungstart für einen Desktop\n   */\n  startApp() {\n    const queryString = window.location.search;\n    let urlParams = new URLSearchParams(queryString);\n    if (urlParams.get(\"isMiner\") === \"true\") {\n      var controller: PageController = new StartController();\n    } else {\n      var controller: PageController = new RefferingController();\n    }\n    this.changeTo(controller);\n  }\n\n  /**\n   * @returns Gibt die Fassade zurück\n   */\n  getFacade() {\n    return this.facade;\n  }\n\n  /**\n   * @param ids Alle ids, zu denen man die Texte möchte.\n   * @returns Gibt alle texte zu den übergebenen ids zurück.\n   */\n  getMessage(messages: { text: string, id: number; }[]) {\n    let messageIDs: number[] = [];\n    for (let index = 0; index < messages.length; index++) {\n      messageIDs.push(messages[index].id);\n    }\n    let texts: string[] = [];\n    for (let index = 0; index < messages.length; index++) {\n      messages[index].text = texts[index];\n      return messages;\n    }\n  }\n\n  /**\n   * @param languageCode Das Sprachkürzel als string.\n   * @returns Gibt true zurück falls der wechsel erfolgt ist, sonst false.\n   */\n  setLanguage(languageCode: string) {\n    let nextState: States;\n    let success = this.getFacade().setLanguage(languageCode);\n    if (success) {\n      nextState = States.NeedMessage;\n    } else {\n      nextState = States.LoadError;\n    }\n    return nextState;\n  }\n}\n","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/controller/ReferringController.tsx",["317","318","319","320","321","322"],"import { Page } from \"../view/pages/PageInterface\";\nimport { IState, States } from \"../view/pages/State\";\nimport { PageController } from \"./PageController\";\nimport { MainController } from \"./MainController\";\nimport { DeliveryController } from \"./DeliveryController\";\nimport { VisualizationController } from \"./VisualizationController\";\nimport { ReferringPage } from \"../view/pages/ReferringPage/index\"\nimport { QRCode, ErrorCorrectLevel, QRNumber, QRAlphaNum, QR8BitByte, QRKanji } from 'qrcode-generator-ts/js';\n\n\nexport class RefferingController implements PageController {\n    private page: Page;\n    private state: IState;\n\n    /**\n     * Konstruktor des Seitenverwalters. Registriert sich als Beobachter auf seiner Seite und setzt den Start Status. \n     */\n    constructor() {\n        this.page = new ReferringPage({});\n        this.page.attach(this);\n        this.state = this.page.getState();\n        this.update();\n    }\n\n    /**\n     * Die Update Methode des Seitenverwalters.\n     */\n    update() {\n        this.state = this.page.getState();\n        switch (this.state.currentState) {\n            case States.LoadProject:\n                this.loadProject();\n                break;\n            case States.NeedQRC:\n                this.createQR();\n                break;\n            case States.Register:\n                this.register();\n                break;\n            case States.Login:\n                this.login();\n                break;\n            case States.NewProjekt:\n                this.createNewProject();\n                break;\n            case States.LoadProject:\n                this.loadProject();\n                break;\n            case States.LoadModel:\n                this.loadModel();\n                break;\n            case States.SetLanguage:\n                this.page.setState(MainController.getInstance().setLanguage(this.state.languageCode));\n                break;\n            case States.NeedMessage:\n                this.page.setState(MainController.getInstance().getMessage(this.state.messages));\n                break;\n            case States.Register:\n                this.register();\n                break;\n            case States.ChangeToVisual:\n                MainController.getInstance().changeTo(new VisualizationController(this.state.currentProject!));\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * Logt den Benutzer ein\n     */\n    login() {\n        let adminData: { name: string, email: string, password: string; } = this.state.adminData!;\n        let loginSucess: Promise<boolean> = MainController.getInstance().getFacade().loginAdmin(adminData.email, adminData.password);\n        this.state.wait! = loginSucess\n        loginSucess.then((value: boolean) => {\n            if (value) {\n                let projectData: Promise<{ projectID: number; projectName: string; AIModelID: number[]; }[]> = MainController.getInstance().getFacade().getProjectMetas();\n                projectData.then((data: { projectID: number; projectName: string; AIModelID: number[]; }[]) => {\n                    this.state.projectData! = data;\n                });\n\n            } else {\n                this.state.currentState = States.LoginFail;\n            }\n        });\n        loginSucess.catch((value: boolean) => {\n            console.log(value)\n        })\n    }\n\n    /**\n     * Registriert den Benutzer\n     */\n    register() {\n        let adminData: { name: string, email: string, password: string; } = this.state.adminData!;\n        let loginSucess: Promise<boolean> = MainController.getInstance().getFacade().registerAdmin(adminData.name, adminData.email, adminData.password);\n        loginSucess.then((value: boolean) => {\n            if (!value) {\n                this.state.currentState = States.LoginFail;\n            }\n        });\n    }\n\n    /**\n     * Erstellt ein QRCode und übergibt in an die Seite\n     */\n    createQR() {\n        const url = new URL(document.URL);\n        url.searchParams.append(\"SessionID\", MainController.getInstance().getFacade().getSessionID().toString());\n        let link: string = url.toString();\n        var qr = new QRCode();\n        qr.setTypeNumber(5);\n        qr.setErrorCorrectLevel(ErrorCorrectLevel.L);\n        qr.addData(link);\n        qr.make();\n        this.state.qr = qr.toDataURL();\n        this.state.currentState = States.SetQRC;\n    }\n\n    /**\n     * Erstelle ein neues Projekt, welches auch als momentanes Projekt gesetzt wird.\n     */\n    createNewProject() {\n        let sucess: Promise<boolean> = MainController.getInstance().getFacade().createProject(this.state.currentProject!.projectName);\n        sucess.then((value: boolean) => {\n            if (value) {\n                this.state.currentState = States.NeedQRC;\n            } else {\n                this.state.currentState = States.LoadError;\n            }\n        });\n    }\n\n    /**\n     * Setzt ein Projekt als momentanes Projekt\n     */\n    loadProject() {\n        let projectId: number = this.state.currentProject!.projectID!;\n        let sucess: Promise<boolean> = MainController.getInstance().getFacade().loadProject(projectId);\n        sucess.then((value: boolean) => {\n            if (value) {\n                this.state.currentState = States.NeedQRC;\n            } else {\n                this.state.currentState = States.LoadError;\n            }\n        });\n    }\n\n    /**\n     * Läde ein Modell und wechselt zur delivery Seite\n     */\n    loadModel() {\n        let projectId: number = this.state.currentProject!.projectID;\n        let sucess: Promise<boolean> = MainController.getInstance().getFacade().loadProject(projectId);\n        sucess.then((value: boolean) => {\n            if (value) {\n                let deliveryConroller: DeliveryController = new DeliveryController(this.state.currentProject!);\n                MainController.getInstance().changeTo(deliveryConroller);\n            } else {\n                this.state.currentState = States.LoadError;\n            }\n        });\n    }\n}","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/pages/State.tsx",[],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/model/Facade.tsx",["323","324","325"],"import { DeliveryFormat } from \"./DeliveryFormat\";\nimport { DatabaseConnector } from \"./DatabaseConnector\";\nimport { Language } from \"./Language\";\nimport { AccelerometerData, MagnetometerData, SensorData } from \"./Sensor\";\nimport { Admin, Dataminer, AIModelUser, User } from \"./User\";\nimport { AIBuilder } from \"./AIBuilder\";\n\ninterface FacadeInterface {\n  createDataSet(sensorTypes: string[], dataSetName: string): boolean;\n  sendDataPoint(dataRowID: number, value: number[]): boolean;\n  readDataPoint(dataRowID: number): object;\n  loadProject(projectID: number): boolean;\n  getProjectMetas(): string[];\n  getDataSetMeta(): string[];\n  getSessionID(): number;\n  getDataRows(dataSetID: number): number[][][];\n  getCurrentDataRows(): { value: number, relativeTime: number; }[];\n  getMessage(messageID: number): string;\n  setLanguage(languageCode: string): boolean;\n  getLanguageMetas(): object[];\n  getEmail(): string;\n  deleteDataSet(dataSetID: number): boolean;\n  registerAdmin(adminName: string, email: string, password: string): boolean;\n  registerDataminer(dataminerName: string, sessionID: number): boolean;\n  registerAIModelUser(aiModelUserName: string): boolean;\n  loginAdmin(email: string, password: string): boolean;\n  logoutAdmin(): boolean;\n  createProject(projectName: string): boolean;\n  setLabel(labelID: number, start: number, end: number): boolean;\n  createLabel(): number; //labelid von datenbank\n  getLabels(): object[];\n  checkLogin(): boolean;\n  classify(aiId: number, dataSetId: number, callBack: Function): void;\n  getAIModel(format: DeliveryFormat): object;\n  applyModel(modeldata: object): void;\n} export type { FacadeInterface };\n\n/**\n * Die Facade stellt alle interaktionen mit dem Model zur Verfügung\n */\nexport class Facade {\n  private language: Language; //Alle Nachrichten, in der geladenen Sprache\n  private dbCon: DatabaseConnector; //Die Verbindung zur Datenbank\n  private user?: User; //Der Benutzer, entweder Admin, Datenerfasser oder AIModelUser\n\n\n  /**\n   * Erstellt die Facade\n   * @param languageCode der Sprachcode von der Sprache, die geladen werden soll\n   */\n  constructor(languageCode: string) {\n    this.dbCon = new DatabaseConnector();\n    this.language = new Language(this.dbCon.loadLanguage({ languageCode }));\n    const sensorTest = new AccelerometerData(1, \"\", \"\");\n  }\n\n  /**\n   * Erstellt ein Datensatz\n   * @param sensorTypeID muss der Sensor Typ ID von einem Sensor des Gerätes übereinstimmen\n   * @param dataSetName Name des Datensatzes\n   * @returns true, wenn der Datensatz erstellt wurde. Dies ist der Fall, wenn ein Benutzer existiert welcher in einer Session ist und alle Sensortypen existieren.\n   */\n  async createDataSet(sensorTypeID: number[], dataSetName: string, datarowNames?: string[]): Promise<boolean> {\n    if (this.user != null) {\n      let sessionID: number = this.getSessionID();\n      let dataRowSensors: SensorData[] = this.user.getDeviceSensors(sensorTypeID);\n      if (dataRowSensors.length > 0 && dataRowSensors.length === sensorTypeID.length && sessionID >= 0) {\n        let projectID: number = this.user.getCurrentProjectID();\n        let userID: number = this.user.getID();\n        let dataRow: { sensorID: number, datarowName?: string; }[] = [];\n        for (let i = 0; i < dataRowSensors.length; i++) {\n          let sensordata = dataRowSensors[i].getSensorData();\n          if (datarowNames != null && datarowNames.length >= i) {\n            dataRow.push({ sensorID: sensordata.id, datarowName: datarowNames[i] });\n          } else {\n            dataRow.push({ sensorID: sensordata.id });\n          }\n        }\n        let dataSetID: number = await this.dbCon.createDataSet({ sessionID, projectID, userID, dataSetName, dataRow });\n        if (dataSetID > 0) {\n          return this.user.createDataSet(dataRowSensors, dataSetID, dataSetName);\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Sendet den Datenpunkt an die Datenbank\n   * @param dataRowID die ID der aktuellen Datenreihe des eingelesenen Datenpunkts\n   * @param value der SensorWert\n   * @param relativeTime die relative Zeit zum Aufnahmestart in Millisekunden\n   * @return true, wenn der Datenpunkt erfolgreich an die Datenbank gesendet wurde\n   */\n  async sendDataPoint(dataRowID: number, value: number, relativeTime: number): Promise<boolean> {\n    if (this.user != null) {\n      let sessionID: number = this.getSessionID();\n      let userID: number = this.user.getID();\n      let dataSetID: number = this.user.getCurrentDataSetID();\n      return this.dbCon.sendDataPoint({ sessionID, userID, dataSetID, dataRowID, datapoint: { value, relativeTime } });\n    }\n    return false;\n  }\n\n  /**\n   * Liest für den aktuellen Datensatz den Sensor aus von der Datenreihe mit der übergebenen ID\n   * @param dataRowID die DatenreihenID\n   */\n  readDataPoint(dataRowID: number): { dataPoint?: { value: number, relativeTime: number; }; } {\n    if (this.user != null) {\n      return this.user.readDataPoint(dataRowID);\n    }\n    return {};\n  }\n\n  /**\n   * Lädt aus der Datenbank das Projekt mit der übergebenen ID, hierfür muss der Admin angemeldet sein\n   * @param projectID die Projekt ID\n   * @returns true, wenn das Projekt erfolgreich geladen wurde dies tritt nur ein, wenn eine Verbindung zur Datenbank besteht,\n   *          die Projekt ID existiert und der Admin dafür angemeldet ist\n   */\n  async loadProject(projectID: number): Promise<boolean> {\n    if (this.user != null && this.user instanceof Admin && !this.user.existProject(projectID)) {\n      let adminEmail: string = this.user.getEmail();\n      let userID: number = this.user.getID();\n      return this.user.loadProject(await this.dbCon.loadProject({ userID, adminEmail, projectID }));\n    }\n    return false;\n  }\n\n  /**\n   * Lädt vom aktuell angemeldeten Admin von seinen Projekten den Namen und die die Projekt ID\n   * @returns Von allen Projekten des Admins Projekt ID und Projektname\n   */\n  async getProjectMetas(): Promise<{ projectID: number, projectName: string, AIModelID: number[]; }[]> {\n    if (this.user != null) {\n      let userID: number = this.user.getID();\n      return await this.dbCon.getProjectMetas({ userID, adminEmail: this.getAdminEmail() });\n    }\n    return [];\n  }\n\n  /**\n   * Gibt vom aktuellen Projekt von allen Datensätzen die Datensatz ID und der Datensatz Name zurück\n   */\n  getDataSetMetas(): { dataSetID: number, dataSetName: string; }[] {\n    if (this.user != null) {\n      return this.user.getDataSetMetas();\n    }\n    return [];\n  }\n\n  /**\n   * Gibt die Session ID des aktuellen Projekts zurück, -1 falls kein aktuelles Projekt existiert\n   */\n  getSessionID(): number {\n    if (this.user != null) {\n      return this.user.getSessionID();\n    }\n    return -1;\n  }\n\n  /**\n   * Gibt vom aktuellen Projekt die Datenreihen der Datensatz ID zurück und setzt diesen Datensatz als aktuellen Datensatz\n   * @param dataSetID die Datensatz ID von der die Datenreihen gelesen werden sollen\n   * @returns die Sensordaten von der Datenreihe\n   */\n  getDataRows(dataSetID: number): { dataRows?: { value: number, relativeTime: number; }[][]; } {\n    if (this.user != null) {\n      return this.user.getDataRows(dataSetID);\n    }\n    return {};\n  }\n\n  /**\n   * Gibt vom aktuellen Projekt die Datenreihen des aktuellen Datensatzes zurück\n   * @param dataSetID die Datensatz ID von der die Datenreihen gelesen werden sollen\n   * @returns die Sensordaten von der Datenreihe\n   */\n  getCurrentDataRows(): { dataRows?: { value: number, relativeTime: number; }[][]; } {\n    if (this.user != null) {\n      return this.user.getCurrentDataRows();\n    }\n    return {};\n  }\n\n  /**\n   * Gibt aus der geladenen Sprache die Nachrichten die über die IDs angegeben werden\n   * @param messageID alle IDs, von denen die Sprachnachricht geladen werden soll\n   * @returns alle Nachrichten, in der gleichen Reihenfolge wie angefordert\n   */\n  getMessage(messageID: number[]): Promise<{ messageID: number, message: string; }[]> {\n    return this.language.getMessage(messageID);\n  }\n\n  /**\n   * Gibt die auswählbaren Sensoren als ID mit ihrer Art in der Passenden Sprache zurück\n   */\n  async getAvailableSensors(): Promise<{ sensorTypID: number, sensorType: string; }[]> {\n    if (this.user != null) {\n      var sensors: { sensorTypID: number, sensorType: string; }[] = [];\n      let message: { messageID: number, message: string; }[] = await this.language.getMessage(this.user.getAvailableSensors());\n      for (let i = 0; i < message.length; i++) {\n        sensors.push({ sensorTypID: message[i].messageID, sensorType: message[i].message });\n      }\n      return sensors;\n    }\n    return [];\n  }\n\n  /**\n   * Lädt die Sprache aus der Datenbank mit dem übergebenen Sprachcode\n   * @param languageCode Sprachcode\n   * @returns true, falls die Sprache erfolgreich geladen wurde\n   */\n  async setLanguage(languageCode: string): Promise<boolean> {\n    if (languageCode !== await this.language.getLanguageCode()) {\n      return this.language.setLanguagePromise(this.dbCon.loadLanguage({ languageCode }));\n    }\n    return true;\n  }\n\n  /**\n   * Gibt von allen in der Datenbank verfügbaren Sprachen den Sprachcode sowie den Sprachennamen zurück\n   */\n  getLanguageMetas(): Promise<{ languageCode: number, languageName: string; }[]> {\n    return this.dbCon.getLanguageMetas();\n  };\n\n  /**\n   * Gibt die Email vom Admin zurück, diese kann leer sein falls kein Admin angemeldet ist\n   */\n  getAdminEmail(): string {\n    if (this.user instanceof Admin) {\n      return this.user.getEmail();\n    }\n    return \"\";\n  }\n\n  /**\n   * Löscht den Datensatz mit der übergebenen Datensatz ID\n   * @param dataSetID die Datensatz ID\n   * @returns true, wenn das löschen erfolgreich ist\n   */\n  async deleteDataSet(dataSetID: number): Promise<boolean> {\n    if (this.user != null) {\n      let projectID: number = this.user.deleteDataSet(dataSetID);\n      if (projectID >= 0) {\n        let adminEmail: string = this.getAdminEmail();\n        let userID = this.user.getID();\n        return this.dbCon.deleteDataSet({ userID, adminEmail, projectID, dataSetID });\n      }\n    }\n    return false;\n  }\n\n\n  //wann Device erstellen ??? + constructor in User anpassen mit neuem Device parameter \n  async registerAdmin(adminName: string, adminEmail: string, password: string): Promise<boolean> {\n    //TODO\n    let device: { deviceID?: number, deviceName: string, deviceType: string, firmware: string, generation: string, MACADRESS: string, sensorInformation: { sensorTypeID: number, sensorName: string, sensorUniqueID: number; }[]; } = { deviceID: -1, deviceName: \"\", deviceType: \"\", firmware: \"\", generation: \"\", MACADRESS: \"\", sensorInformation: [] };\n    let IDs: { adminID: number, device: { deviceID: number, sensorID: number[]; }; } = await this.dbCon.registerAdmin({ adminName, adminEmail, password, device });\n    if (IDs.adminID >= 0) {\n      this.user = new Admin(IDs.adminID, IDs.device.deviceID, adminName, adminEmail);\n      return true;\n    }\n    return false;\n  }\n\n  async registerDataminer(dataminerName: string, sessionID: number): Promise<boolean> {\n    //TODO\n    let device: { deviceID?: number, deviceName: string, deviceType: string, firmware: string, generation: string, MACADRESS: string, sensorInformation: { sensorTypeID: number, sensorName: string, sensorUniqueID: number; }[]; } = { deviceID: -1, deviceName: \"\", deviceType: \"\", firmware: \"\", generation: \"\", MACADRESS: \"\", sensorInformation: [] };\n    let dataminer: { dataminerID: number, device: { deviceID: number, sensorID: number[]; }, project: { projectID: number, projectName: string, sessionID: number; }; } = await this.dbCon.registerDataminer({ dataminerName, sessionID, device });\n    if (dataminer.dataminerID >= 0 && dataminer.device.deviceID >= 0) {\n      this.user = new Dataminer(dataminer.dataminerID, dataminer.device.deviceID, dataminerName);\n      this.user.loadProject(dataminer.project);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * \n   * @param aiModelUserName \n   */\n  async registerAIModelUser(aiModelUserName: string, modelID: number): Promise<boolean> {\n    //TODO\n    let device: { deviceID?: number, deviceName: string, deviceType: string, firmware: string, generation: string, MACADRESS: string, sensorInformation: { sensorTypeID: number, sensorName: string, sensorUniqueID: number; }[]; } = { deviceID: -1, deviceName: \"\", deviceType: \"\", firmware: \"\", generation: \"\", MACADRESS: \"\", sensorInformation: [] };\n    let aiModelUser: { aiModelUserID: number, device: { deviceID: number, sensorID: number[]; }, project: { projectID: number, projectName: string, sessionID: -1; }; } = await this.dbCon.registerAIModelUser({ aiModelUserName, modelID, device });\n    if (aiModelUser.aiModelUserID >= 0 && aiModelUser.device.deviceID >= 0) {\n      this.user = new AIModelUser(aiModelUser.aiModelUserID, aiModelUser.device.deviceID, aiModelUserName);\n      this.user.loadProject(aiModelUser.project);\n      return true;\n    }\n    return false;\n  }\n\n  async loginAdmin(adminEmail: string, password: string): Promise<boolean> {\n    if (this.user == null) {\n      let adminData: { admin: { adminID: number, deviceID: number, adminName: string, email: string, device: { deviceID?: number, deviceName: string, deviceType: string, firmware: string, generation: string, MACADRESS: string, sensorInformation: { sensorTypeID: number, sensorName: string, sensorUniqueID: number; }[]; }; }; } = await this.dbCon.loginAdmin({ adminEmail, password });\n      if (adminData.admin != null && adminData.admin.adminID != -1) {\n        let admin = adminData.admin;\n        this.user = new Admin(admin.adminID, admin.deviceID, admin.adminName, admin.email, admin.device);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /* eventuell implementieren\n    logoutAdmin(): boolean {\n      if (this.user != null) {\n        let logout = this.dbCon.logoutAdmin(this.getAdminEmail());\n        if (logout) {\n          delete this.user;\n        } else {\n          return false;\n        }\n      }\n      return true;\n    }\n    */\n\n  async createProject(projectName: string): Promise<boolean> {\n    if (this.user instanceof Admin) {\n      let userID = this.user.getID();\n      let adminEmail = this.getAdminEmail();\n      let project: { projectID: number, sessionID: number; } = await this.dbCon.createProject({ userID, adminEmail, projectName });\n      return this.user.createProject(project.projectID, project.sessionID, projectName);\n    }\n    return false;\n  }\n\n  async createLabel(span: { start: number, end: number; }, labelName: string): Promise<number> {\n    if (this.user != null) {\n      let sessionID: number = this.getSessionID();\n      let userID: number = this.user.getID();\n      let datasetID: number = this.user.getCurrentDataSetID();\n      let labelID: number = await this.dbCon.createLabel({ sessionID, userID, datasetID, label: { span, labelName } });\n      if (labelID >= 0) {\n        let created: boolean = this.user.createLabel(labelID, span, labelName);\n        if (created) {\n          return labelID;\n        }\n      }\n    }\n    return -1;\n  }\n\n  async setLabel(labelID: number, span: { start: number, end: number; }, labelName?: string): Promise<boolean> {\n    if (this.user != null) {\n      let setted: boolean = this.user.setLabel(labelID, span, labelName);\n      if (setted) {\n        let sessionID: number = this.getSessionID();\n        let userID: number = this.user.getID();\n        let datasetID: number = this.user.getCurrentDataSetID();\n        return this.dbCon.setLabel({ sessionID, userID, datasetID, label: { labelID, span, labelName } });\n      }\n    }\n    return false;\n  }\n\n  async deleteLabel(labelID: number): Promise<boolean> {\n    if (this.user != null) {\n      let deleted: boolean = this.user.deleteLabel(labelID);\n      if (deleted) {\n        let sessionID: number = this.getSessionID();\n        let userID: number = this.user.getID();\n        let datasetID: number = this.user.getCurrentDataSetID();\n        return this.dbCon.deleteLabel({ sessionID, userID, datasetID, labelID });\n      }\n    }\n    return false;\n  }\n\n\n  getLabels(): { labels?: { name: string, id: number, start: number, end: number; }[]; } {\n    if (this.user != null) {\n      return this.user.getLabels();\n    }\n    return {};\n  }\n\n  classify(aiId: number, dataSetId: number, callBack: <R = unknown>(prediction: string | object) => R): void {\n    let aiBuilder = new AIBuilder(aiId)\n    aiBuilder.classify(dataSetId, callBack)\n  };\n\n  getAIModel(id: number, format: DeliveryFormat): object {\n    throw new Error(\"Not implemented\");\n  }\n\n  applyModel(trainingParameter: { sensors: number[], dataSets: number[], classifier: string, scaler: string, features: string[], trainingDataPercentage?: number, slidingWindowSize?: number, slidingWindowStep?: number;}): void {\n    let aiBuilder = new AIBuilder(-1)\n    aiBuilder.applyModel(trainingParameter)\n  }\n\n}\n\n\n//AIModelUser läd da sofort das Model?\n// wird aktuell nicht benutzt\n// checkLogin(): boolean { }\n","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/controller/DeliveryController.tsx",["326","327"],"import { PageController } from \"./PageController\";\nimport { MainController } from \"./MainController\";\nimport { Page } from \"../view/pages/PageInterface\";\nimport { IState, States } from \"../view/pages/State\";\nimport { DeliveryPage } from \"../view/pages/DeliveryPage/index\";\n\nexport class DeliveryController implements PageController {\n\n    private page: Page;\n    private state: IState;\n\n    /**\n    * Konstruktor des Seitenverwalters. Registriert sich als Beobachter auf seiner Seite und setzt den start Status.\n    * @param currentProject Die momentanen Projectdaten für welches man ein Model ausliefern möchte. \n    */\n    constructor(currentProject: { projectID: number, projectName: string, choosenAIModelID: number; }) {\n        this.page = new DeliveryPage({});\n        this.page.attach(this);\n        this.state = this.page.getState()\n        this.state.currentProject = currentProject\n        this.page.setState(this.state)\n    }\n\n    /**\n    * Die Update Methode des Seitenverwalters.\n    */\n    update() {\n        this.state = this.page.getState();\n        switch (this.state.currentState) {\n            case States.DeliverWeb:\n                this.deliverAsWebApp();\n                break;\n            case States.NeedMessage:\n                this.page.setState(MainController.getInstance().getMessage(this.state.messages));\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n    * Holt sich aus dem Status alle angegebene Email-Adressen und gibt diese mit Daten zum Projekt an die Fassade welche eine Email an alle Adressen sendet.\n    * Der Inhalt der Email gibt zugriff auf das Modell zur klassifizierung.\n    */\n    deliverAsWebApp() {\n        //let emails: string[] = this.state.currentMail;\n        let emails: string[] = [\"Darius.Seiter@outlook.com\"]\n        //let text: string = MainController.getInstance().getFacade().getDeliverText();\n        let text: string = \"TEST\"\n        for (let index = 0; index < emails.length; index++) {\n            const element: string = emails[index];\n            //MainController.getInstance().getFacade().sendMail(element, this.state.currentProject);\n        }\n    }\n\n    deliverAsExe() {\n        //todo in Quality Controll\n    }\n}","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/controller/VisualizationController.tsx",["328"],"import { PageController } from \"./PageController\";\nimport { VisualizationPage } from \"../view/pages/VisualizationPage/index\";\nimport { MainController } from \"./MainController\";\nimport { ModelCreationController } from \"./ModelCreationController\";\nimport { Page } from \"../view/pages/PageInterface\";\nimport { IState, States } from \"../view/pages/State\";\nimport { State } from \"../view/pages/DeliveryPage/State\";\n\nexport class VisualizationController implements PageController {\n    private page: Page;\n    private state: IState;\n\n    /**\n     * Konstruktor des Seitenverwalters. Registriert sich als Beobachter auf seiner Seite und setzt den start Status.\n     * Dieser Seitenverwalter benötigt einen SensorManager, welcher schon initilisiert wurde. \n     */\n    constructor(currentProjekt: { projectID: number, projectName: string, choosenAIModelID: number; }) {\n        this.page = new VisualizationPage({});\n        this.page.attach(this);\n        this.state = this.page.getState()\n        this.state.currentProject = currentProjekt\n        this.page.setState(this.state)\n    }\n\n    /**\n     * Die Update Methode des Seitenverwalters.\n     */\n    update() {\n        this.state = this.page.getState();\n        switch (this.state.currentState) {\n            case States.NeedMessage:\n                this.page.setState(MainController.getInstance().getMessage(this.state.messages));\n                break;\n            case States.ChangeToCreation:\n                MainController.getInstance().changeTo(new ModelCreationController())\n                break;\n            case States.ChangeLabel:\n                this.changeDataLabel();\n                break;\n            case States.NewLabel:\n                this.newDataLabel();\n                break;\n            case States.DeleteDataLabel:\n                this.deleteDataLabel();\n                break;\n            default:\n                break;\n        }\n    }\n\n    SetDataRows() {\n        let data = [this.state.dataSets!]//MainController.getInstance().getFacade().getMinerData();\n        for (let index = 0; index < data.length; index++) {\n            this.state.dataSets! = data[index];\n            this.state.currentState = States.SetDataRows\n            this.page.setState(this.state)\n        }\n    }\n\n    alertConnectionError() {\n        this.state.currentState = States.LoadError\n        this.page.setState(this.state)\n    }\n\n    /**\n     * Ändert die Einstellungen eines DatenLabels gemäß den Änderungen aus der momentanen Seite.\n     */\n    private changeDataLabel() {\n        let label = this.state.currentLabel!\n        MainController.getInstance().getFacade().setLabel(label.labelID, {start: label.start, end: label.end}, label.name);\n    }\n\n    /**\n     * Erstellt ein neues Datenlabel. Dafür werden die neuen Daten des Labels aus der momentanene Seite an das\n     * Modell geleitet. Die ID des neuen Labels wird darauf an die momentane Seite übergeben.\n     */\n    private newDataLabel() {\n        let label = this.state.currentLabel!\n        //label.labelID = MainController.getInstance().getFacade().creatLabel(label.start, label.end);\n        this.state.currentLabel! = label\n    }\n\n    /**\n     * Löscht das Label welches gemäß der Methode getDeleteLabelID von der momentanen Seite angegeben wurde.\n     */\n    private deleteDataLabel() {\n        //MainController.getInstance().getFacade().deleteLabel(this.state.currentLabel!.labelID);\n    }\n}","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/model/Language.tsx",[],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/model/DatabaseConnector.tsx",[],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/model/User.tsx",[],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/model/Sensor.tsx",[],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/model/AIBuilder.tsx",["329","330","331"],"import { findAllByPlaceholderText } from \"@testing-library/react\";\n\n/**\n * Diese Klasse verwaltet die Interaktion mit dem Python-Backend und die zugehörige Kommunikation.\n * Sie ist verantwortlich für den Bau von KI-Modellen und für die Ausführung derselben.\n */\nexport class AIBuilder {\n    private modelId: number;\n    private static readonly url: string = \"python/\";\n    private static readonly buildModel: string = \"buildModel.php\";\n    private static readonly classify: string = \"classify.php\";\n\n    /**\n     * Erstellt den AIBuilder und übergibt ihm die ID des zu bearbeitenden Modells.\n     * @param modelId Die ID des zu erstellenden oder zu verwendenden Modells\n     */\n    constructor(modelId: number) {\n        this.modelId = modelId;\n    }\n\n    /**\n     * Ruft die Python-Schnittstelle auf dem Server auf, um ein KI-Modell zu erstellen und zu trainieren.\n     * @param modelData Sämtliche relevanten Daten, um das gewünschte KI-Modell erstellen zu können.\n     * Diese müssen das folgende Format haben, wenn zu JSON gepackt:\n     * ```\n     * {\n     *     \"sensors\": [\n     *         \"sensorname#i\"\n     *     ],\n     *     \"dataSets\": [\n     *         42\n     *     ],\n     *     \"classifier\": \"Classifier\",\n     *     \"scaler\": \"Scaler\",\n     *     \"features\": [\n     *         \"featurename#13\"\n     *     ],\n     *     \"trainingDataPercentage\": 0.8, // optional\n     *     \"slidingWindowSize\": 128,      // optional\n     *     \"slidingWindowStep\": 64        // optional\n     * }\n     * ```\n     * Die Reihenfolge ist unwichtig.\n     */\n    applyModel(modelData: { sensors: number[], dataSets: number[], classifier: string, scaler: string, features: string[], trainingDataPercentage?: number, slidingWindowSize?: number, slidingWindowStep?: number;}): void {\n        this.sendRequest(JSON.stringify(modelData), AIBuilder.url + AIBuilder.buildModel, console.log);\n    }\n\n    /**\n     * Diese Methode ruft die Python-Schnittstelle auf dem Server auf, um ein KI-Modell einen Datensatz klassifizieren zu lassen.\n     * @param dataSetId Die ID des Datensatzes, den das KI-Modell klassifizieren soll.\n     * @param callBack Eine Rückmelde-Funktion des \"aufrufenden\" Controllers, mit der das Ergebnis der Klassifizierung an den Controller zurückgegeben wird.\n     */\n    classify(dataSetId: number, callBack: <R = unknown>(prediction: string | object) => R): void {\n        let requestData: string = JSON.stringify({ \"classifier\": this.modelId, \"dataSet\": dataSetId });\n        this.sendRequest(requestData, AIBuilder.url + AIBuilder.classify, callBack);\n    }\n\n    /**\n     * Diese private Methode fässt den Versandprozess der Subanfrage an den Anwendungsserver zusammen.\n     * @param requestData Die mit der Anfrage zu versendenden Daten. Hat gültiges JSON zu sein, außer plainText ist gesetzt.\n     * @param url Die Adresse, an die die Anfrage gestellt wird. Am besten was auf demselben Server, ansonsten bekommt der Browser nen Kasper.\n     * @param successAction Eine Funktion, die bei erfolgreicher Durchführung der Anfrage auszuführen ist.\n     * @param plainText Gibt an, dass die Daten als Plaintext zu versenden sind.\n     */\n    private sendRequest(requestData: string, url: string, successAction: <R = unknown>(param: string | object) => R, plainText: boolean = false) {\n        let xhr = new XMLHttpRequest(); // XHR ist kurz für XmlHttpRequest\n        xhr.open(\"POST\", url, true);\n        xhr.onreadystatechange = () => {\n            if (xhr.readyState == 4) {\n                if (xhr.status == 200) {\n                    var responseJSON: object | null;\n                    try {\n                        responseJSON = JSON.parse(xhr.responseText);\n                    }\n                    catch (e) {\n                        responseJSON = null;\n                    }\n                    if (responseJSON == null) {\n                        successAction(xhr.responseText);\n                    }\n                    else {\n                        successAction(responseJSON);\n                    }\n                }\n                else {\n                    xhr.send(requestData);\n                }\n            }\n        };\n        if (!plainText) {\n            xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n        }\n        xhr.send(requestData);\n    }\n}\n","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/pages/FinishPage/index.tsx",["332","333"],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/controller/ModelCreationController.tsx",[],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/pages/DeliveryPage/index.tsx",["334","335","336","337"],"import React, { Component } from 'react';\nimport DownloadButton from '../../components/DeliveryComponents/DownloadButton';\nimport EmailList from '../../components/DeliveryComponents/EmailList';\nimport { Page } from \"../PageInterface\";\nimport { PageController } from \"../../../controller/PageController\";\nimport { State } from \"./State\";\nimport ReactDOM from 'react-dom';\nimport { States } from '../State';\n\ntype Props = {\n};\n\nexport class DeliveryPage extends React.Component<Props, State> implements Page {\n\n\tstate = new State();\n\tobservers: PageController[] = [];\n\tconstructor(props: Props) {\n\t\tsuper(props);\n\t\tthis.delivery()\n\t\tthis.download()\n\t\tconst VDOM = (\n\t\t\t<div className=\"deliverypage\">\n\t\t\t\t<EmailList />\n\t\t\t\t<DownloadButton />\n\t\t\t</div>\n\t\t);\n\t\tReactDOM.render(VDOM, document.getElementById('root'));\n\t}\n\n\tattach(observer: PageController) {\n\t\tthis.observers.push(observer);\n\t}\n\n\tdetach(observer: PageController) {\n\t\tconst index = this.observers.indexOf(observer, 0);\n\t\tif (index > -1) {\n\t\t\tthis.observers.splice(index, 1);\n\t\t}\n\t}\n\n\tnotify() {\n\t\tfor (let index = 0; index < this.observers.length; index++) {\n\t\t\tconst element = this.observers[index];\n\t\t\telement.update();\n\t\t}\n\t}\n\n\tgetState() {\n\t\treturn this.state;\n\t}\n\n\tdelivery() {\n\t\tPubSub.subscribe('delivery', (_msg: any, data: string[]) => {\n\t\t\tthis.state.currentState = States.DeliverWeb\n\t\t\tthis.state.chosenEmails = data\n\t\t\tthis.notify()\n\t\t})\n\t}\n\n\tdownload() {\n\t\tPubSub.subscribe('download', (_msg: any) => {\n\t\t\tthis.state.currentState = States.NeedDownload\n\t\t\tthis.notify()\n\t\t})\n\t}\n\n\n}\n","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/pages/VisualizationPage/index.tsx",["338","339","340","341","342","343"],"import React, { Component } from 'react'\nimport PubSub from 'pubsub-js';\nimport ImageList from '../../components/VisualizationComponents/ImageList'\nimport eximage1 from '../../images/exImage1.svg'\nimport './VisualizationPage.css'\nimport { Page } from \"../PageInterface\";\nimport { PageController } from \"../../../controller/PageController\";\nimport { State } from \"./State\";\nimport { MainController } from '../../../controller/MainController';\nimport ReactDOM from 'react-dom';\nimport ShowImage from '../../components/VisualizationComponents/ShowImage';\nimport { States } from '../State';\nimport FinishButton from '../../components/VisualizationComponents/FinishButton';\n\ntype Props = {\n};\n\nexport class VisualizationPage extends React.Component<Props, State> implements Page {\n    state = new State()\n    observers: PageController[] = [];\n    constructor(props: Props) {\n        super(props);\n        this.getimagelist()\n        this.changeimg()\n        this.changetonextpage()\n        const VDOM = (\n            <div className=\"visualizationpage\">\n                <ShowImage />\n                <ImageList />\n                <FinishButton />\n            </div>\n        );\n        ReactDOM.render(VDOM, document.getElementById('root'));\n    }\n\n\n    attach(observer: PageController) {\n        this.observers.push(observer);\n    }\n\n    detach(observer: PageController) {\n        const index = this.observers.indexOf(observer, 0);\n        if (index > -1) {\n            this.observers.splice(index, 1);\n        }\n    }\n\n    notify() {\n        for (let index = 0; index < this.observers.length; index++) {\n            const element = this.observers[index];\n            element.update();\n        }\n    }\n\n    getState() {\n        return this.state;\n    }\n\n    getimagelist() {\n        this.state.currentState = States.NeedImageList\n        this.notify()\n        PubSub.publish('getimagelist', this.state.imageList)\n    }\n    changeimg() {\n        PubSub.subscribe('changeimg', (_msg: any, data: string) => {\n            this.state.currentImg = data\n            //console.log(this.state.currentImg)\n        })\n    }\n    changetonextpage() {\n        PubSub.subscribe('changepage', (_msg: any) => {\n            this.state.currentState = States.ChangeToCreation\n            this.notify()\n\n        })\n    }\n}\n","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/model/Device.tsx",[],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/model/Project.tsx",["344"],"import { AIModel } from \"./AIModel\";\nimport { DataSet } from \"./DataSet\";\nimport { SensorData } from \"./Sensor\";\nimport { Session } from \"./Session\";\nimport { Admin } from \"./User\";\n\n/**\n * Diese Klasse speichert alle Informationen zu einem Projekt.\n * Ein Projekt beinhaltet aufgezeichnete Datensätze (DataSet) sowie Informationen zu den Datensätzen.\n */\nexport class Project {\n  private id: number; //Die eindeutige Projekt ID\n  private name: string; //Der Name des Projektes\n  private session: Session; //Die Session in dem das Projekt arbeitet\n  private aiModel: AIModel[] = []; //Das AIModel von dem Projekt\n  private dataSet: DataSet[] = []; //Die Datensätze, die zu dem Projekt gehören\n  private currentDataSet?: DataSet; //Aktueller Datensatz\n\n  /**\n     * Eine bereits existierendes Projekt kann wie folgt in das Model geladen werden.\n     * @param projectID Die Projekt ID\n     * @param sessionID Die Session ID\n     * @param projectName Der Projektnamen\n     * @param admin Der Besitzer dieses Projekts für die Session\n     * @param aiModelID Die schon existierenden AIModel IDs\n     * @param dataSet Die schon existierenden Datensätze\n     */\n  constructor(projectID: number, sessionID: number, projectName: string, projectData?: {\n    aiModelID?: number[],\n    dataSet?: {\n      dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate: number,\n      dataRows: {\n        dataRowID: number, recordingStart: number,\n        dataRow: { value: number, relativeTime: number; }[];\n      }[],\n      label: { name: string, labelID: number, start: number, end: number; }[];\n    }[];\n  }) {\n    this.id = projectID;\n    this.name = projectName;\n    this.session = new Session(sessionID);\n    if (projectData != null) {\n      if (projectData.aiModelID != null) {\n        for (let i = 0; i < projectData.aiModelID.length; i++) {\n          this.aiModel.push(new AIModel(projectData.aiModelID[i]));\n        }\n      }\n      if (projectData.dataSet != null) {\n        for (let i = 0; i < projectData.dataSet.length; i++) {\n          this.dataSet.push(new DataSet(projectData.dataSet[i].dataRowSensors, projectData.dataSet[i].dataSetID, projectData.dataSet[i].dataSetName, projectData.dataSet[i].generateDate, projectData.dataSet[i].dataRows, projectData.dataSet[i].label));\n        }\n      }\n    }\n\n  }\n\n  /**\n   * Gibt den Projektnamen zurück\n   */\n  getName(): string {\n    return this.name;\n  }\n\n  /**\n   * Löscht den Datensatz mit der DatensatzID\n   * @param dataSetID die Datensatz ID\n   */\n  deleteDataSet(dataSetID: number): boolean {\n    for (let i = 0; i < this.dataSet.length; i++) {\n      if (this.dataSet[i].getID() === dataSetID) {\n        delete this.dataSet[i];\n        if (this.currentDataSet != null && this.currentDataSet.getID() === dataSetID) {\n          delete this.currentDataSet;\n        }\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Gibt die Projekt ID zurück.\n   */\n  getID(): number {\n    return this.id;\n  }\n\n\n  /**\n   * Erstellt einen neuen Datensatz und setzt diesen als aktuellen Datensatz.\n   * @param dataRowSensors die Sensoren, von denen die Daten ausgelesen werden\n   * @param dataSetID die eindeutige Datensatz ID\n   * @param dataSetName der Datensatznamen\n   * @param generateDate die Erstellungszeit von dem Datensatz\n   */\n  createDataSet(dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate?: number): void {\n    var dataSet: DataSet = new DataSet(dataRowSensors, dataSetID, dataSetName, generateDate);\n    this.dataSet.push(dataSet);\n    this.currentDataSet = dataSet;\n  }\n\n  /**\n   * Gibt die aktuelle Datensatz ID zurück, falls diese nicht existiert wird -1 zurück gegeben\n   */\n  getCurrentDataSetID(): number {\n    if (this.currentDataSet != null) {\n      return this.currentDataSet.getID();\n    }\n    return -1;\n\n  }\n\n  /**\n   * Liest von dem aktuellen Datensatz neue Sensordaten von der Datenreihe mit der Datenreihen ID\n   * @param dataRowID die Datenreihen ID, von der die Daten ausgelesen werden sollen.\n   * @returns die gelesenen Daten von der Datenreihe. Falls die Datenreihe nicht existiert oder kein aktueller Datensatz existiert, sind die Daten leer.\n   */\n  readDataPoint(dataRowID: number): { dataPoint?: { value: number, relativeTime: number; }; } {\n    if (this.currentDataSet != null) {\n      return this.currentDataSet.readDataPoint(dataRowID);\n    }\n    return {};\n  }\n\n  /**\n   * Gibt von allen Datensätzen Informationen zurück\n   * @returns dataSetID ist die DatensatzID und dataSetName ist der Datensatzname\n   */\n  getDataSetMetas(): { dataSetID: number, dataSetName: string; }[] {\n    var dataSetMetas: { dataSetID: number, dataSetName: string; }[] = [];\n    for (let i = 0; i < this.dataSet.length; i++) {\n      dataSetMetas.push({ dataSetID: this.dataSet[i].getID(), dataSetName: this.dataSet[i].getName() });\n    }\n    return dataSetMetas;\n  }\n\n  /**\n   * Gibt die Datenreihen der Datensatz ID zurück und setzt diesen Datensatz als aktuellen Datensatz\n   * @param dataSetID die Datensatz ID von der die Datenreihen gelesen werden sollen\n   * @returns die Sensordaten von der Datenreihe\n   */\n  getDataRows(dataSetID: number): { dataRows?: { value: number, relativeTime: number; }[][]; } {\n    for (let i = 0; i < this.dataSet.length; i++) {\n      if (this.dataSet[i].getID() === dataSetID) {\n        this.currentDataSet = this.dataSet[i];\n        return { dataRows: this.dataSet[i].getDataRows() };\n      }\n    }\n    return {};\n  }\n\n  /**\n   * Gibt die Datenreihen der aktuellen Datenreihe zurück\n   * @returns die Sensordaten von der Datenreihe\n   */\n  getCurrentDataRows(): { dataRows?: { value: number, relativeTime: number; }[][]; } {\n    if (this.currentDataSet != null) {\n      return { dataRows: this.currentDataSet.getDataRows() };\n    }\n    return {};\n  }\n\n  /**\n   * Gibt die Session ID zurück\n   */\n  getSessionID(): number {\n    return this.session.getId();\n  }\n\n  /**\n   * Setzt dem Label mit der übergebenen ID neue Werte.\n   * @param start Ist die neue Startzeit des Labels.\n   * @param end Ist die neue Endzeit des Labels.\n   * @param labelID Die Label ID, welche überarbeitet werden soll.\n   * @param labelName Ist bei Angabe der neue Name des Labels.\n   * @returns falls das Label nicht existiert oder es kein aktuellen Datensatz gibt wird false zurück gegeben\n   */\n  createLabel(labelID: number, span: { start: number, end: number; }, labelName: string): boolean {\n    if (this.currentDataSet != null) {\n      return this.currentDataSet.setLabel(labelID, span, labelName);\n    }\n    return false;\n  }\n\n  setLabel(labelID: number, span: { start: number, end: number; }, labelName?: string): boolean {\n    if (this.currentDataSet != null) {\n      return this.currentDataSet.setLabel(labelID, span, labelName);\n    }\n    return false;\n  }\n\n  deleteLabel(labelID: number): boolean {\n    if (this.currentDataSet != null) {\n      return this.currentDataSet.deleteLabel(labelID);\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Gibt alle Daten von allen Labeln vom aktuellen Datensatz zurück.\n   * @returns leer, falls kein aktueller Datensatz existiert\n   */\n  getLabels(): { labels?: { name: string, id: number, start: number, end: number; }[]; } {\n    if (this.currentDataSet != null) {\n      return { labels: this.currentDataSet.getLabels() };\n    }\n    return {};\n  }\n}","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/pages/FinishPage/State.tsx",["345"],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/pages/DeliveryPage/State.tsx",[],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/pages/VisualizationPage/State.tsx",[],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/pages/ModelCreationPage/index.tsx",["346"],"import React, { Component } from 'react'\nimport DatasetList from '../../components/ModelCreationComponents/DatasetList'\nimport AddDatasetButton from '../../components/ModelCreationComponents/AddDatasetButton'\nimport ImputationList from '../../components/ModelCreationComponents/ImputationList'\nimport NormalizationList from '../../components/ModelCreationComponents/NormalizationList'\nimport FeatureList from '../../components/ModelCreationComponents/FeatureList'\nimport ModelTypeList from '../../components/ModelCreationComponents/ModelTypeList'\nimport TrainButton from '../../components/ModelCreationComponents/TrainButton'\nimport { Page } from \"../PageInterface\";\nimport { PageController } from \"../../../controller/PageController\";\nimport { State } from \"./State\";\nimport ReactDOM from 'react-dom';\nimport './ModelCreationPage.css'\n\ntype Props = {\n};\n\n\nexport class ModelCreationPage extends React.Component<Props, State> implements Page {\n\tstate = new State();\n\tobservers: PageController[] = [];\n\tconstructor(props: Props) {\n\t\tsuper(props);\n\t\tconst VDOM = (\n\t\t\t<div className=\"modelcreationpage\">\n\t\t\t\t<div className=\"checklist\">\n\t\t\t\t\t<h3>Datasets</h3>\n\t\t\t\t\t<DatasetList datasets={this.state.datasets} updateDataset={this.updateDataset} deleteDataset={this.deleteDataset} />\n\t\t\t\t\t<AddDatasetButton datasets={this.state.datasets} addDataset={this.addDataset} deleteDataset={this.deleteDataset} />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"checklist\"><ImputationList /><NormalizationList /></div>\n\t\t\t\t<div className=\"checklist\"><FeatureList /><ModelTypeList /></div>\n\t\t\t\t<TrainButton />\n\t\t\t</div>\n\t\t);\n\t\tReactDOM.render(VDOM, document.getElementById('root'));\n\t}\n\n\tattach(observer: PageController) {\n\t\tthis.observers.push(observer);\n\t}\n\n\tdetach(observer: PageController) {\n\t\tconst index = this.observers.indexOf(observer, 0);\n\t\tif (index > -1) {\n\t\t\tthis.observers.splice(index, 1);\n\t\t}\n\t}\n\n\tnotify() {\n\t\tfor (let index = 0; index < this.observers.length; index++) {\n\t\t\tconst element = this.observers[index];\n\t\t\telement.update();\n\t\t}\n\t}\n\n\tgetState() {\n\t\treturn this.state;\n\t}\n\n\t//addDataset for add new Dataset\n\taddDataset = (datasetObj: { id: string, name: string, chosen: boolean }) => {\n\t\t//get orignal datasetList\n\t\tconst { datasets } = this.state\n\t\t//add new one\n\t\tconst newDatasets = [datasetObj, ...datasets]\n\t\t//update datasetList\n\t\tthis.setState({ datasets: newDatasets })\n\t}\n\n\t//updateDataset for update DatasetList\n\tupdateDataset = (id: string, chosen: boolean) => {\n\t\t//get orignal DatasetList\n\t\tconst { datasets } = this.state\n\t\t//compare id\n\t\tconst newDatasets = datasets.map((datasetObj) => {\n\t\t\tif (datasetObj.id === id) return { ...datasetObj, chosen }\n\t\t\telse return datasetObj\n\t\t})\n\t\tthis.setState({ datasets: newDatasets })\n\t}\n\n\t//deleteDataset for delete datasetObj\n\tdeleteDataset = (id: string) => {\n\t\t//get orignal datasetList\n\t\tconst { datasets } = this.state\n\t\t//delete datasetObj with id\n\t\tconst newDatasets = datasets.filter((datasetObj) => {\n\t\t\treturn datasetObj.id !== id\n\t\t})\n\t\t//update datasetList\n\t\tthis.setState({ datasets: newDatasets })\n\t}\n\n}\n","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/model/AIModel.tsx",[],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/model/DataSet.tsx",[],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/model/Session.tsx",["347"],"import { Admin, User } from \"./User\";\n\n/**\n * Diese Klasse Speichert die Session informationen\n */\nexport class Session {\n  private id: number; //Die eindeutige ID der Session\n  private connectedUser: User[] = []; //Die User die mit der Projekt der Session interagieren\n\n  /**\n   * Erstellt eine Session\n   * @param id Diese ID muss global eindeutig sein\n   * @param admin Der Admin, dem diese Session gehört\n   */\n  constructor(id: number) {\n    this.id = id;\n  }\n\n  /**\n   * Fügt eine User als Verbundener User zu der Session hinzu\n   * @param user Der User, der hinzugefügt wird\n   */\n  connectUser(user: User): void {\n    this.connectedUser.push(user);\n  }\n\n  /**\n   * Meldet einen User von der aktuellen Session ab\n   * @param user Der User, der abgemeldet werdern soll\n   */\n  disconnectUser(user: User): boolean {\n    for (let i = 0; i < this.connectedUser.length; i++) {\n      if (this.connectedUser[i].getID() === user.getID()) {\n        delete this.connectedUser[i];\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Gibt von allen verbundenen Usern die ID und den Namen zurück\n   */\n  getConnectedUsers(): { userID: number, userName: string; }[] {\n    var users: { userID: number, userName: string; }[] = [];\n    for (let i = 0; i < this.connectedUser.length; i++) {\n      users.push({ userID: this.connectedUser[i].getID(), userName: this.connectedUser[i].getName() });\n    }\n    return users;\n  }\n\n  /**\n   * Gibt die Session ID zurück\n   */\n  getId(): number {\n    return this.id;\n  }\n}","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/FinishComponents/Body/index.tsx",[],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/FinishComponents/Title/index.tsx",[],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/FinishComponents/Input/Labelling/index.tsx",[],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/pages/ModelCreationPage/State.tsx",["348"],"export class State {\n  currentState: States = States.NeedMessage;\n  languageCode: string = \"de\";\n  messageIDs: number[] = [];\n  messages: string[] = [];\n  datasets: { id: string, name: string, chosen: boolean }[] = [];\n  features: { name: string, chosen: boolean }[] = [];\n  imputations: { name: string, chosen: boolean }[] = [];\n  modeltypes: { name: string, chosen: boolean }[] = [];\n  normalizations: { name: string, chosen: boolean }[] = [];\n\n}\n\n\nexport enum States {\n  NeedMessage,\n  NeedData,\n  GotData,\n  ChangePage,\n  NeedParameter,\n  StartTrain\n}\n","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/DeliveryComponents/DownloadButton/index.tsx",[],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/VisualizationComponents/ImageList/index.tsx",[],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/VisualizationComponents/ShowImage/index.tsx",[],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/VisualizationComponents/FinishButton/index.tsx",[],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/DeliveryComponents/EmailList/index.tsx",["349","350","351","352","353","354","355","356"],"import React, { Component } from 'react'\nimport { nanoid } from 'nanoid';\n\nexport default class EmailList extends Component {\n\tstate = {\n\t\tmouse: false,\n\t\taddButtonClick: false,\n\t\tinputempty: true,\n\t\tinputemail: {\n\t\t\tid: '',\n\t\t\taddress: '',\n\t\t\tchosen: false\n\t\t},\n\t\temails: [{\n\t\t\tid: 'example',\n\t\t\taddress: 'xxxxx@xxx.xx(Beispiel, nach erstmal Addieren automatisch gelöscht)',\n\t\t\tchosen: false\n\t\t}]\n\t}\n\n\thandleCreate = () => {\n\t\tthis.setState({ addButtonClick: true });\n\t};\n\n\tinputchange = (e: React.ChangeEvent<HTMLInputElement>) => {\n\t\tif (e.target.value == '') {\n\t\t\tthis.setState({ inputempty: true })\n\t\t} else {\n\t\t\tthis.setState({ inputemail: { id: nanoid(), address: e.target.value, chosen: false }, inputempty: false })\n\t\t}\n\n\t}\n\thandleKeyUp = (e: React.KeyboardEvent<HTMLInputElement>) => {\n\t\tthis.deleteEmail('example')\n\t\tconst { keyCode } = e;\n\t\t//check ENTER-key\n\t\tif (keyCode !== 13) return;\n\t\t//cant add empty email\n\t\tconst { inputemail, inputempty, emails } = this.state\n\t\tif (inputempty) {\n\t\t\talert('Eingabe darf nicht leer sein!');\n\t\t\treturn;\n\t\t}\n\t\tlet exist = false\n\t\temails.map((emailObj) => {\n\t\t\tif (emailObj.address == inputemail.address) exist = true\n\t\t})\n\t\tif (exist) {\n\t\t\talert('Es gibt schon Emailadresse in List!');\n\t\t\treturn;\n\t\t}\n\t\tvar pattern = /^([A-Za-z0-9_\\-\\.])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z])+$/\n\t\tif (pattern.test(inputemail.address)) {\n\t\t\tthis.addEmail(inputemail);\n\t\t} else {\n\t\t\talert('Sie müssen eine Emailadresse eingeben!');\n\t\t\treturn;\n\t\t}\n\n\t\t//hide inputbox\n\t\tthis.setState({ addButtonClick: false });\n\t};\n\n\t//handle emailItem\n\thandleMouse = (flag: boolean) => {\n\t\treturn () => {\n\t\t\tthis.setState({ mouse: flag });\n\t\t};\n\t};\n\n\thandleCheck = (id: string, chosen: boolean) => {\n\t\tconst { emails } = this.state\n\t\tconst newEmails = emails.map((emailObj) => {\n\t\t\tif (emailObj.id == id) return { ...emailObj, chosen };\n\t\t\telse return emailObj;\n\t\t})\n\t\tthis.setState({ emails: newEmails })\n\t};\n\n\thandleDelete = (id: string) => {\n\t\tif (window.confirm('Sind Sie sicher, die gewählt Emailadresse zu löschen?')) {\n\t\t\tconst { emails } = this.state\n\t\t\tconst newEmails = emails.filter((emailObj) => {\n\t\t\t\treturn emailObj.id !== id;\n\t\t\t});\n\t\t\t//update emailList\n\t\t\tthis.setState({ emails: newEmails })\n\t\t}\n\t};\n\n\t//addEmail for add new Email\n\taddEmail = (emailObj: { id: string, address: string, chosen: boolean }) => {\n\t\t//add new one\n\t\tconst { emails } = this.state\n\t\tconst newEmails = [emailObj, ...emails];\n\t\t//update emailList\n\t\tthis.setState({ emails: newEmails })\n\t};\n\n\t//deleteEmail for delete emailObj\n\tdeleteEmail = (id: string) => {\n\t\t//get orignal emailList\n\t\t//delete emailObj with id\n\t\tconst { emails } = this.state\n\t\tconst newEmails = emails.filter((emailObj) => {\n\t\t\treturn emailObj.id !== id;\n\t\t});\n\t\t//update emailList\n\t\tthis.setState({ emails: newEmails })\n\t};\n\n\t//checkAllEmail for all chosen email\n\tchooseAllEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\n\t\t//get orignal emailList\n\t\tconst chosen = e.target.checked\n\t\tconst { emails } = this.state\n\t\tconst newEmails = emails.map((emailObj) => {\n\t\t\treturn { ...emailObj, chosen };\n\t\t});\n\t\t//update emailList\n\t\tthis.setState({ emails: newEmails })\n\t};\n\n\t//clearAllChosen for delete all emails\n\tclearAllChosen = () => {\n\t\tif (window.confirm('Sind Sie sicher, alle gewähte Emailadressen zu löschen?')) {\n\t\t\t//get orignal emailList\n\t\t\tconst { emails } = this.state;\n\t\t\t//filter datas\n\t\t\tconst newEmails = emails.filter((emailObj) => {\n\t\t\t\treturn !emailObj.chosen;\n\t\t\t});\n\t\t\t//update emailLists\n\t\t\tthis.setState({ emails: newEmails })\n\t\t}\n\t};\n\t//sendmethod\n\tdelivery = () => {\n\t\tconst { emails } = this.state;\n\t\tlet emailaddressList: string[] = []\n\t\temails.map((emailObj) => {\n\t\t\tif (emailObj.chosen) emailaddressList.push(emailObj.address)\n\t\t});\n\t\tconsole.log(emailaddressList)\n\t\tPubSub.publish('delivery', emailaddressList)\n\t}\n\trender() {\n\t\tconst { mouse, emails } = this.state\n\t\tconst chosenCount = emails.reduce((pre, email) => pre + (email.chosen ? 1 : 0), 0)\n\t\t//total amount\n\t\tconst total = emails.length\n\t\treturn (\n\t\t\t<div className=\"email-main\">\n\t\t\t\t<div className=\"addemailbutton\">\n\t\t\t\t\t<button onClick={() => this.handleCreate()} className=\"btn\" >Addieren eine neue Emailadresse!(Addieren Eingaben mit 'Enter'-Taste)</button>\n\t\t\t\t\t{this.state.addButtonClick ?\n\t\t\t\t\t\t<div className=\"inputbox\">\n\t\t\t\t\t\t\t<input onKeyUp={this.handleKeyUp} onChange={this.inputchange} type=\"text\" placeholder=\"input email address with ENTER-key\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t: null}\n\n\t\t\t\t</div>\n\n\t\t\t\t{emails.map(emailObj => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<li style={{ backgroundColor: mouse ? '#ddd' : 'white' }} onMouseEnter={this.handleMouse(true)} onMouseLeave={this.handleMouse(false)}>\n\t\t\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" checked={emailObj.chosen} onChange={(e: React.ChangeEvent<HTMLInputElement>): void => this.handleCheck(emailObj.id, e.target.checked)} />\n\t\t\t\t\t\t\t\t\t<span>{emailObj.address}</span>\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t<button onClick={() => this.handleDelete(emailObj.id)} className=\"btn-item\" style={{ display: mouse ? 'block' : 'none' }}>Löschen</button>\n\t\t\t\t\t\t\t</li></div>\n\t\t\t\t\t)\n\t\t\t\t})}\n\n\t\t\t\t<div className=\"handleallemail\">\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input type=\"checkbox\" onChange={this.chooseAllEmail} checked={chosenCount === total && total !== 0 ? true : false} />\n\t\t\t\t\t</label>\n\t\t\t\t\t<span>\n\t\t\t\t\t\t<span>Gewählt: {chosenCount}</span> / Insegesamt: {total}\n\t\t\t\t\t</span>\n\t\t\t\t\t<button onClick={() => this.clearAllChosen()} className=\"btn-clear\">Löschen alle gewählte Emailadressen!</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"deliverybutton\">\n\t\t\t\t\t<button onClick={() => this.delivery()} className=\"btn\" >Liefern Aus!</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/model/DataRow.tsx",[],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/model/Label.tsx",[],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/ModelCreationComponents/ImputationList/index.tsx",[],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/ModelCreationComponents/ModelTypeList/index.tsx",[],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/ModelCreationComponents/NormalizationList/index.tsx",[],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/ModelCreationComponents/FeatureList/index.tsx",[],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/ModelCreationComponents/TrainButton/index.tsx",[],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/model/TimeSpan.tsx",[],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/model/DataPoint.tsx",[],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/ModelCreationComponents/DatasetList/index.jsx",[],["357","358"],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/ModelCreationComponents/AddDatasetButton/index.jsx",[],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/ModelCreationComponents/DatasetItem/index.jsx",[],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/pages/ReferringPage/index.tsx",["359","360","361","362","363","364","365","366","367","368","369","370","371","372","373"],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/pages/ReferringPage/State.tsx",["374","375","376","377","378","379"],"import { IState } from \"../State\";\nimport { States } from \"../State\";\nimport { QRCode, ErrorCorrectLevel, QRNumber, QRAlphaNum, QR8BitByte, QRKanji } from 'qrcode-generator-ts/js';\n\nexport class State implements IState {\n  currentState: States = States.NeedMessage;\n  languageCode: string = \"de\";\n  messages: { text: string, id: number; }[] = [];\n  projectData?: { projectID: number; projectName: string; AIModelID: number[]; }[];\n  currentProject?: { projectID: number, projectName: string, choosenAIModelID: number; };\n  // chosenModel?: string;\n  adminData?: { name: string, email: string, password: string; };\n  //minerData?:\n  aiUserData?: { name: string, result: string; };\n  labels?: { labelID: number, start: number, end: number; }[];\n  sessionID?: string;\n  //aiParameter?: \n  qr?: string;\n  wait?: Promise<any>\n}\n","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/ReferringComponents/ConstantsText/index.tsx",[],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/ReferringComponents/LoadModelButton/index.tsx",["380","381"],"import React, { Component } from 'react'\nimport ProjectList from '../ProjectList'\n\n\nexport default class LoadModelButton extends Component {\n  state = { click: false, disabled: true, }\n  handleCreate = () => {\n    this.state.click = true\n    this.setState(this.state)\n  }\n\n  componentDidMount() {\n    PubSub.subscribe('disabled', (_msg: any, value: boolean) => {\n      this.state.disabled = false\n      this.setState(this.state)\n  })\n\n  }\n  render() {\n    return (\n      <div>\n        <button onClick={() => this.handleCreate()} className=\"btn\" disabled={this.state.disabled}>Projekt und Model Wählen</button>\n        {this.state.click ? <div><ProjectList /> </div> : null}\n      </div>\n    );\n  }\n}\n","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/ReferringComponents/NewProjectButton/index.tsx",["382","383"],"import React, { Component } from 'react';\nimport QRImage from '../QRImage';\nimport LinkText from '../LinkText';\nimport ChangeToVisuBtn from '../ChangeToVisuBtn';\nimport { useState } from 'react';\n\nexport default class NewProjectButton extends Component {\n\n  \n  state = {\n    click: false,\n    projectName: '',\n    disabled: true\n  };\n\n  changeProjectName = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      projectName: e.target.value\n    });\n  };\n\n  handleCreate = () => {\n    this.setState({ click: true });\n    PubSub.publish('createnewproject', this.state.projectName)\n\n  };\n\n  componentDidMount() {\n    PubSub.subscribe('disabled', (_msg: any, value: boolean) => {\n        this.state.disabled = value\n        this.setState(this.state)\n  })\n  }\n\n  render() {\n    return (\n      <div>\n        <input type=\"text\" value={this.state.projectName} onChange={this.changeProjectName} placeholder='Neuen Projektnamen eingeben' disabled={this.state.disabled}/>\n        <button onClick={() => this.handleCreate()} className=\"newProject\" id=\"new\" disabled={this.state.disabled}>Neues Projekt</button>\n        {this.state.click ? <div> <QRImage /><ChangeToVisuBtn /><LinkText /></div> : null}\n      </div>\n    );\n  }\n}\n","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/ReferringComponents/LoginWindow/index.tsx",["384","385","386"],"import React, { Component } from 'react';\nimport NewWindow from \"react-new-window\";\n\nexport default class LoginWindow extends Component {\n\n  state = {\n    openNewWindow: false,\n    username: '',\n    email: '',\n    password: '',\n  };\n\n  openNewWindow = () => {\n    this.setState({ openNewWindow: true });\n  };\n  changeUsername = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      username: e.target.value\n    });\n  };\n  changeEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      email: e.target.value\n    });\n  };\n  changePassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      password: e.target.value\n    });\n  };\n\n\n  register = () => {\n    this.setState({ openNewWindow: false });\n    /** mit controller weiter veraendern*/\n    var pattern = /^([A-Za-z0-9_\\-\\.])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z])+$/\n    if (!pattern.test(this.state.email)) {\n      alert('Sie müssen eine Emailadresse eingeben!');\n      return\n    } else {\n      PubSub.publish('register', { name: this.state.username, email: this.state.email, password: this.state.password })\n      PubSub.subscribe('registerstatus', (data: boolean) => {\n        if (data) {\n          PubSub.publish('login', { name: this.state.username, email: this.state.email, password: this.state.password })\n          PubSub.subscribe('loginstatus', (_msg: any, data: boolean) => {\n            if (data) {\n              alert('Register und Einloggen Erfolg!')\n            }\n          })\n        } else {\n          alert('Register Mißerfolg!')\n        }\n      })\n    }\n  }\n  login = () => {\n    /** nach submit newFenster schliessen */\n    this.setState({ openNewWindow: false });\n    /** mit controller weiter veraendern*/\n    PubSub.publish('login', { name: this.state.username, email: this.state.email, password: this.state.password })\n    PubSub.subscribe('loginstatus', (_msg: any, data: boolean) => {\n      if (data) {\n        alert('Einloggen Erfolg!')\n      } else {\n        alert('Einloggen Mißrfolg!')\n      }\n    })\n  };\n\n  render() {\n    return (\n      <div className=\"login-button\">\n        <button onClick={this.openNewWindow}> Einloggen Fenster </button>\n        {this.state.openNewWindow && (\n          <NewWindow>\n            <div className=\"login-window\">\n              <form>\n                <label>\n                  <p>Benutzername</p>\n                  <input type=\"text\" value={this.state.username} onChange={this.changeUsername} />\n                </label>\n                <label>\n                  <p>Email</p>\n                  <input type=\"text\" value={this.state.email} onChange={this.changeEmail} />\n                </label>\n                <label>\n                  <p>Passwort</p>\n                  <input type=\"password\" value={this.state.password} onChange={this.changePassword} />\n                </label>\n                <div>\n                  <button onClick={this.register}>Registrieren</button>\n                  <button onClick={this.login}>Loggen ein</button>\n                </div>\n              </form>\n            </div>\n          </NewWindow>\n        )}\n      </div>\n    );\n  }\n}\n","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/ReferringComponents/LinkText/index.tsx",[],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/ReferringComponents/QRImage/index.tsx",[],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/ReferringComponents/ProjectList/index.tsx",["387","388","389","390","391"],"import React, { Component } from 'react'\nimport ChangeToVisuBtn from '../ChangeToVisuBtn';\nimport ModelList from '../ModelList';\nimport QRImage from '../QRImage';\n\nexport default class ProjectList extends Component {\n    state = {\n        value: null,\n        click: false,\n        loadclick: false,\n        //hier Beispiel, in componentDidMount will projectData verändern\n        projectData: [{\n            projectID: 1,\n            projectName: 'Projekt1',\n            AIModelID: [1, 2]\n        }, {\n            projectID: 2,\n            projectName: 'Projekt2',\n            AIModelID: []\n        }]\n    }\n\n    componentDidMount() {\n        /** controller noch nicht gegeben*/\n        PubSub.subscribe('getprojectlist', (_msg: any, data: { projectID: number, projectName: string, AIModelID: number[]; }[]) => {\n            this.setState({ projectData: data })\n        })\n\n    }\n\n    handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n        this.setState({\n            value: e.target.value\n        })\n    }\n    \n    handleChoose() {\n        /* wait to change load model*/\n        if (this.state.value == null) {\n            alert('Sie haben noch kein Projekt gewählt!')\n        } else {\n            this.state.projectData.map((projectObj) => {\n                if (this.state.value == projectObj.projectID) {\n                    if (projectObj.AIModelID.length != 0) {\n                        PubSub.publish('needmodellist', projectObj)\n                        this.setState({ click: true })\n                    } else {\n                        this.setState({ click: false })\n                        alert('Es gibt keine Model in diesem Projekt!')\n                    }\n                }\n            })\n        }\n\n    }\n    handleLoad() {\n\n        if (this.state.value == null) {\n            alert('Sie haben noch kein Projekt gewählt!')\n        } else {\n            this.state.projectData.map((projectObj) => {\n                if (this.state.value == projectObj.projectID) {\n                    PubSub.publish('loadproject', projectObj)\n                    this.setState({ loadclick: true })\n                }\n            })\n        }\n    }\n    render() {\n        return (\n            <section>\n                <label>ProjektList</label>\n                <select onChange={this.handleChange}>\n                    <option>Projekt Wählen</option>\n                    {this.state.projectData.map((projectObj) => {\n                        return <option value={projectObj.projectID}>{projectObj.projectName}</option>\n                    })}\n                </select>\n                <button onClick={() => this.handleChoose()} className=\"btn\" >Wählen Modell in diesem Projekt </button>\n                <button onClick={() => this.handleLoad()} className=\"btn\" >Laden das Projekt!</button>\n                {this.state.loadclick ? <div> <QRImage /><ChangeToVisuBtn /></div> : null}\n                {this.state.click ? <div> <ModelList /></div> : null}\n            </section>\n\n        )\n    }\n}\n","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/ReferringComponents/ChangeToVisuBtn/index.tsx",[],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/ReferringComponents/ModelList/index.tsx",[],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/controller/StartController.tsx",[],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/controller/DataCollectionController.tsx",[],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/controller/SensorManager.tsx",[],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/pages/StartPage/index.tsx",["392","393"],"import React, { Component } from 'react';\nimport PubSub from 'pubsub-js';\nimport Title from '../../components/StartComponents/Title';\nimport Input from '../../components/StartComponents/Input';\nimport { Page } from \"../PageInterface\";\nimport { PageController } from \"../../../controller/PageController\";\nimport { State } from \"./State\";\nimport ReactDOM from 'react-dom';\nimport { States } from '../State';\n\ntype Props = {\n\n};\n\nexport class StartPage extends React.Component<Props, State> implements Page {\n    state = new State();\n    observers: PageController[] = [];\n    constructor(props: Props) {\n        super(props);\n        this.setAvailableSensors();\n        this.changeSettings();\n        const VDOM = (\n            <div>\n                <Title />\n                <Input />\n            </div>\n        );\n        ReactDOM.render(VDOM, document.getElementById('root'));\n    }\n\n    setAvailableSensors() {\n        PubSub.publish('setAvailableSensors', (\n            this.state.recordingSettings.availableSensorTypes));\n    }\n\n    /**\n     * Prüft ob der Nutzer \"Start\" druckt und ändert den Zustand.\n     */\n    changeSettings() {\n        PubSub.subscribe('settingsFinish', (data: {\n            newDataSetName: string,\n            usedSensorTypes: number[],\n            waitTime: number,\n            readTime: number,\n            availableSensorTypes: { sensorTypID: number, sensorType: string, chosen: boolean; }[];\n        }) => {\n            this.setState({ recordingSettings: data });\n            this.state.currentState = States.ChangeToDataCollection;\n            this.notify();\n        });\n    }\n\n    /**\n     * Die Methoden für Beobachtermuster\n     * @param observer Beobachter,nähmlich Controller\n     */\n    attach(observer: PageController) {\n        this.observers.push(observer);\n    }\n\n    detach(observer: PageController) {\n        const index = this.observers.indexOf(observer, 0);\n        if (index > -1) {\n            this.observers.splice(index, 1);\n        }\n    }\n\n    notify() {\n        for (let index = 0; index < this.observers.length; index++) {\n            const element = this.observers[index];\n            element.update();\n        }\n    }\n\n    getState() {\n        return this.state;\n    }\n\n}\n","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/pages/StartPage/State.tsx",[],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/controller/FinishController.tsx",["394"],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/pages/DataCollectionPage/index.tsx",["395"],"import React from 'react';\nimport PubSub from 'pubsub-js';\nimport Title from '../../components/DataCollectionComponents/Title';\nimport Countdown from '../../components/DataCollectionComponents/Countdown';\nimport Diagram from '../../components/DataCollectionComponents/Diagram';\nimport { Page } from \"../PageInterface\";\nimport { PageController } from \"../../../controller/PageController\";\nimport { State } from \"./State\";\nimport ReactDOM from 'react-dom';\nimport { States } from '../State';\n\ntype Props = {\n};\n\nexport class DataCollectionPage extends React.Component<Props, State> implements Page {\n    state = new State;\n    observers: PageController[] = [];\n\n    constructor(props: Props) {\n        super(props);\n        this.finishCountdown();\n        const VDOM = (\n            <div>\n                <Title />\n                <Countdown />\n                <Diagram />\n            </div>\n        );\n        ReactDOM.render(VDOM, document.getElementById('root'));\n    }\n\n\n    /**\n     * Diese Methode braucht nur einmal aufzurufen, Countdown geht automatisch.\n     * @param countdownNumber Die Countdownzahl zu zeigen.\n     */\n    showCountdownNumber(leadTime: number) {\n        this.setState({ leadTime: leadTime });\n        PubSub.publish('startCounting', this.state.leadTime);\n    }\n\n    /**\n     * Prüft ob Countdown fertig ist und ändert den Zustand.\n     */\n    finishCountdown() {\n        PubSub.subscribe('finishCountdwon', () => {\n            this.setState({ currentState: States.NeedInstantDiagram });\n            this.notify();\n        }\n        );\n    }\n\n    /**\n     * Diese Methode sollte während Datenerfassung jede Sekunde von Controller aufgerufen werden, um Bild zu updaten.\n     * @param countdownNumber Die Countdownzahl zu zeigen\n     */\n    showDiagram(diagramSvg: string) {\n        this.setState({ diagramSvg: diagramSvg });\n        PubSub.publish('startDiagram', this.state.diagramSvg);\n    }\n\n    /**\n     * Die Methoden für Beobachtermuster\n     * @param observer Beobachter,nähmlich Controller\n     */\n    attach(observer: PageController) {\n        this.observers.push(observer);\n    }\n\n    detach(observer: PageController) {\n        const index = this.observers.indexOf(observer, 0);\n        if (index > -1) {\n            this.observers.splice(index, 1);\n        }\n    }\n\n    notify() {\n        for (let index = 0; index < this.observers.length; index++) {\n            const element = this.observers[index];\n            element.update();\n        }\n    }\n\n    getState() {\n        return this.state;\n    }\n\n}","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/StartComponents/Title/index.tsx",[],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/pages/DataCollectionPage/State.tsx",[],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/StartComponents/Input/index.tsx",["396","397"],"import React, { Component } from \"react\";\nimport input from \"./index.module.css\";\n\nexport default class Input extends Component {\n  state = {\n    name: \"\",\n    usedSensorTypes: [] as number[],\n    leadTime: \"\",\n    collectionTime: \"\",\n    availableSensorTypes: [] as { sensorTypID: number, sensorType: string, chosen: boolean; }[]\n  };\n\n  setAvailableSensors() {\n    PubSub.subscribe('setAvailableSensors', (\n      data: { sensorTypID: number, sensorType: string, chosen: boolean; }[]\n    ) => {\n      this.setState({ availableSensorTypes: data });\n    });\n  }\n\n  changeLeadtime = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState(() => ({\n      leadTime: e.target.value,\n    }));\n  };\n  changeCollectionTime = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState(() => ({\n      collectionTime: e.target.value,\n    }));\n  };\n  changeSensors = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    this.setState(() => ({\n      chosenSensors: e.target.value,\n    }));\n  };\n  changeName = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState(() => ({\n      name: e.target.value,\n    }));\n  };\n\n  handleCheckBoxChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    let newAvailableSensorTypes = this.state.availableSensorTypes;\n    for (var i = 0; i < newAvailableSensorTypes.length; i++) {\n      if (newAvailableSensorTypes[i].sensorTypID == +e.target.value) {\n        newAvailableSensorTypes[i].chosen = !newAvailableSensorTypes[i].chosen;\n        this.setState({ availableSensorTypes: newAvailableSensorTypes, });\n        return;\n      }\n    }\n  };\n\n\n  submit = () => {\n    if (\n      parseInt(this.state.leadTime) <= 5 &&\n      parseInt(this.state.leadTime) >= 3 &&\n      parseInt(this.state.collectionTime) <= 10 &&\n      parseInt(this.state.collectionTime) >= 5\n    ) {\n      let availableSensorTypes = this.state.availableSensorTypes;\n      var usedSensorTypes: number[] = [];\n      for (var i = 0; i < availableSensorTypes.length; i++) {\n        if (availableSensorTypes[i].chosen == true) {\n          usedSensorTypes.push(availableSensorTypes[i].sensorTypID);\n        }\n      }\n      this.setState({ usedSensorTypes: usedSensorTypes });\n      PubSub.publish('settingsFinish', this.state);\n    } else {\n      alert(\"Deine Eingabe ist ungültig.\");\n    }\n  };\n\n  render() {\n    this.setAvailableSensors();\n    return (\n      <div className=\"input\">\n        <form>\n          Aufnahmeparameter einstellen\n          <br />\n          Vorlaufzeit:\n          <input\n            type=\"leadTime\"\n            value={this.state.leadTime}\n            onChange={this.changeLeadtime.bind(this)}\n          />\n          s<br />\n          Aufnahmedauer:\n          <input\n            type=\"collectionTime\"\n            value={this.state.collectionTime}\n            onChange={this.changeCollectionTime.bind(this)}\n          />\n          s<br />\n          Datenname:\n          <input\n            type=\"datenname\"\n            value={this.state.name}\n            onChange={this.changeName.bind(this)}\n          /><br />\n          Sensoren...\n          <ul className=\"todo-main\">\n            {\n              this.state.availableSensorTypes.map((type: { sensorTypID: number, sensorType: string, chosen: boolean; }) => {\n                return (<li key={type.sensorTypID}>\n                  <input\n                    type=\"checkbox\" value={type.sensorTypID} checked={type.chosen} onChange={(e) => this.handleCheckBoxChange(e)} />\n                  {type.sensorType}\n                </li>);\n              })\n            }\n          </ul>\n          <br />\n          <button type=\"button\" onClick={this.submit}>\n            Start\n          </button>\n        </form>\n      </div>\n    );\n  }\n};\n","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/DataCollectionComponents/Diagram/index.tsx",[],"/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/DataCollectionComponents/Countdown/index.tsx",["398","399","400","401"],"import { Component, useState, useEffect, useRef } from 'react';\nimport PubSub from 'pubsub-js';\n\nexport default class Countdown extends Component {\n    state = { countdownNumber: 5, startCounting: false, chosenSensors: \"\" };\n\n    componentDidMount() {\n        PubSub.subscribe('startCounting', (leadTime: number) => {\n            this.setState({ countdownNumber: leadTime, startCounting: true });\n        }\n        );\n\n        setInterval(() => {\n            this.updateCounting();\n        }, 1000);\n    }\n\n    updateCounting() {\n        this.setState({ countdownNumber: this.state.countdownNumber - 1 });\n        if (this.state.countdownNumber == 0) {\n            this.setState({ startCounting: false });\n        }\n    }\n\n\n    render() {\n        return (\n            <div>\n                <h2>Bereit machen zur Aufnahme!</h2>\n                <h2>{this.state.startCounting ? this.state.countdownNumber : \"\"}</h2>\n                <h2>Verwendete Sensoren:<br />{this.state.chosenSensors}</h2>\n            </div>\n        );\n    }\n\n}\n\n\n\n\n","/home/darius/Dokumente/GitHub/Typescript-Frontend/ki-app/src/view/components/DataCollectionComponents/Title/index.tsx",[],{"ruleId":"402","severity":1,"message":"403","line":1,"column":8,"nodeType":"404","messageId":"405","endLine":1,"endColumn":13},{"ruleId":"402","severity":1,"message":"406","line":2,"column":8,"nodeType":"404","messageId":"405","endLine":2,"endColumn":16},{"ruleId":"407","replacedBy":"408"},{"ruleId":"409","replacedBy":"410"},{"ruleId":"402","severity":1,"message":"411","line":4,"column":10,"nodeType":"404","messageId":"405","endLine":4,"endColumn":16},{"ruleId":"412","severity":1,"message":"413","line":71,"column":11,"nodeType":"404","messageId":"414","endLine":71,"endColumn":37},{"ruleId":"402","severity":1,"message":"415","line":8,"column":37,"nodeType":"404","messageId":"405","endLine":8,"endColumn":45},{"ruleId":"402","severity":1,"message":"416","line":8,"column":47,"nodeType":"404","messageId":"405","endLine":8,"endColumn":57},{"ruleId":"402","severity":1,"message":"417","line":8,"column":59,"nodeType":"404","messageId":"405","endLine":8,"endColumn":69},{"ruleId":"402","severity":1,"message":"418","line":8,"column":71,"nodeType":"404","messageId":"405","endLine":8,"endColumn":78},{"ruleId":"419","severity":1,"message":"420","line":46,"column":13,"nodeType":"421","messageId":"422","endLine":48,"endColumn":23},{"ruleId":"419","severity":1,"message":"420","line":58,"column":13,"nodeType":"421","messageId":"422","endLine":60,"endColumn":23},{"ruleId":"402","severity":1,"message":"423","line":4,"column":29,"nodeType":"404","messageId":"405","endLine":4,"endColumn":45},{"ruleId":"402","severity":1,"message":"424","line":54,"column":11,"nodeType":"404","messageId":"405","endLine":54,"endColumn":21},{"ruleId":"425","severity":1,"message":"426","line":301,"column":62,"nodeType":"427","messageId":"422","endLine":301,"endColumn":64},{"ruleId":"402","severity":1,"message":"428","line":49,"column":13,"nodeType":"404","messageId":"405","endLine":49,"endColumn":25},{"ruleId":"402","severity":1,"message":"429","line":51,"column":19,"nodeType":"404","messageId":"405","endLine":51,"endColumn":34},{"ruleId":"402","severity":1,"message":"430","line":7,"column":10,"nodeType":"404","messageId":"405","endLine":7,"endColumn":15},{"ruleId":"402","severity":1,"message":"431","line":1,"column":10,"nodeType":"404","messageId":"405","endLine":1,"endColumn":34},{"ruleId":"425","severity":1,"message":"432","line":70,"column":32,"nodeType":"427","messageId":"422","endLine":70,"endColumn":34},{"ruleId":"425","severity":1,"message":"432","line":71,"column":32,"nodeType":"427","messageId":"422","endLine":71,"endColumn":34},{"ruleId":"402","severity":1,"message":"433","line":1,"column":17,"nodeType":"404","messageId":"405","endLine":1,"endColumn":26},{"ruleId":"402","severity":1,"message":"434","line":10,"column":10,"nodeType":"404","messageId":"405","endLine":10,"endColumn":16},{"ruleId":"402","severity":1,"message":"433","line":1,"column":17,"nodeType":"404","messageId":"405","endLine":1,"endColumn":26},{"ruleId":"435","severity":1,"message":"436","line":54,"column":4,"nodeType":"437","endLine":54,"endColumn":14},{"ruleId":"435","severity":1,"message":"436","line":55,"column":4,"nodeType":"437","endLine":55,"endColumn":14},{"ruleId":"435","severity":1,"message":"436","line":62,"column":4,"nodeType":"437","endLine":62,"endColumn":14},{"ruleId":"402","severity":1,"message":"433","line":1,"column":17,"nodeType":"404","messageId":"405","endLine":1,"endColumn":26},{"ruleId":"402","severity":1,"message":"438","line":4,"column":8,"nodeType":"404","messageId":"405","endLine":4,"endColumn":16},{"ruleId":"402","severity":1,"message":"439","line":9,"column":10,"nodeType":"404","messageId":"405","endLine":9,"endColumn":24},{"ruleId":"435","severity":1,"message":"436","line":60,"column":9,"nodeType":"437","endLine":60,"endColumn":19},{"ruleId":"435","severity":1,"message":"436","line":66,"column":13,"nodeType":"437","endLine":66,"endColumn":23},{"ruleId":"435","severity":1,"message":"436","line":72,"column":13,"nodeType":"437","endLine":72,"endColumn":23},{"ruleId":"402","severity":1,"message":"440","line":5,"column":10,"nodeType":"404","messageId":"405","endLine":5,"endColumn":15},{"ruleId":"441","severity":1,"message":"442","line":2,"column":26,"nodeType":"404","messageId":"443","endLine":2,"endColumn":32},{"ruleId":"402","severity":1,"message":"433","line":1,"column":17,"nodeType":"404","messageId":"405","endLine":1,"endColumn":26},{"ruleId":"402","severity":1,"message":"440","line":1,"column":10,"nodeType":"404","messageId":"405","endLine":1,"endColumn":15},{"ruleId":"441","severity":1,"message":"442","line":2,"column":26,"nodeType":"404","messageId":"443","endLine":2,"endColumn":32},{"ruleId":"425","severity":1,"message":"432","line":26,"column":22,"nodeType":"427","messageId":"422","endLine":26,"endColumn":24},{"ruleId":"444","severity":1,"message":"445","line":45,"column":25,"nodeType":"446","messageId":"447","endLine":45,"endColumn":27},{"ruleId":"425","severity":1,"message":"432","line":46,"column":25,"nodeType":"427","messageId":"422","endLine":46,"endColumn":27},{"ruleId":"448","severity":1,"message":"449","line":52,"column":33,"nodeType":"450","messageId":"451","endLine":52,"endColumn":34,"suggestions":"452"},{"ruleId":"448","severity":1,"message":"453","line":52,"column":38,"nodeType":"450","messageId":"451","endLine":52,"endColumn":39,"suggestions":"454"},{"ruleId":"448","severity":1,"message":"449","line":52,"column":54,"nodeType":"450","messageId":"451","endLine":52,"endColumn":55,"suggestions":"455"},{"ruleId":"425","severity":1,"message":"432","line":74,"column":20,"nodeType":"427","messageId":"422","endLine":74,"endColumn":22},{"ruleId":"444","severity":1,"message":"445","line":141,"column":25,"nodeType":"446","messageId":"447","endLine":141,"endColumn":27},{"ruleId":"407","replacedBy":"408"},{"ruleId":"409","replacedBy":"410"},{"ruleId":"402","severity":1,"message":"433","line":1,"column":17,"nodeType":"404","messageId":"405","endLine":1,"endColumn":26},{"ruleId":"435","severity":1,"message":"436","line":66,"column":13,"nodeType":"437","endLine":66,"endColumn":23},{"ruleId":"435","severity":1,"message":"436","line":67,"column":13,"nodeType":"437","endLine":67,"endColumn":23},{"ruleId":"435","severity":1,"message":"436","line":89,"column":13,"nodeType":"437","endLine":89,"endColumn":23},{"ruleId":"435","severity":1,"message":"436","line":90,"column":13,"nodeType":"437","endLine":90,"endColumn":23},{"ruleId":"425","severity":1,"message":"426","line":95,"column":41,"nodeType":"427","messageId":"422","endLine":95,"endColumn":43},{"ruleId":"435","severity":1,"message":"436","line":108,"column":13,"nodeType":"437","endLine":108,"endColumn":23},{"ruleId":"435","severity":1,"message":"436","line":109,"column":13,"nodeType":"437","endLine":109,"endColumn":23},{"ruleId":"435","severity":1,"message":"436","line":128,"column":13,"nodeType":"437","endLine":128,"endColumn":23},{"ruleId":"435","severity":1,"message":"436","line":129,"column":13,"nodeType":"437","endLine":129,"endColumn":23},{"ruleId":"435","severity":1,"message":"436","line":140,"column":13,"nodeType":"437","endLine":140,"endColumn":23},{"ruleId":"435","severity":1,"message":"436","line":141,"column":13,"nodeType":"437","endLine":141,"endColumn":23},{"ruleId":"435","severity":1,"message":"436","line":148,"column":13,"nodeType":"437","endLine":148,"endColumn":23},{"ruleId":"435","severity":1,"message":"436","line":155,"column":13,"nodeType":"437","endLine":155,"endColumn":23},{"ruleId":"435","severity":1,"message":"436","line":156,"column":13,"nodeType":"437","endLine":156,"endColumn":23},{"ruleId":"402","severity":1,"message":"456","line":3,"column":10,"nodeType":"404","messageId":"405","endLine":3,"endColumn":16},{"ruleId":"402","severity":1,"message":"457","line":3,"column":18,"nodeType":"404","messageId":"405","endLine":3,"endColumn":35},{"ruleId":"402","severity":1,"message":"415","line":3,"column":37,"nodeType":"404","messageId":"405","endLine":3,"endColumn":45},{"ruleId":"402","severity":1,"message":"416","line":3,"column":47,"nodeType":"404","messageId":"405","endLine":3,"endColumn":57},{"ruleId":"402","severity":1,"message":"417","line":3,"column":59,"nodeType":"404","messageId":"405","endLine":3,"endColumn":69},{"ruleId":"402","severity":1,"message":"418","line":3,"column":71,"nodeType":"404","messageId":"405","endLine":3,"endColumn":78},{"ruleId":"435","severity":1,"message":"436","line":8,"column":5,"nodeType":"437","endLine":8,"endColumn":15},{"ruleId":"435","severity":1,"message":"436","line":14,"column":7,"nodeType":"437","endLine":14,"endColumn":17},{"ruleId":"402","severity":1,"message":"458","line":5,"column":10,"nodeType":"404","messageId":"405","endLine":5,"endColumn":18},{"ruleId":"435","severity":1,"message":"436","line":30,"column":9,"nodeType":"437","endLine":30,"endColumn":19},{"ruleId":"448","severity":1,"message":"449","line":36,"column":35,"nodeType":"450","messageId":"451","endLine":36,"endColumn":36,"suggestions":"459"},{"ruleId":"448","severity":1,"message":"453","line":36,"column":40,"nodeType":"450","messageId":"451","endLine":36,"endColumn":41,"suggestions":"460"},{"ruleId":"448","severity":1,"message":"449","line":36,"column":56,"nodeType":"450","messageId":"451","endLine":36,"endColumn":57,"suggestions":"461"},{"ruleId":"444","severity":1,"message":"445","line":42,"column":53,"nodeType":"446","messageId":"447","endLine":42,"endColumn":55},{"ruleId":"425","severity":1,"message":"432","line":43,"column":38,"nodeType":"427","messageId":"422","endLine":43,"endColumn":40},{"ruleId":"425","severity":1,"message":"426","line":44,"column":53,"nodeType":"427","messageId":"422","endLine":44,"endColumn":55},{"ruleId":"444","severity":1,"message":"445","line":61,"column":53,"nodeType":"446","messageId":"447","endLine":61,"endColumn":55},{"ruleId":"425","severity":1,"message":"432","line":62,"column":38,"nodeType":"427","messageId":"422","endLine":62,"endColumn":40},{"ruleId":"402","severity":1,"message":"433","line":1,"column":17,"nodeType":"404","messageId":"405","endLine":1,"endColumn":26},{"ruleId":"435","severity":1,"message":"436","line":48,"column":13,"nodeType":"437","endLine":48,"endColumn":23},{"ruleId":"402","severity":1,"message":"462","line":3,"column":10,"nodeType":"404","messageId":"405","endLine":3,"endColumn":20},{"ruleId":"463","severity":1,"message":"464","line":16,"column":13,"nodeType":"465","messageId":"466","endLine":16,"endColumn":22,"fix":"467"},{"ruleId":"425","severity":1,"message":"432","line":45,"column":50,"nodeType":"427","messageId":"422","endLine":45,"endColumn":52},{"ruleId":"425","severity":1,"message":"432","line":64,"column":44,"nodeType":"427","messageId":"422","endLine":64,"endColumn":46},{"ruleId":"402","severity":1,"message":"458","line":1,"column":21,"nodeType":"404","messageId":"405","endLine":1,"endColumn":29},{"ruleId":"402","severity":1,"message":"468","line":1,"column":31,"nodeType":"404","messageId":"405","endLine":1,"endColumn":40},{"ruleId":"402","severity":1,"message":"469","line":1,"column":42,"nodeType":"404","messageId":"405","endLine":1,"endColumn":48},{"ruleId":"425","severity":1,"message":"432","line":20,"column":40,"nodeType":"427","messageId":"422","endLine":20,"endColumn":42},"@typescript-eslint/no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","'ReactDOM' is defined but never used.","no-native-reassign",["470"],"no-negated-in-lhs",["471"],"'IState' is defined but never used.","@typescript-eslint/no-redeclare","'controller' is already defined.","redeclared","'QRNumber' is defined but never used.","'QRAlphaNum' is defined but never used.","'QR8BitByte' is defined but never used.","'QRKanji' is defined but never used.","no-duplicate-case","Duplicate case label.","SwitchCase","unexpected","'MagnetometerData' is defined but never used.","'sensorTest' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","'text' is assigned a value but never used.","'element' is assigned a value but never used.","'State' is defined but never used.","'findAllByPlaceholderText' is defined but never used.","Expected '===' and instead saw '=='.","'Component' is defined but never used.","'States' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'eximage1' is defined but never used.","'MainController' is defined but never used.","'Admin' is defined but never used.","@typescript-eslint/no-use-before-define","'States' was used before it was defined.","noUseBeforeDefine","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["472","473"],"Unnecessary escape character: \\@.",["474","475"],["476","477"],"'QRCode' is defined but never used.","'ErrorCorrectLevel' is defined but never used.","'useState' is defined but never used.",["478","479"],["480","481"],["482","483"],"'FinishPage' is defined but never used.","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"484","text":"485"},"'useEffect' is defined but never used.","'useRef' is defined but never used.","no-global-assign","no-unsafe-negation",{"messageId":"486","fix":"487","desc":"488"},{"messageId":"489","fix":"490","desc":"491"},{"messageId":"486","fix":"492","desc":"488"},{"messageId":"489","fix":"493","desc":"491"},{"messageId":"486","fix":"494","desc":"488"},{"messageId":"489","fix":"495","desc":"491"},{"messageId":"486","fix":"496","desc":"488"},{"messageId":"489","fix":"497","desc":"491"},{"messageId":"486","fix":"498","desc":"488"},{"messageId":"489","fix":"499","desc":"491"},{"messageId":"486","fix":"500","desc":"488"},{"messageId":"489","fix":"501","desc":"491"},[619,619],"()","removeEscape",{"range":"502","text":"503"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"504","text":"505"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"506","text":"503"},{"range":"507","text":"505"},{"range":"508","text":"503"},{"range":"509","text":"505"},{"range":"510","text":"503"},{"range":"511","text":"505"},{"range":"512","text":"503"},{"range":"513","text":"505"},{"range":"514","text":"503"},{"range":"515","text":"505"},[1285,1286],"",[1285,1285],"\\",[1290,1291],[1290,1290],[1306,1307],[1306,1306],[835,836],[835,835],[840,841],[840,840],[856,857],[856,856]]
