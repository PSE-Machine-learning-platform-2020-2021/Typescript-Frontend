[{"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\index.tsx":"1","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\reportWebVitals.ts":"2","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\MainController.tsx":"3","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\ReferringController.tsx":"4","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\StartController.tsx":"5","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Facade.tsx":"6","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\State.tsx":"7","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\VisualizationController.tsx":"8","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\DeliveryController.tsx":"9","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DatabaseConnector.tsx":"10","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Language.tsx":"11","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\User.tsx":"12","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\DataCollectionController.tsx":"13","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\SensorManager.tsx":"14","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\index.tsx":"15","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\AIBuilder.tsx":"16","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Sensor.tsx":"17","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\index.tsx":"18","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\ModelCreationController.tsx":"19","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Project.tsx":"20","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\index.tsx":"21","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\index.tsx":"22","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\FinishController.tsx":"23","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\State.tsx":"24","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\index.tsx":"25","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\State.tsx":"26","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\AIModel.tsx":"27","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DataSet.tsx":"28","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Session.tsx":"29","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\index.tsx":"30","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\State.tsx":"31","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\State.tsx":"32","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\NewProjectButton\\index.tsx":"33","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoadModelButton\\index.tsx":"34","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ConstantsText\\index.tsx":"35","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoginWindow\\index.tsx":"36","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Title\\index.tsx":"37","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Input\\index.tsx":"38","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\State.tsx":"39","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Label.tsx":"40","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DataRow.tsx":"41","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\ImageList\\index.tsx":"42","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\FinishButton\\index.tsx":"43","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\ShowImage\\index.tsx":"44","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\DownloadButton\\index.tsx":"45","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\EmailList\\index.tsx":"46","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\State.tsx":"47","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Diagram\\index.tsx":"48","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Countdown\\index.tsx":"49","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Title\\index.tsx":"50","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\TimeSpan.tsx":"51","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DataPoint.tsx":"52","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\Train\\index.tsx":"53","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\QRImage\\index.tsx":"54","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LinkText\\index.tsx":"55","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ProjectList\\index.tsx":"56","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ChangeToVisuBtn\\index.tsx":"57","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ModelList\\index.tsx":"58","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DeviceData.tsx":"59"},{"size":480,"mtime":1613146123193,"results":"60","hashOfConfig":"61"},{"size":440,"mtime":1613146123200,"results":"62","hashOfConfig":"61"},{"size":3277,"mtime":1613830318133,"results":"63","hashOfConfig":"61"},{"size":6358,"mtime":1613830318133,"results":"64","hashOfConfig":"61"},{"size":3251,"mtime":1613497299608,"results":"65","hashOfConfig":"61"},{"size":17406,"mtime":1613906463091,"results":"66","hashOfConfig":"61"},{"size":3832,"mtime":1613830318142,"results":"67","hashOfConfig":"61"},{"size":3510,"mtime":1613491611449,"results":"68","hashOfConfig":"61"},{"size":2286,"mtime":1613662337780,"results":"69","hashOfConfig":"61"},{"size":11474,"mtime":1613838018886,"results":"70","hashOfConfig":"61"},{"size":1875,"mtime":1613491631620,"results":"71","hashOfConfig":"61"},{"size":14264,"mtime":1613906460047,"results":"72","hashOfConfig":"61"},{"size":1602,"mtime":1613390799825,"results":"73","hashOfConfig":"61"},{"size":3212,"mtime":1613743360225,"results":"74","hashOfConfig":"61"},{"size":5579,"mtime":1613830318142,"results":"75","hashOfConfig":"61"},{"size":4407,"mtime":1613830318134,"results":"76","hashOfConfig":"61"},{"size":6472,"mtime":1613906277955,"results":"77","hashOfConfig":"61"},{"size":2311,"mtime":1613491611469,"results":"78","hashOfConfig":"61"},{"size":1451,"mtime":1613491611443,"results":"79","hashOfConfig":"61"},{"size":7572,"mtime":1613491631620,"results":"80","hashOfConfig":"61"},{"size":2375,"mtime":1613830318143,"results":"81","hashOfConfig":"61"},{"size":1623,"mtime":1613830318140,"results":"82","hashOfConfig":"61"},{"size":3699,"mtime":1613830318132,"results":"83","hashOfConfig":"61"},{"size":843,"mtime":1613830318141,"results":"84","hashOfConfig":"61"},{"size":2628,"mtime":1613280195769,"results":"85","hashOfConfig":"61"},{"size":511,"mtime":1613491611469,"results":"86","hashOfConfig":"61"},{"size":485,"mtime":1613280191739,"results":"87","hashOfConfig":"61"},{"size":6394,"mtime":1613280191746,"results":"88","hashOfConfig":"61"},{"size":1581,"mtime":1613291060196,"results":"89","hashOfConfig":"61"},{"size":1980,"mtime":1613830318141,"results":"90","hashOfConfig":"61"},{"size":297,"mtime":1613497745957,"results":"91","hashOfConfig":"61"},{"size":276,"mtime":1613662337789,"results":"92","hashOfConfig":"61"},{"size":1273,"mtime":1613830318139,"results":"93","hashOfConfig":"61"},{"size":730,"mtime":1613830318137,"results":"94","hashOfConfig":"61"},{"size":229,"mtime":1613146123225,"results":"95","hashOfConfig":"61"},{"size":3250,"mtime":1613830318138,"results":"96","hashOfConfig":"61"},{"size":1002,"mtime":1613146123233,"results":"97","hashOfConfig":"61"},{"size":3829,"mtime":1613491611465,"results":"98","hashOfConfig":"61"},{"size":361,"mtime":1613280195768,"results":"99","hashOfConfig":"61"},{"size":1787,"mtime":1613280192336,"results":"100","hashOfConfig":"61"},{"size":3361,"mtime":1613280191744,"results":"101","hashOfConfig":"61"},{"size":1760,"mtime":1613497745953,"results":"102","hashOfConfig":"61"},{"size":366,"mtime":1613662337788,"results":"103","hashOfConfig":"61"},{"size":700,"mtime":1613497745955,"results":"104","hashOfConfig":"61"},{"size":363,"mtime":1613662337782,"results":"105","hashOfConfig":"61"},{"size":5830,"mtime":1613830318136,"results":"106","hashOfConfig":"61"},{"size":727,"mtime":1613830318140,"results":"107","hashOfConfig":"61"},{"size":363,"mtime":1613280195761,"results":"108","hashOfConfig":"61"},{"size":1074,"mtime":1613280195760,"results":"109","hashOfConfig":"61"},{"size":1002,"mtime":1613280195763,"results":"110","hashOfConfig":"61"},{"size":1370,"mtime":1613280192349,"results":"111","hashOfConfig":"61"},{"size":927,"mtime":1613280191742,"results":"112","hashOfConfig":"61"},{"size":10277,"mtime":1613830318137,"results":"113","hashOfConfig":"61"},{"size":514,"mtime":1613390799834,"results":"114","hashOfConfig":"61"},{"size":646,"mtime":1613390799830,"results":"115","hashOfConfig":"61"},{"size":3128,"mtime":1613830318139,"results":"116","hashOfConfig":"61"},{"size":397,"mtime":1613491611453,"results":"117","hashOfConfig":"61"},{"size":1864,"mtime":1613830318138,"results":"118","hashOfConfig":"61"},{"size":2149,"mtime":1613906437078,"results":"119","hashOfConfig":"61"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"123"},"fl9nei",{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"123"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"123"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"123"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"123"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"123"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"123"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"123"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"123"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"123"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"123"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"123"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"123"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"185","usedDeprecatedRules":"123"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"123"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"123"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"123"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"123"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"123"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"123"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"123"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"123"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"123"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"123"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\index.tsx",["264","265"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { MainController } from './controller/MainController';\r\n\r\nMainController.getInstance().startApp();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n",["266","267"],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\reportWebVitals.ts",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\MainController.tsx",["268","269"],"import { PageController } from \"./PageController\";\r\nimport { RefferingController } from \"./ReferringController\";\r\nimport { MainControllerInterface } from \"./MainControllerInterface\";\r\nimport { IState, States } from \"../view/pages/State\";\r\nimport { Facade } from \"../model/Facade\";\r\nimport { StartController } from \"./StartController\";\r\n\r\nexport class MainController implements MainControllerInterface {\r\n  private facade: Facade;\r\n\r\n  private static mainController: MainController;\r\n\r\n  private currentPageController: PageController | undefined;\r\n\r\n  /**\r\n   * Konstruktor des MainControllers. Holt sich die Fassade.\r\n   */\r\n  constructor() {\r\n    this.facade = new Facade(\"de-de\");\r\n  }\r\n\r\n  /**\r\n   * Gibt sich selber zurück und sorgt dafür das nur ein MainController besteht.\r\n   * @returns MainController\r\n   */\r\n  static getInstance() {\r\n    if (this.mainController === undefined) {\r\n      this.mainController = new MainController();\r\n      return this.mainController;\r\n    }\r\n    return this.mainController;\r\n  }\r\n\r\n  /**\r\n   * Prüft ob das Gerät auf das Internet zugreifen kann.\r\n   * @returns Gibt true zurück falls eine Internetverbindung besteht, sonst wird false zurück gegeben.\r\n   */\r\n  checkConnection() {\r\n    return window.navigator.onLine;\r\n  }\r\n\r\n  /**\r\n   * Prüft ob der Benutzer angemeldet ist.\r\n   * @returns Gibt true zurück falls der Benutzer angemeldet ist, sonst wird false zurück gegeben.\r\n   */\r\n  checkLoginStatus() {\r\n    return false;//this.facade.checkLogin();\r\n  }\r\n\r\n  // static getSession() {\r\n  //    return false\r\n  //}\r\n\r\n  /**\r\n   * Setzt den momentanen Seitenverwalter neu\r\n   * @param destinationPageController Der neue Seitenverwalter\r\n   */\r\n  changeTo(destinationPageController: PageController) {\r\n    this.currentPageController = destinationPageController;\r\n  }\r\n\r\n  /**\r\n   * Andwendungstart für einen Desktop\r\n   */\r\n  startApp() {\r\n    const queryString = window.location.search;\r\n    let urlParams = new URLSearchParams(queryString);\r\n    if (urlParams.get(\"isMiner\") === \"true\") {\r\n      var controller: PageController = new StartController();\r\n    } else {\r\n      var controller: PageController = new RefferingController();\r\n    }\r\n    this.changeTo(controller);\r\n  }\r\n\r\n  /**\r\n   * @returns Gibt die Fassade zurück\r\n   */\r\n  getFacade() {\r\n    return this.facade;\r\n  }\r\n\r\n  /**\r\n   * @param ids Alle ids, zu denen man die Texte möchte.\r\n   * @returns Gibt alle texte zu den übergebenen ids zurück.\r\n   */\r\n  getMessage(messages: { text: string, id: number; }[]) {\r\n    let messageIDs: number[] = [];\r\n    for (let index = 0; index < messages.length; index++) {\r\n      messageIDs.push(messages[index].id);\r\n    }\r\n    let texts: string[] = [];\r\n    for (let index = 0; index < messages.length; index++) {\r\n      messages[index].text = texts[index];\r\n      return messages;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param languageCode Das Sprachkürzel als string.\r\n   * @returns Gibt true zurück falls der wechsel erfolgt ist, sonst false.\r\n   */\r\n  setLanguage(languageCode: string) {\r\n    let nextState: States;\r\n    let success = this.getFacade().setLanguage(languageCode);\r\n    if (success) {\r\n      nextState = States.NeedMessage;\r\n    } else {\r\n      nextState = States.LoadError;\r\n    }\r\n    return nextState;\r\n  }\r\n}\r\n","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\ReferringController.tsx",["270","271","272","273","274","275","276","277"],"import { Page } from \"../view/pages/PageInterface\";\r\nimport { IState, States } from \"../view/pages/State\";\r\nimport { PageController } from \"./PageController\";\r\nimport { MainController } from \"./MainController\";\r\nimport { DeliveryController } from \"./DeliveryController\";\r\nimport { VisualizationController } from \"./VisualizationController\";\r\nimport { ReferringPage } from \"../view/pages/ReferringPage/index\"\r\nimport { QRCode, ErrorCorrectLevel, QRNumber, QRAlphaNum, QR8BitByte, QRKanji } from 'qrcode-generator-ts/js';\r\nimport { ModelCreationPage } from \"../view/pages/ModelCreationPage\";\r\nimport { DeliveryPage } from \"../view/pages/DeliveryPage\";\r\n\r\n\r\nexport class RefferingController implements PageController {\r\n    private page: Page;\r\n    private state: IState;\r\n\r\n    /**\r\n     * Konstruktor des Seitenverwalters. Registriert sich als Beobachter auf seiner Seite und setzt den Start Status. \r\n     */\r\n    constructor() {\r\n        this.page = new ReferringPage({});\r\n        // this.page = new ModelCreationPage({});\r\n\r\n        this.page.attach(this);\r\n        this.state = this.page.getState();\r\n        this.update();\r\n    }\r\n\r\n    /**\r\n     * Die Update Methode des Seitenverwalters.\r\n     */\r\n    update() {\r\n        this.state = this.page.getState();\r\n        switch (this.state.currentState) {\r\n            case States.LoadProject:\r\n                this.loadProject();\r\n                break;\r\n            case States.NeedQRC:\r\n                this.createQR();\r\n                break;\r\n            case States.Register:\r\n                this.register();\r\n                break;\r\n            case States.Login:\r\n                this.login();\r\n                break;\r\n            case States.NewProjekt:\r\n                this.createNewProject();\r\n                break;\r\n            case States.LoadProject:\r\n                this.loadProject();\r\n                break;\r\n            case States.LoadModel:\r\n                this.loadModel();\r\n                break;\r\n            case States.SetLanguage:\r\n                this.page.setState(MainController.getInstance().setLanguage(this.state.languageCode));\r\n                break;\r\n            case States.NeedMessage:\r\n                this.page.setState(MainController.getInstance().getMessage(this.state.messages));\r\n                break;\r\n            case States.Register:\r\n                this.register();\r\n                break;\r\n            case States.ChangeToVisual:\r\n                MainController.getInstance().changeTo(new VisualizationController(this.state.currentProject!));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Logt den Benutzer ein\r\n     */\r\n    login() {\r\n        let adminData: { name: string, email: string, password: string; } = this.state.adminData!;\r\n        let loginSucess: Promise<boolean> = MainController.getInstance().getFacade().loginAdmin(adminData.email, adminData.password);\r\n        this.state.wait! = loginSucess\r\n        loginSucess.then((value: boolean) => {\r\n            if (value) {\r\n                let projectData: Promise<{ projectID: number; projectName: string; AIModelID: number[]; }[]> = MainController.getInstance().getFacade().getProjectMetas();\r\n                projectData.then((data: { projectID: number; projectName: string; AIModelID: number[]; }[]) => {\r\n                    this.state.projectData! = data;\r\n                });\r\n\r\n            } else {\r\n                this.state.currentState = States.LoginFail;\r\n            }\r\n        });\r\n        loginSucess.catch((value: boolean) => {\r\n            console.log(value)\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Registriert den Benutzer\r\n     */\r\n    register() {\r\n        let adminData: { name: string, email: string, password: string; } = this.state.adminData!;\r\n        let loginSucess: Promise<boolean> = MainController.getInstance().getFacade().registerAdmin(adminData.name, adminData.email, adminData.password);\r\n        loginSucess.then((value: boolean) => {\r\n            if (!value) {\r\n                this.state.currentState = States.LoginFail;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Erstellt ein QRCode und übergibt in an die Seite\r\n     */\r\n    createQR() {\r\n        const url = new URL(document.URL);\r\n        url.searchParams.append(\"SessionID\", MainController.getInstance().getFacade().getSessionID().toString());\r\n        let link: string = url.toString();\r\n        var qr = new QRCode();\r\n        qr.setTypeNumber(5);\r\n        qr.setErrorCorrectLevel(ErrorCorrectLevel.L);\r\n        qr.addData(link);\r\n        qr.make();\r\n        this.state.qr = qr.toDataURL();\r\n        this.state.currentState = States.SetQRC;\r\n    }\r\n\r\n    /**\r\n     * Erstelle ein neues Projekt, welches auch als momentanes Projekt gesetzt wird.\r\n     */\r\n    createNewProject() {\r\n        let sucess: Promise<boolean> = MainController.getInstance().getFacade().createProject(this.state.currentProject!.projectName);\r\n        sucess.then((value: boolean) => {\r\n            if (value) {\r\n                this.state.currentState = States.NeedQRC;\r\n            } else {\r\n                this.state.currentState = States.LoadError;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Setzt ein Projekt als momentanes Projekt\r\n     */\r\n    loadProject() {\r\n        let projectId: number = this.state.currentProject!.projectID!;\r\n        let sucess: Promise<boolean> = MainController.getInstance().getFacade().loadProject(projectId);\r\n        sucess.then((value: boolean) => {\r\n            if (value) {\r\n                this.state.currentState = States.NeedQRC;\r\n            } else {\r\n                this.state.currentState = States.LoadError;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Läde ein Modell und wechselt zur delivery Seite\r\n     */\r\n    loadModel() {\r\n        let projectId: number = this.state.currentProject!.projectID;\r\n        let sucess: Promise<boolean> = MainController.getInstance().getFacade().loadProject(projectId);\r\n        sucess.then((value: boolean) => {\r\n            if (value) {\r\n                let deliveryConroller: DeliveryController = new DeliveryController(this.state.currentProject!);\r\n                MainController.getInstance().changeTo(deliveryConroller);\r\n            } else {\r\n                this.state.currentState = States.LoadError;\r\n            }\r\n        });\r\n    }\r\n}","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\StartController.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Facade.tsx",["278","279","280"],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\State.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\VisualizationController.tsx",["281"],"import { PageController } from \"./PageController\";\r\nimport { VisualizationPage } from \"../view/pages/VisualizationPage/index\";\r\nimport { MainController } from \"./MainController\";\r\nimport { ModelCreationController } from \"./ModelCreationController\";\r\nimport { Page } from \"../view/pages/PageInterface\";\r\nimport { IState, States } from \"../view/pages/State\";\r\nimport { State } from \"../view/pages/DeliveryPage/State\";\r\n\r\nexport class VisualizationController implements PageController {\r\n    private page: Page;\r\n    private state: IState;\r\n\r\n    /**\r\n     * Konstruktor des Seitenverwalters. Registriert sich als Beobachter auf seiner Seite und setzt den start Status.\r\n     * Dieser Seitenverwalter benötigt einen SensorManager, welcher schon initilisiert wurde. \r\n     */\r\n    constructor(currentProjekt: { projectID: number, projectName: string, choosenAIModelID: number; }) {\r\n        this.page = new VisualizationPage({});\r\n        this.page.attach(this);\r\n        this.state = this.page.getState()\r\n        this.state.currentProject = currentProjekt\r\n        this.page.setState(this.state)\r\n    }\r\n\r\n    /**\r\n     * Die Update Methode des Seitenverwalters.\r\n     */\r\n    update() {\r\n        this.state = this.page.getState();\r\n        switch (this.state.currentState) {\r\n            case States.NeedMessage:\r\n                this.page.setState(MainController.getInstance().getMessage(this.state.messages));\r\n                break;\r\n            case States.ChangeToCreation:\r\n                MainController.getInstance().changeTo(new ModelCreationController())\r\n                break;\r\n            case States.ChangeLabel:\r\n                this.changeDataLabel();\r\n                break;\r\n            case States.NewLabel:\r\n                this.newDataLabel();\r\n                break;\r\n            case States.DeleteDataLabel:\r\n                this.deleteDataLabel();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    SetDataRows() {\r\n        let data = [this.state.dataSets!]//MainController.getInstance().getFacade().getMinerData();\r\n        for (let index = 0; index < data.length; index++) {\r\n            this.state.dataSets! = data[index];\r\n            this.state.currentState = States.SetDataRows\r\n            this.page.setState(this.state)\r\n        }\r\n    }\r\n\r\n    alertConnectionError() {\r\n        this.state.currentState = States.LoadError\r\n        this.page.setState(this.state)\r\n    }\r\n\r\n    /**\r\n     * Ändert die Einstellungen eines DatenLabels gemäß den Änderungen aus der momentanen Seite.\r\n     */\r\n    private changeDataLabel() {\r\n        let label = this.state.currentLabel!\r\n        MainController.getInstance().getFacade().setLabel(label.labelID, {start: label.start, end: label.end}, label.name);\r\n    }\r\n\r\n    /**\r\n     * Erstellt ein neues Datenlabel. Dafür werden die neuen Daten des Labels aus der momentanene Seite an das\r\n     * Modell geleitet. Die ID des neuen Labels wird darauf an die momentane Seite übergeben.\r\n     */\r\n    private newDataLabel() {\r\n        let label = this.state.currentLabel!\r\n        //label.labelID = MainController.getInstance().getFacade().creatLabel(label.start, label.end);\r\n        this.state.currentLabel! = label\r\n    }\r\n\r\n    /**\r\n     * Löscht das Label welches gemäß der Methode getDeleteLabelID von der momentanen Seite angegeben wurde.\r\n     */\r\n    private deleteDataLabel() {\r\n        //MainController.getInstance().getFacade().deleteLabel(this.state.currentLabel!.labelID);\r\n    }\r\n}","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\DeliveryController.tsx",["282","283"],"import { PageController } from \"./PageController\";\r\nimport { MainController } from \"./MainController\";\r\nimport { Page } from \"../view/pages/PageInterface\";\r\nimport { IState, States } from \"../view/pages/State\";\r\nimport { DeliveryPage } from \"../view/pages/DeliveryPage/index\";\r\n\r\nexport class DeliveryController implements PageController {\r\n\r\n    private page: Page;\r\n    private state: IState;\r\n\r\n    /**\r\n    * Konstruktor des Seitenverwalters. Registriert sich als Beobachter auf seiner Seite und setzt den start Status.\r\n    * @param currentProject Die momentanen Projectdaten für welches man ein Model ausliefern möchte. \r\n    */\r\n    constructor(currentProject: { projectID: number, projectName: string, choosenAIModelID: number; }) {\r\n        this.page = new DeliveryPage({});\r\n        this.page.attach(this);\r\n        this.state = this.page.getState()\r\n        this.state.currentProject = currentProject\r\n        this.page.setState(this.state)\r\n    }\r\n\r\n    /**\r\n    * Die Update Methode des Seitenverwalters.\r\n    */\r\n    update() {\r\n        this.state = this.page.getState();\r\n        switch (this.state.currentState) {\r\n            case States.DeliverWeb:\r\n                this.deliverAsWebApp();\r\n                break;\r\n            case States.NeedMessage:\r\n                this.page.setState(MainController.getInstance().getMessage(this.state.messages));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Holt sich aus dem Status alle angegebene Email-Adressen und gibt diese mit Daten zum Projekt an die Fassade welche eine Email an alle Adressen sendet.\r\n    * Der Inhalt der Email gibt zugriff auf das Modell zur klassifizierung.\r\n    */\r\n    deliverAsWebApp() {\r\n        //let emails: string[] = this.state.currentMail;\r\n        let emails: string[] = [\"Darius.Seiter@outlook.com\"]\r\n        //let text: string = MainController.getInstance().getFacade().getDeliverText();\r\n        let text: string = \"TEST\"\r\n        for (let index = 0; index < emails.length; index++) {\r\n            const element: string = emails[index];\r\n            //MainController.getInstance().getFacade().sendMail(element, this.state.currentProject);\r\n        }\r\n    }\r\n\r\n    deliverAsExe() {\r\n        //todo in Quality Controll\r\n    }\r\n}","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DatabaseConnector.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Language.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\User.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\DataCollectionController.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\SensorManager.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\index.tsx",["284","285","286","287","288","289","290","291","292","293","294","295","296","297","298"],"import React, { Component } from 'react';\r\nimport PubSub from 'pubsub-js';\r\nimport ConstantsText from '../../components/ReferringComponents/ConstantsText';\r\nimport NewProjectButton from '../../components/ReferringComponents/NewProjectButton';\r\nimport LoadModelButton from '../../components/ReferringComponents/LoadModelButton';\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from 'react-dom';\r\nimport { States } from '../State';\r\nimport LoginWindow from '../../components/ReferringComponents/LoginWindow';\r\n\r\ntype Props = {\r\n\r\n};\r\n\r\nexport class ReferringPage extends React.Component<Props, State> implements Page {\r\n\r\n    state = new State();\r\n    observers: PageController[] = [];\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        const VDOM = (\r\n            <div>\r\n                <ConstantsText />\r\n                <LoginWindow />\r\n                <NewProjectButton />\r\n                <LoadModelButton />\r\n            </div>\r\n        );\r\n        ReactDOM.render(VDOM, document.getElementById('root'));\r\n        this.createNewProject()\r\n        this.register()\r\n        this.login()\r\n        this.getmodellist()\r\n        this.loadproject()\r\n        this.changetovisu()\r\n        this.loadmodel()\r\n    }\r\n\r\n    attach(observer: PageController) {\r\n        this.observers.push(observer);\r\n    }\r\n\r\n    detach(observer: PageController) {\r\n        const index = this.observers.indexOf(observer, 0);\r\n        if (index > -1) {\r\n            this.observers.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    notify() {\r\n        for (let index = 0; index < this.observers.length; index++) {\r\n            const element = this.observers[index];\r\n            element.update();\r\n        }\r\n    }\r\n\r\n    getState() {\r\n        return this.state;\r\n    }\r\n\r\n    createNewProject() {\r\n        PubSub.subscribe('createnewproject', (_msg: any, data: string) => {\r\n            // console.log(this.state.currentState)\r\n            this.state.currentState = States.NewProjekt;\r\n            this.state.currentProject = { projectID: -10000, projectName: data, choosenAIModelID: -10000 }\r\n            //hier notifty for createnewProject\r\n            this.notify()\r\n            //notify for needqr\r\n            this.notify()\r\n            PubSub.publish('getqr', this.state.qr)\r\n        })\r\n    }\r\n\r\n    register() {\r\n        PubSub.subscribe('register', (_msg: any, data: { name: string, email: string, password: string; }) => {\r\n            // console.log(this.state.currentState)\r\n            this.state.adminData = data\r\n            this.state.currentState = States.Register\r\n            //this.setState({ adminData: data })\r\n            //this.setState({ currentState: States.Register })\r\n            //console.log(this.state.currentState)\r\n            this.notify()\r\n            //console.log(this.state.currentState)\r\n            let flag: boolean\r\n            if (this.state.currentState != States.Register) {\r\n                flag = false\r\n            } else {\r\n                PubSub.publish('disabled', false)\r\n                flag = true\r\n            }\r\n            PubSub.publish('registerstatus', flag)\r\n        })\r\n    }\r\n\r\n    login() {\r\n        PubSub.subscribe('login', (_msg: any, data: { name: string, email: string, password: string; }) => {\r\n            // console.log(this.state.currentState)\r\n            this.state.adminData = data\r\n            this.state.currentState = States.Login\r\n            this.notify()\r\n            let flag: boolean\r\n            this.state.wait!.then(() => {\r\n                if (this.state.currentState as States === States.LoginFail as States) {\r\n                    flag = false\r\n                } else {\r\n                    flag = true\r\n                    PubSub.publish('disabled', false)\r\n                    PubSub.publish('getprojectlist', this.state.projectData)\r\n                }\r\n                PubSub.publish('loginstatus', flag)\r\n            })\r\n        })\r\n    }\r\n\r\n    getmodellist() {\r\n        PubSub.subscribe('needmodellist', (_msg: any, data: { projectID: number, projectName: string, AIModelID: number[]; }) => {\r\n            // console.log(this.state.currentState)\r\n            this.state.currentState = States.LoadProject\r\n            this.state.currentProject = { projectID: data.projectID, projectName: data.projectName, choosenAIModelID: -10000 }\r\n            //console.log(this.state.currentState)\r\n            this.notify()\r\n            //console.log(this.state.currentState)\r\n            PubSub.publish('getmodellist', this.state.projectData)\r\n\r\n        })\r\n    }\r\n\r\n    loadproject() {\r\n        PubSub.subscribe('loadproject', (_msg: any, data: { projectID: number, projectName: string, choosenAIModelID: number; }) => {\r\n            this.state.currentProject = { projectID: data.projectID, projectName: data.projectName, choosenAIModelID: -10000 }\r\n            this.state.currentState = States.NeedQRC\r\n            this.notify()\r\n            PubSub.publish('getqr', this.state.qr)\r\n        })\r\n    }\r\n    changetovisu() {\r\n        PubSub.subscribe('changetovisu', (_msg: any) => {\r\n            this.state.currentState = States.ChangeToVisual\r\n            this.notify()\r\n        })\r\n    }\r\n\r\n    loadmodel() {\r\n        PubSub.subscribe('loadmodel', (_msg: any, data: { projectID: number, projectName: string, choosenAIModelID: number; }) => {\r\n            this.state.currentProject = data\r\n            this.state.currentState = States.LoadModel\r\n            this.notify()\r\n        })\r\n    }\r\n}\r\n","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\AIBuilder.tsx",["299","300","301"],"import { findAllByPlaceholderText } from \"@testing-library/react\";\r\n\r\n/**\r\n * Diese Klasse verwaltet die Interaktion mit dem Python-Backend und die zugehörige Kommunikation.\r\n * Sie ist verantwortlich für den Bau von KI-Modellen und für die Ausführung derselben.\r\n */\r\nexport class AIBuilder {\r\n    private modelId: number;\r\n    private static readonly url: string = \"python/\";\r\n    private static readonly buildModel: string = \"buildModel.php\";\r\n    private static readonly classify: string = \"classify.php\";\r\n\r\n    /**\r\n     * Erstellt den AIBuilder und übergibt ihm die ID des zu bearbeitenden Modells.\r\n     * @param modelId Die ID des zu erstellenden oder zu verwendenden Modells\r\n     */\r\n    constructor(modelId: number) {\r\n        this.modelId = modelId;\r\n    }\r\n\r\n    /**\r\n     * Ruft die Python-Schnittstelle auf dem Server auf, um ein KI-Modell zu erstellen und zu trainieren.\r\n     * @param modelData Sämtliche relevanten Daten, um das gewünschte KI-Modell erstellen zu können.\r\n     * Diese müssen das folgende Format haben, wenn zu JSON gepackt:\r\n     * ```\r\n     * {\r\n     *     \"sensors\": [\r\n     *         \"sensorname#i\"\r\n     *     ],\r\n     *     \"dataSets\": [\r\n     *         42\r\n     *     ],\r\n     *     \"classifier\": \"Classifier\",\r\n     *     \"scaler\": \"Scaler\",\r\n     *     \"features\": [\r\n     *         \"featurename#13\"\r\n     *     ],\r\n     *     \"trainingDataPercentage\": 0.8, // optional\r\n     *     \"slidingWindowSize\": 128,      // optional\r\n     *     \"slidingWindowStep\": 64        // optional\r\n     * }\r\n     * ```\r\n     * Die Reihenfolge ist unwichtig.\r\n     */\r\n    applyModel(modelData: { sensors: number[], dataSets: number[], classifier: string, scaler: string, features: string[], trainingDataPercentage?: number, slidingWindowSize?: number, slidingWindowStep?: number;}): void {\r\n        this.sendRequest(JSON.stringify(modelData), AIBuilder.url + AIBuilder.buildModel, console.log);\r\n    }\r\n\r\n    /**\r\n     * Diese Methode ruft die Python-Schnittstelle auf dem Server auf, um ein KI-Modell einen Datensatz klassifizieren zu lassen.\r\n     * @param dataSetId Die ID des Datensatzes, den das KI-Modell klassifizieren soll.\r\n     * @param callBack Eine Rückmelde-Funktion des \"aufrufenden\" Controllers, mit der das Ergebnis der Klassifizierung an den Controller zurückgegeben wird.\r\n     */\r\n    classify(dataSetId: number, callBack: <R = unknown>(prediction: string | object) => R): void {\r\n        let requestData: string = JSON.stringify({ \"classifier\": this.modelId, \"dataSet\": dataSetId });\r\n        this.sendRequest(requestData, AIBuilder.url + AIBuilder.classify, callBack);\r\n    }\r\n\r\n    /**\r\n     * Diese private Methode fässt den Versandprozess der Subanfrage an den Anwendungsserver zusammen.\r\n     * @param requestData Die mit der Anfrage zu versendenden Daten. Hat gültiges JSON zu sein, außer plainText ist gesetzt.\r\n     * @param url Die Adresse, an die die Anfrage gestellt wird. Am besten was auf demselben Server, ansonsten bekommt der Browser nen Kasper.\r\n     * @param successAction Eine Funktion, die bei erfolgreicher Durchführung der Anfrage auszuführen ist.\r\n     * @param plainText Gibt an, dass die Daten als Plaintext zu versenden sind.\r\n     */\r\n    private sendRequest(requestData: string, url: string, successAction: <R = unknown>(param: string | object) => R, plainText: boolean = false) {\r\n        let xhr = new XMLHttpRequest(); // XHR ist kurz für XmlHttpRequest\r\n        xhr.open(\"POST\", url, true);\r\n        xhr.onreadystatechange = () => {\r\n            if (xhr.readyState == 4) {\r\n                if (xhr.status == 200) {\r\n                    var responseJSON: object | null;\r\n                    try {\r\n                        responseJSON = JSON.parse(xhr.responseText);\r\n                    }\r\n                    catch (e) {\r\n                        responseJSON = null;\r\n                    }\r\n                    if (responseJSON == null) {\r\n                        successAction(xhr.responseText);\r\n                    }\r\n                    else {\r\n                        successAction(responseJSON);\r\n                    }\r\n                }\r\n                else {\r\n                    xhr.send(requestData);\r\n                }\r\n            }\r\n        };\r\n        if (!plainText) {\r\n            xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n        }\r\n        xhr.send(requestData);\r\n    }\r\n}\r\n","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Sensor.tsx",["302"],"import { MainController } from \"../controller/MainController\";\r\n\r\n//Die abstrakte Klasse Sensor liefert den Bauplan und die gemeinsame Funktionalität aller Sensoren.\r\nexport abstract class SensorData {\r\n  id: number; //Dieses Feld enthält die laufende Nummer des Sensors, diese ist in Device eindeutig und ist Konstant.\r\n  abstract SensorTypeID: number; //Dies ist die global eindeutige ID für die Sensorart\r\n  MACADDRESS: string; //Ist die MAC-adresse des Gerätes um es später wieder zuweisen zu können\r\n  deviceName: string; //Der Name vom Erfassungsgerät\r\n  //abstract sensor: Sensor;\r\n\r\n  constructor(id: number, MACADDRESS: string, deviceName: string) {\r\n    this.id = id;\r\n    this.MACADDRESS = MACADDRESS;\r\n    this.deviceName = deviceName;\r\n  }\r\n\r\n  getSensorData(): { id: number, SensorTypeID: number, MACADDRESS: string, deviceName: string; } {\r\n    return { id: this.id, SensorTypeID: this.SensorTypeID, MACADDRESS: this.MACADDRESS, deviceName: this.deviceName };\r\n  }\r\n\r\n  //nur anti error!\r\n  getCurrentValue(): number {\r\n    return -1;\r\n  }\r\n}\r\n\r\n//Diese Klasse ist eine Unterklasse von der abstrakten Klasse SensorData und ist für die Sensoren der Kategorie Beschleunigungssensor bestimmt\r\nexport class AccelerometerData extends SensorData {\r\n  SensorTypeID: number = 4;\r\n  sensor: Accelerometer;\r\n\r\n  //Dies ist der Konstruktor und nimmt eine eindeutige Sensor-ID entgegen\r\n  constructor(id: number, macaddress: string, deviceName: string) {\r\n    super(id, macaddress, deviceName);\r\n    this.sensor = new Accelerometer({ frequency: 60 });\r\n    this.sensor.addEventListener('reading', e => {\r\n      console.log(\"Magnetic field along the X-axis \" + this.sensor.x);\r\n      console.log(\"Magnetic field along the Y-axis \" + this.sensor.y);\r\n      console.log(\"Magnetic field along the Z-axis \" + this.sensor.z);\r\n    });\r\n    this.sensor.start();\r\n  }\r\n\r\n  /*\r\n    start() {\r\n      window.addEventListener(\"devicemotion\", this.handleMotionEvent, true);\r\n  \r\n    }\r\n  \r\n    handleMotionEvent(event: any) {\r\n      var x = event.accelerationIncludingGravity.x;\r\n      var y = event.accelerationIncludingGravity.y;\r\n      var z = event.accelerationIncludingGravity.z;\r\n      console.log(x, y, z);\r\n  \r\n      // Do something awesome.\r\n    }*/\r\n}\r\n\r\n//Diese Klasse ist eine Unterklasse von der abstrakten Klasse SensorData und ist für die Sensoren der Kategorie Kreiselinstrument bestimmt.\r\nexport class GyroscopeData extends SensorData {\r\n  SensorTypeID: number = 3;\r\n  sensor: Gyroscope;\r\n\r\n  //Dies ist der Konstruktor und nimmt eine eindeutige Sensor-ID entgegen\r\n  constructor(id: number, macaddress: string, deviceName: string) {\r\n    super(id, macaddress, deviceName);\r\n    this.sensor = new Gyroscope({ frequency: 1000 });\r\n  }\r\n}\r\n\r\nexport class MagnetometerData extends SensorData {\r\n  SensorTypeID: number = 4;\r\n  sensor: Magnetometer;\r\n\r\n  //Dies ist der Konstruktor und nimmt eine eindeutige Sensor-ID entgegen\r\n  constructor(id: number, macaddress: string, deviceName: string) {\r\n    super(id, macaddress, deviceName);\r\n    this.sensor = new Magnetometer({ frequency: 1000 });\r\n    this.sensor.addEventListener('reading', e => {\r\n      console.log(\"Magnetic field along the X-axis \" + this.sensor.x);\r\n      console.log(\"Magnetic field along the Y-axis \" + this.sensor.y);\r\n      console.log(\"Magnetic field along the Z-axis \" + this.sensor.z);\r\n    });\r\n    this.sensor.start();\r\n  }\r\n}\r\n/*\r\nexport class Microphone extends SensorData {\r\n  option: { audio: boolean, video: boolean; } = { audio: true, video: false };\r\n\r\n  start() {\r\n    if (navigator.mediaDevices === undefined) {\r\n      navigator.mediaDevices = {};\r\n      navigator.mediaDevices.getUserMedia = function (constraintObj) {\r\n        let getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\r\n        if (!getUserMedia) {\r\n          return Promise.reject(new Error('getUserMedia is not implemented in this browser'));\r\n        }\r\n        return new Promise(function (resolve, reject) {\r\n          getUserMedia.call(navigator, constraintObj, resolve, reject);\r\n        });\r\n      };\r\n    } else {\r\n      navigator.mediaDevices.enumerateDevices()\r\n        .then(devices => {\r\n          devices.forEach(device => {\r\n            console.log(device.kind.toUpperCase(), device.label);\r\n            //, device.deviceId\r\n          });\r\n        })\r\n        .catch(err => {\r\n          console.log(err.name, err.message);\r\n        });\r\n    }\r\n    navigator.mediaDevices.getUserMedia(this.option)\r\n      .then(function (mediaStreamObj) {\r\n        //connect the media stream to the first video element\r\n        let video = document.querySelector('video');\r\n        if (\"srcObject\" in video) {\r\n          video.srcObject = mediaStreamObj;\r\n        } else {\r\n          //old version\r\n          video.src = window.URL.createObjectURL(mediaStreamObj);\r\n        }\r\n\r\n        video.onloadedmetadata = function (ev) {\r\n          //show in the video element what is being captured by the webcam\r\n          video.play();\r\n        };\r\n\r\n        //add listeners for saving video/audio\r\n        let start = document.getElementById('btnStart');\r\n        let stop = document.getElementById('btnStop');\r\n        let vidSave = document.getElementById('vid2');\r\n        let mediaRecorder = new MediaRecorder(mediaStreamObj);\r\n        let chunks = [];\r\n\r\n        start.addEventListener('click', (ev) => {\r\n          mediaRecorder.start();\r\n          console.log(mediaRecorder.state);\r\n        });\r\n        stop.addEventListener('click', (ev) => {\r\n          mediaRecorder.stop();\r\n          console.log(mediaRecorder.state);\r\n        });\r\n        mediaRecorder.ondataavailable = function (ev) {\r\n          chunks.push(ev.data);\r\n        };\r\n        mediaRecorder.onstop = (ev) => {\r\n          let blob = new Blob(chunks, { 'type': 'video/mp4;' });\r\n          chunks = [];\r\n          let videoURL = window.URL.createObjectURL(blob);\r\n          vidSave.src = videoURL;\r\n        };\r\n      })\r\n      .catch(function (err) {\r\n        console.log(err.name, err.message);\r\n      });\r\n  }\r\n}\r\n\r\n*/\r\n//ToDo microphone + permisssion + Licences\r\n\r\n//https://www.youtube.com/watch?v=K6L38xk2rkk video für microphone/ erklärung für getUserMedia und MediaRecorder (damit kann man mikrofon und Kamera aufnehmen)\r\n//https://developer.mozilla.org/en-US/docs/Web/API/MediaStream_Recording_API/Recording_a_media_element\r\n\r\n\r\n/*\r\n\"accelerometer\",\r\n\"gyroscope\",\r\n\"magnetometer\",\r\n\"camera\",\r\n\"microphone\",\r\n*/","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\index.tsx",["303","304"],"import React, { Component } from 'react';\r\nimport PubSub from 'pubsub-js';\r\nimport Title from '../../components/StartComponents/Title';\r\nimport Input from '../../components/StartComponents/Input';\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from 'react-dom';\r\nimport { States } from '../State';\r\n\r\ntype Props = {\r\n\r\n};\r\n\r\nexport class StartPage extends React.Component<Props, State> implements Page {\r\n    state = new State();\r\n    observers: PageController[] = [];\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.setAvailableSensors();\r\n        this.changeSettings();\r\n        const VDOM = (\r\n            <div>\r\n                <Title />\r\n                <Input />\r\n            </div>\r\n        );\r\n        ReactDOM.render(VDOM, document.getElementById('root'));\r\n    }\r\n\r\n    setAvailableSensors() {\r\n        PubSub.publish('setAvailableSensors', (\r\n            this.state.recordingSettings.availableSensorTypes));\r\n    }\r\n\r\n    /**\r\n     * Prüft ob der Nutzer \"Start\" druckt und ändert den Zustand.\r\n     */\r\n    changeSettings() {\r\n        PubSub.subscribe('settingsFinish', (data: {\r\n            newDataSetName: string,\r\n            usedSensorTypes: number[],\r\n            waitTime: number,\r\n            readTime: number,\r\n            availableSensorTypes: { sensorTypID: number, sensorType: string, chosen: boolean; }[];\r\n        }) => {\r\n            this.setState({ recordingSettings: data });\r\n            this.state.currentState = States.ChangeToDataCollection;\r\n            this.notify();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Die Methoden für Beobachtermuster\r\n     * @param observer Beobachter,nähmlich Controller\r\n     */\r\n    attach(observer: PageController) {\r\n        this.observers.push(observer);\r\n    }\r\n\r\n    detach(observer: PageController) {\r\n        const index = this.observers.indexOf(observer, 0);\r\n        if (index > -1) {\r\n            this.observers.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    notify() {\r\n        for (let index = 0; index < this.observers.length; index++) {\r\n            const element = this.observers[index];\r\n            element.update();\r\n        }\r\n    }\r\n\r\n    getState() {\r\n        return this.state;\r\n    }\r\n\r\n}\r\n","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\ModelCreationController.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Project.tsx",["305"],"import { AIModel } from \"./AIModel\";\r\nimport { DataSet } from \"./DataSet\";\r\nimport { SensorData } from \"./Sensor\";\r\nimport { Session } from \"./Session\";\r\nimport { Admin } from \"./User\";\r\n\r\n/**\r\n * Diese Klasse speichert alle Informationen zu einem Projekt.\r\n * Ein Projekt beinhaltet aufgezeichnete Datensätze (DataSet) sowie Informationen zu den Datensätzen.\r\n */\r\nexport class Project {\r\n  private id: number; //Die eindeutige Projekt ID\r\n  private name: string; //Der Name des Projektes\r\n  private session: Session; //Die Session in dem das Projekt arbeitet\r\n  private aiModel: AIModel[] = []; //Das AIModel von dem Projekt\r\n  private dataSet: DataSet[] = []; //Die Datensätze, die zu dem Projekt gehören\r\n  private currentDataSet?: DataSet; //Aktueller Datensatz\r\n\r\n  /**\r\n     * Eine bereits existierendes Projekt kann wie folgt in das Model geladen werden.\r\n     * @param projectID Die Projekt ID\r\n     * @param sessionID Die Session ID\r\n     * @param projectName Der Projektnamen\r\n     * @param admin Der Besitzer dieses Projekts für die Session\r\n     * @param aiModelID Die schon existierenden AIModel IDs\r\n     * @param dataSet Die schon existierenden Datensätze\r\n     */\r\n  constructor(projectID: number, sessionID: number, projectName: string, projectData?: {\r\n    aiModelID?: number[],\r\n    dataSet?: {\r\n      dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate: number,\r\n      dataRows: {\r\n        dataRowID: number, recordingStart: number,\r\n        dataRow: { value: number, relativeTime: number; }[];\r\n      }[],\r\n      label: { name: string, labelID: number, start: number, end: number; }[];\r\n    }[];\r\n  }) {\r\n    this.id = projectID;\r\n    this.name = projectName;\r\n    this.session = new Session(sessionID);\r\n    if (projectData != null) {\r\n      if (projectData.aiModelID != null) {\r\n        for (let i = 0; i < projectData.aiModelID.length; i++) {\r\n          this.aiModel.push(new AIModel(projectData.aiModelID[i]));\r\n        }\r\n      }\r\n      if (projectData.dataSet != null) {\r\n        for (let i = 0; i < projectData.dataSet.length; i++) {\r\n          this.dataSet.push(new DataSet(projectData.dataSet[i].dataRowSensors, projectData.dataSet[i].dataSetID, projectData.dataSet[i].dataSetName, projectData.dataSet[i].generateDate, projectData.dataSet[i].dataRows, projectData.dataSet[i].label));\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Gibt den Projektnamen zurück\r\n   */\r\n  getName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  /**\r\n   * Löscht den Datensatz mit der DatensatzID\r\n   * @param dataSetID die Datensatz ID\r\n   */\r\n  deleteDataSet(dataSetID: number): boolean {\r\n    for (let i = 0; i < this.dataSet.length; i++) {\r\n      if (this.dataSet[i].getID() === dataSetID) {\r\n        delete this.dataSet[i];\r\n        if (this.currentDataSet != null && this.currentDataSet.getID() === dataSetID) {\r\n          delete this.currentDataSet;\r\n        }\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Gibt die Projekt ID zurück.\r\n   */\r\n  getID(): number {\r\n    return this.id;\r\n  }\r\n\r\n\r\n  /**\r\n   * Erstellt einen neuen Datensatz und setzt diesen als aktuellen Datensatz.\r\n   * @param dataRowSensors die Sensoren, von denen die Daten ausgelesen werden\r\n   * @param dataSetID die eindeutige Datensatz ID\r\n   * @param dataSetName der Datensatznamen\r\n   * @param generateDate die Erstellungszeit von dem Datensatz\r\n   */\r\n  createDataSet(dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate?: number): void {\r\n    var dataSet: DataSet = new DataSet(dataRowSensors, dataSetID, dataSetName, generateDate);\r\n    this.dataSet.push(dataSet);\r\n    this.currentDataSet = dataSet;\r\n  }\r\n\r\n  /**\r\n   * Gibt die aktuelle Datensatz ID zurück, falls diese nicht existiert wird -1 zurück gegeben\r\n   */\r\n  getCurrentDataSetID(): number {\r\n    if (this.currentDataSet != null) {\r\n      return this.currentDataSet.getID();\r\n    }\r\n    return -1;\r\n\r\n  }\r\n\r\n  /**\r\n   * Liest von dem aktuellen Datensatz neue Sensordaten von der Datenreihe mit der Datenreihen ID\r\n   * @param dataRowID die Datenreihen ID, von der die Daten ausgelesen werden sollen.\r\n   * @returns die gelesenen Daten von der Datenreihe. Falls die Datenreihe nicht existiert oder kein aktueller Datensatz existiert, sind die Daten leer.\r\n   */\r\n  readDataPoint(dataRowID: number): { dataPoint?: { value: number, relativeTime: number; }; } {\r\n    if (this.currentDataSet != null) {\r\n      return this.currentDataSet.readDataPoint(dataRowID);\r\n    }\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Gibt von allen Datensätzen Informationen zurück\r\n   * @returns dataSetID ist die DatensatzID und dataSetName ist der Datensatzname\r\n   */\r\n  getDataSetMetas(): { dataSetID: number, dataSetName: string; }[] {\r\n    var dataSetMetas: { dataSetID: number, dataSetName: string; }[] = [];\r\n    for (let i = 0; i < this.dataSet.length; i++) {\r\n      dataSetMetas.push({ dataSetID: this.dataSet[i].getID(), dataSetName: this.dataSet[i].getName() });\r\n    }\r\n    return dataSetMetas;\r\n  }\r\n\r\n  /**\r\n   * Gibt die Datenreihen der Datensatz ID zurück und setzt diesen Datensatz als aktuellen Datensatz\r\n   * @param dataSetID die Datensatz ID von der die Datenreihen gelesen werden sollen\r\n   * @returns die Sensordaten von der Datenreihe\r\n   */\r\n  getDataRows(dataSetID: number): { dataRows?: { value: number, relativeTime: number; }[][]; } {\r\n    for (let i = 0; i < this.dataSet.length; i++) {\r\n      if (this.dataSet[i].getID() === dataSetID) {\r\n        this.currentDataSet = this.dataSet[i];\r\n        return { dataRows: this.dataSet[i].getDataRows() };\r\n      }\r\n    }\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Gibt die Datenreihen der aktuellen Datenreihe zurück\r\n   * @returns die Sensordaten von der Datenreihe\r\n   */\r\n  getCurrentDataRows(): { dataRows?: { value: number, relativeTime: number; }[][]; } {\r\n    if (this.currentDataSet != null) {\r\n      return { dataRows: this.currentDataSet.getDataRows() };\r\n    }\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Gibt die Session ID zurück\r\n   */\r\n  getSessionID(): number {\r\n    return this.session.getId();\r\n  }\r\n\r\n  /**\r\n   * Setzt dem Label mit der übergebenen ID neue Werte.\r\n   * @param start Ist die neue Startzeit des Labels.\r\n   * @param end Ist die neue Endzeit des Labels.\r\n   * @param labelID Die Label ID, welche überarbeitet werden soll.\r\n   * @param labelName Ist bei Angabe der neue Name des Labels.\r\n   * @returns falls das Label nicht existiert oder es kein aktuellen Datensatz gibt wird false zurück gegeben\r\n   */\r\n  createLabel(labelID: number, span: { start: number, end: number; }, labelName: string): boolean {\r\n    if (this.currentDataSet != null) {\r\n      return this.currentDataSet.setLabel(labelID, span, labelName);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  setLabel(labelID: number, span: { start: number, end: number; }, labelName?: string): boolean {\r\n    if (this.currentDataSet != null) {\r\n      return this.currentDataSet.setLabel(labelID, span, labelName);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  deleteLabel(labelID: number): boolean {\r\n    if (this.currentDataSet != null) {\r\n      return this.currentDataSet.deleteLabel(labelID);\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gibt alle Daten von allen Labeln vom aktuellen Datensatz zurück.\r\n   * @returns leer, falls kein aktueller Datensatz existiert\r\n   */\r\n  getLabels(): { labels?: { name: string, id: number, start: number, end: number; }[]; } {\r\n    if (this.currentDataSet != null) {\r\n      return { labels: this.currentDataSet.getLabels() };\r\n    }\r\n    return {};\r\n  }\r\n}","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\index.tsx",["306","307","308","309","310","311"],"import React, { Component } from 'react'\r\nimport PubSub from 'pubsub-js';\r\nimport ImageList from '../../components/VisualizationComponents/ImageList'\r\nimport eximage1 from '../../images/exImage1.svg'\r\nimport './VisualizationPage.css'\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport { MainController } from '../../../controller/MainController';\r\nimport ReactDOM from 'react-dom';\r\nimport ShowImage from '../../components/VisualizationComponents/ShowImage';\r\nimport { States } from '../State';\r\nimport FinishButton from '../../components/VisualizationComponents/FinishButton';\r\n\r\ntype Props = {\r\n};\r\n\r\nexport class VisualizationPage extends React.Component<Props, State> implements Page {\r\n    state = new State()\r\n    observers: PageController[] = [];\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        const VDOM = (\r\n            <div className=\"visualizationpage\">\r\n                <ShowImage />\r\n                <ImageList />\r\n                <FinishButton />\r\n            </div>\r\n        );\r\n        ReactDOM.render(VDOM, document.getElementById('root'));\r\n        this.getimagelist()\r\n        this.changeimg()\r\n        this.changetonextpage()\r\n    }\r\n\r\n\r\n    attach(observer: PageController) {\r\n        this.observers.push(observer);\r\n    }\r\n\r\n    detach(observer: PageController) {\r\n        const index = this.observers.indexOf(observer, 0);\r\n        if (index > -1) {\r\n            this.observers.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    notify() {\r\n        for (let index = 0; index < this.observers.length; index++) {\r\n            const element = this.observers[index];\r\n            element.update();\r\n        }\r\n    }\r\n\r\n    getState() {\r\n        return this.state;\r\n    }\r\n\r\n    getimagelist() {\r\n        this.state.currentState = States.NeedImageList\r\n        this.notify()\r\n        PubSub.publish('getimagelist', this.state.imageList)\r\n    }\r\n    changeimg() {\r\n        PubSub.subscribe('changeimg', (_msg: any, data: string) => {\r\n            this.state.currentImg = data\r\n            //console.log(this.state.currentImg)\r\n        })\r\n    }\r\n    changetonextpage() {\r\n        PubSub.subscribe('changepage', (_msg: any) => {\r\n            this.state.currentState = States.ChangeToCreation\r\n            this.notify()\r\n\r\n        })\r\n    }\r\n}\r\n","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\index.tsx",["312","313","314","315"],"import React, { Component } from 'react';\r\nimport DownloadButton from '../../components/DeliveryComponents/DownloadButton';\r\nimport EmailList from '../../components/DeliveryComponents/EmailList';\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from 'react-dom';\r\nimport { States } from '../State';\r\n\r\ntype Props = {\r\n};\r\n\r\nexport class DeliveryPage extends React.Component<Props, State> implements Page {\r\n\r\n\tstate = new State();\r\n\tobservers: PageController[] = [];\r\n\tconstructor(props: Props) {\r\n\t\tsuper(props);\r\n\r\n\t\tconst VDOM = (\r\n\t\t\t<div className=\"deliverypage\">\r\n\t\t\t\t<EmailList />\r\n\t\t\t\t<DownloadButton />\r\n\t\t\t</div>\r\n\t\t);\r\n\t\tReactDOM.render(VDOM, document.getElementById('root'));\r\n\t\tthis.delivery()\r\n\t\tthis.download()\r\n\t}\r\n\r\n\tattach(observer: PageController) {\r\n\t\tthis.observers.push(observer);\r\n\t}\r\n\r\n\tdetach(observer: PageController) {\r\n\t\tconst index = this.observers.indexOf(observer, 0);\r\n\t\tif (index > -1) {\r\n\t\t\tthis.observers.splice(index, 1);\r\n\t\t}\r\n\t}\r\n\r\n\tnotify() {\r\n\t\tfor (let index = 0; index < this.observers.length; index++) {\r\n\t\t\tconst element = this.observers[index];\r\n\t\t\telement.update();\r\n\t\t}\r\n\t}\r\n\r\n\tgetState() {\r\n\t\treturn this.state;\r\n\t}\r\n\r\n\tdelivery() {\r\n\t\tPubSub.subscribe('delivery', (_msg: any, data: string[]) => {\r\n\t\t\tthis.state.currentState = States.DeliverWeb\r\n\t\t\tthis.state.chosenEmails = data\r\n\t\t\tthis.notify()\r\n\t\t})\r\n\t}\r\n\r\n\tdownload() {\r\n\t\tPubSub.subscribe('download', (_msg: any) => {\r\n\t\t\tthis.state.currentState = States.NeedDownload\r\n\t\t\tthis.notify()\r\n\t\t})\r\n\t}\r\n\r\n\r\n}\r\n","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\FinishController.tsx",["316"],"import { Page } from \"../view/pages/PageInterface\";\r\nimport { IState, States } from \"../view/pages/State\";\r\nimport { FinishPage } from \"../view/pages/FinishPage/index\";\r\n\r\nimport { ReferringPage } from \"../view/pages/ReferringPage/index\"\r\n\r\nimport { PageController } from \"./PageController\";\r\nimport { MainController } from \"./MainController\";\r\n\r\nexport class FinishController implements PageController {\r\n\r\n    private page: Page;\r\n    private state: IState;\r\n\r\n    /**\r\n     * Konstruktor des Seitenverwalters. Registriert sich als Beobachter auf seiner Seite und setzt den start Status. \r\n     */\r\n    constructor() {\r\n        this.page = new ReferringPage({});\r\n        this.page.attach(this);\r\n        this.state = this.page.getState();\r\n        this.state.dataRows! = MainController.getInstance().getFacade().getCurrentDataRows()!.dataRows!\r\n        this.page.setState(this.state)\r\n    }\r\n\r\n    /**\r\n     * Die Update Methode des Seitenverwalters.\r\n     */\r\n    update() {\r\n        this.state = this.page.getState().currenState;\r\n        switch (this.state.currentState) {\r\n            case States.NeedMessage:\r\n                this.page.setState(MainController.getInstance().getMessage(this.state.messages));\r\n                break;\r\n            case States.ChangeLabel:\r\n                this.changeDataLabel();\r\n                break;\r\n            case States.NewLabel:\r\n                this.newDataLabel();\r\n                break;\r\n            case States.DeleteDataLabel:\r\n                this.deleteDataLabel();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Ändert die Einstellungen eines DatenLabels gemäß den Änderungen aus der momentanen Seite.\r\n     */\r\n    private changeDataLabel() {\r\n        let label = this.state.currentLabel!\r\n        let sucess = MainController.getInstance().getFacade().setLabel(label.labelID, {start: label.start, end: label.end}, label.name);\r\n        sucess.then((value: boolean) => {\r\n            if(value) {\r\n                this.state.currentState = States.setLabel\r\n                this.page.setState(this.state)\r\n            } else {\r\n                this.state.currentState = States.LoadError\r\n                this.page.setState(this.state)\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Erstellt ein neues Datenlabel. Dafür werden die neuen Daten des Labels aus der momentanene Seite an das\r\n     * Modell geleitet. Die ID des neuen Labels wird darauf an die momentane Seite übergeben.\r\n     */\r\n    private newDataLabel() {\r\n        let start: number = this.state.currentLabel!.start\r\n        let end: number = this.state.currentLabel!.end\r\n        let name: string = this.state.currentLabel!.name\r\n        let promise: Promise<number> = MainController.getInstance().getFacade().createLabel({start , end}, name);\r\n        this.state.wait! = promise\r\n        promise.then((id: number) => {\r\n            this.state.currentLabel!.labelID = id\r\n            this.state.currentState = States.setLabel\r\n            this.page.setState(this.state)\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Löscht das Label welches gemäß der Methode getDeleteLabelID von der momentanen Seite angegeben wurde.\r\n     */\r\n    private deleteDataLabel() {\r\n        let sucess = MainController.getInstance().getFacade().deleteLabel(this.state.currentLabel!.labelID);\r\n        sucess.then((value: boolean) => {\r\n            if(value) {\r\n                this.state.currentState = States.setLabel\r\n                this.page.setState(this.state)\r\n            } else {\r\n                this.state.currentState = States.LoadError\r\n                this.page.setState(this.state)\r\n            }\r\n        })\r\n    }\r\n}","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\State.tsx",["317","318","319","320","321","322"],"import { IState } from \"../State\";\r\nimport { States } from \"../State\";\r\nimport { QRCode, ErrorCorrectLevel, QRNumber, QRAlphaNum, QR8BitByte, QRKanji } from 'qrcode-generator-ts/js';\r\n\r\nexport class State implements IState {\r\n  currentState: States = States.NeedMessage;\r\n  languageCode: string = \"de\";\r\n  messages: { text: string, id: number; }[] = [];\r\n  projectData?: { projectID: number; projectName: string; AIModelID: number[]; }[];\r\n  currentProject?: { projectID: number, projectName: string, choosenAIModelID: number; };\r\n  // chosenModel?: string;\r\n  adminData?: { name: string, email: string, password: string; };\r\n  //minerData?:\r\n  aiUserData?: { name: string, result: string; };\r\n  labels?: { labelID: number, start: number, end: number; }[];\r\n  sessionID?: string;\r\n  //aiParameter?: \r\n  qr?: string;\r\n  wait?: Promise<any>\r\n}\r\n","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\index.tsx",["323"],"import React from 'react';\r\nimport PubSub from 'pubsub-js';\r\nimport Title from '../../components/DataCollectionComponents/Title';\r\nimport Countdown from '../../components/DataCollectionComponents/Countdown';\r\nimport Diagram from '../../components/DataCollectionComponents/Diagram';\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from 'react-dom';\r\nimport { States } from '../State';\r\n\r\ntype Props = {\r\n};\r\n\r\nexport class DataCollectionPage extends React.Component<Props, State> implements Page {\r\n    state = new State;\r\n    observers: PageController[] = [];\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.finishCountdown();\r\n        const VDOM = (\r\n            <div>\r\n                <Title />\r\n                <Countdown />\r\n                <Diagram />\r\n            </div>\r\n        );\r\n        ReactDOM.render(VDOM, document.getElementById('root'));\r\n    }\r\n\r\n\r\n    /**\r\n     * Diese Methode braucht nur einmal aufzurufen, Countdown geht automatisch.\r\n     * @param countdownNumber Die Countdownzahl zu zeigen.\r\n     */\r\n    showCountdownNumber(leadTime: number) {\r\n        this.setState({ leadTime: leadTime });\r\n        PubSub.publish('startCounting', this.state.leadTime);\r\n    }\r\n\r\n    /**\r\n     * Prüft ob Countdown fertig ist und ändert den Zustand.\r\n     */\r\n    finishCountdown() {\r\n        PubSub.subscribe('finishCountdwon', () => {\r\n            this.setState({ currentState: States.NeedInstantDiagram });\r\n            this.notify();\r\n        }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Diese Methode sollte während Datenerfassung jede Sekunde von Controller aufgerufen werden, um Bild zu updaten.\r\n     * @param countdownNumber Die Countdownzahl zu zeigen\r\n     */\r\n    showDiagram(diagramSvg: string) {\r\n        this.setState({ diagramSvg: diagramSvg });\r\n        PubSub.publish('startDiagram', this.state.diagramSvg);\r\n    }\r\n\r\n    /**\r\n     * Die Methoden für Beobachtermuster\r\n     * @param observer Beobachter,nähmlich Controller\r\n     */\r\n    attach(observer: PageController) {\r\n        this.observers.push(observer);\r\n    }\r\n\r\n    detach(observer: PageController) {\r\n        const index = this.observers.indexOf(observer, 0);\r\n        if (index > -1) {\r\n            this.observers.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    notify() {\r\n        for (let index = 0; index < this.observers.length; index++) {\r\n            const element = this.observers[index];\r\n            element.update();\r\n        }\r\n    }\r\n\r\n    getState() {\r\n        return this.state;\r\n    }\r\n\r\n}","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\State.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\AIModel.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DataSet.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Session.tsx",["324"],"import { Admin, User } from \"./User\";\r\n\r\n/**\r\n * Diese Klasse Speichert die Session informationen\r\n */\r\nexport class Session {\r\n  private id: number; //Die eindeutige ID der Session\r\n  private connectedUser: User[] = []; //Die User die mit der Projekt der Session interagieren\r\n\r\n  /**\r\n   * Erstellt eine Session\r\n   * @param id Diese ID muss global eindeutig sein\r\n   * @param admin Der Admin, dem diese Session gehört\r\n   */\r\n  constructor(id: number) {\r\n    this.id = id;\r\n  }\r\n\r\n  /**\r\n   * Fügt eine User als Verbundener User zu der Session hinzu\r\n   * @param user Der User, der hinzugefügt wird\r\n   */\r\n  connectUser(user: User): void {\r\n    this.connectedUser.push(user);\r\n  }\r\n\r\n  /**\r\n   * Meldet einen User von der aktuellen Session ab\r\n   * @param user Der User, der abgemeldet werdern soll\r\n   */\r\n  disconnectUser(user: User): boolean {\r\n    for (let i = 0; i < this.connectedUser.length; i++) {\r\n      if (this.connectedUser[i].getID() === user.getID()) {\r\n        delete this.connectedUser[i];\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Gibt von allen verbundenen Usern die ID und den Namen zurück\r\n   */\r\n  getConnectedUsers(): { userID: number, userName: string; }[] {\r\n    var users: { userID: number, userName: string; }[] = [];\r\n    for (let i = 0; i < this.connectedUser.length; i++) {\r\n      users.push({ userID: this.connectedUser[i].getID(), userName: this.connectedUser[i].getName() });\r\n    }\r\n    return users;\r\n  }\r\n\r\n  /**\r\n   * Gibt die Session ID zurück\r\n   */\r\n  getId(): number {\r\n    return this.id;\r\n  }\r\n}","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\index.tsx",["325","326","327","328"],"import React, { Component } from 'react'\r\nimport PubSub from 'pubsub-js';\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from 'react-dom';\r\nimport './ModelCreationPage.css'\r\nimport { States } from '../State'\r\nimport Train from '../../components/ModelCreationComponents/Train';\r\n\r\ntype Props = {\r\n};\r\n\r\nexport class ModelCreationPage extends React.Component<Props, State> implements Page {\r\n\tstate = new State();\r\n\tobservers: PageController[] = [];\r\n\tconstructor(props: Props) {\r\n\t\tsuper(props);\r\n\r\n\t\tconst VDOM = (\r\n\t\t\t<div className=\"modelcreationpage\">\r\n\t\t\t\t<Train />\r\n\t\t\t</div>\r\n\t\t);\r\n\r\n\t\tReactDOM.render(VDOM, document.getElementById('root'));\r\n\t\tthis.needDatabaseList()\r\n\t\tthis.train()\r\n\t}\r\n\r\n\tattach(observer: PageController) {\r\n\t\tthis.observers.push(observer);\r\n\t}\r\n\r\n\tdetach(observer: PageController) {\r\n\t\tconst index = this.observers.indexOf(observer, 0);\r\n\t\tif (index > -1) {\r\n\t\t\tthis.observers.splice(index, 1);\r\n\t\t}\r\n\t}\r\n\r\n\tnotify() {\r\n\t\tfor (let index = 0; index < this.observers.length; index++) {\r\n\t\t\tconst element = this.observers[index];\r\n\t\t\telement.update();\r\n\t\t}\r\n\t}\r\n\r\n\tgetState() {\r\n\t\treturn this.state;\r\n\t}\r\n\r\n\tneedDatabaseList() {\r\n\t\tthis.state.currentState = States.NeedDatabaseList\r\n\t\tthis.notify()\r\n\t\tlet databaseList = [\r\n\t\t\t{ dataSetID: 1, dataSetName: 'dataset1' },\r\n\t\t\t{ dataSetID: 2, dataSetName: 'dataset2' },\r\n\t\t\t{ dataSetID: 3, dataSetName: 'dataset3' }\r\n\t\t]\r\n\t\tPubSub.publish('getlist', databaseList)\r\n\t\t//PubSub.publish('getlist', this.state.dataSets)\r\n\t}\r\n\r\n\ttrain() {\r\n\t\tPubSub.subscribe('train', (_msg: any, data: { dataSets: number[], imputations: string[], classifier: string, scaler: string, extractions: string[] }) => {\r\n\t\t\t//console.log(data);\r\n\t\t\tthis.state.currentState = States.NeedKiTraining\r\n\t\t\tthis.state.trainingParameter = data\r\n\t\t\t//console.log(this.state.trainingParameter);\r\n\t\t\tthis.notify()\r\n\t\t})\r\n\t}\r\n\r\n}\r\n","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\State.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\State.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\NewProjectButton\\index.tsx",["329","330"],"import React, { Component } from 'react';\r\nimport QRImage from '../QRImage';\r\nimport LinkText from '../LinkText';\r\nimport ChangeToVisuBtn from '../ChangeToVisuBtn';\r\nimport { useState } from 'react';\r\n\r\nexport default class NewProjectButton extends Component {\r\n\r\n\r\n  state = {\r\n    click: false,\r\n    projectName: '',\r\n    disabled: true\r\n  };\r\n\r\n  changeProjectName = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      projectName: e.target.value\r\n    });\r\n  };\r\n\r\n  handleCreate = () => {\r\n    this.setState({ click: true });\r\n    PubSub.publish('createnewproject', this.state.projectName)\r\n\r\n  };\r\n\r\n  componentDidMount() {\r\n    PubSub.subscribe('disabled', (_msg: any, value: boolean) => {\r\n      this.state.disabled = value\r\n      this.setState(this.state)\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input type=\"text\" value={this.state.projectName} onChange={this.changeProjectName} placeholder='Neuen Projektnamen eingeben' disabled={this.state.disabled} />\r\n        <button onClick={() => this.handleCreate()} className=\"newProject\" id=\"new\" disabled={this.state.disabled}>Neues Projekt</button>\r\n        {this.state.click ? <div> <QRImage /><ChangeToVisuBtn /><LinkText /></div> : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoadModelButton\\index.tsx",["331","332"],"import React, { Component } from 'react'\r\nimport ProjectList from '../ProjectList'\r\n\r\n\r\nexport default class LoadModelButton extends Component {\r\n  state = { click: false, disabled: true, }\r\n  handleCreate = () => {\r\n    this.state.click = true\r\n    this.setState(this.state)\r\n  }\r\n\r\n  componentDidMount() {\r\n    PubSub.subscribe('disabled', (_msg: any, value: boolean) => {\r\n      this.state.disabled = false\r\n      this.setState(this.state)\r\n    })\r\n\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button onClick={() => this.handleCreate()} className=\"btn\" disabled={this.state.disabled}>Projekt und Model Wählen</button>\r\n        {this.state.click ? <div><ProjectList /> </div> : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ConstantsText\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoginWindow\\index.tsx",["333","334","335"],"import React, { Component } from 'react';\r\nimport NewWindow from \"react-new-window\";\r\n\r\nexport default class LoginWindow extends Component {\r\n\r\n  state = {\r\n    openNewWindow: false,\r\n    username: '',\r\n    email: '',\r\n    password: '',\r\n  };\r\n\r\n  openNewWindow = () => {\r\n    this.setState({ openNewWindow: true });\r\n  };\r\n  changeUsername = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      username: e.target.value\r\n    });\r\n  };\r\n  changeEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      email: e.target.value\r\n    });\r\n  };\r\n  changePassword = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      password: e.target.value\r\n    });\r\n  };\r\n\r\n\r\n  register = () => {\r\n    this.setState({ openNewWindow: false });\r\n    /** mit controller weiter veraendern*/\r\n    var pattern = /^([A-Za-z0-9_\\-\\.])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z])+$/\r\n    if (!pattern.test(this.state.email)) {\r\n      alert('Sie müssen eine Emailadresse eingeben!');\r\n      return\r\n    } else {\r\n      PubSub.publish('register', { name: this.state.username, email: this.state.email, password: this.state.password })\r\n      PubSub.subscribe('registerstatus', (data: boolean) => {\r\n        if (data) {\r\n          PubSub.publish('login', { name: this.state.username, email: this.state.email, password: this.state.password })\r\n          PubSub.subscribe('loginstatus', (_msg: any, newdata: boolean) => {\r\n            if (newdata) {\r\n              alert('Register und Einloggen Erfolg!')\r\n            }\r\n          })\r\n        } else {\r\n          alert('Register Mißerfolg!')\r\n        }\r\n      })\r\n    }\r\n  }\r\n  login = () => {\r\n    /** nach submit newFenster schliessen */\r\n    this.setState({ openNewWindow: false });\r\n    /** mit controller weiter veraendern*/\r\n    PubSub.publish('login', { name: this.state.username, email: this.state.email, password: this.state.password })\r\n    PubSub.subscribe('loginstatus', (_msg: any, data: boolean) => {\r\n      if (data) {\r\n        alert('Einloggen Erfolg!')\r\n      } else {\r\n        alert('Einloggen Mißrfolg!')\r\n      }\r\n    })\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"login-button\">\r\n        <button onClick={this.openNewWindow}> Einloggen Fenster </button>\r\n        {this.state.openNewWindow && (\r\n          <NewWindow>\r\n            <div className=\"login-window\">\r\n              <form>\r\n                <label>\r\n                  <p>Benutzername</p>\r\n                  <input type=\"text\" value={this.state.username} onChange={this.changeUsername} />\r\n                </label>\r\n                <label>\r\n                  <p>Email</p>\r\n                  <input type=\"text\" value={this.state.email} onChange={this.changeEmail} />\r\n                </label>\r\n                <label>\r\n                  <p>Passwort</p>\r\n                  <input type=\"password\" value={this.state.password} onChange={this.changePassword} />\r\n                </label>\r\n                <div>\r\n                  <button onClick={this.register}>Registrieren</button>\r\n                  <button onClick={this.login}>Loggen ein</button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </NewWindow>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Title\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Input\\index.tsx",["336","337"],"import React, { Component } from \"react\";\r\nimport input from \"./index.module.css\";\r\n\r\nexport default class Input extends Component {\r\n  state = {\r\n    name: \"\",\r\n    usedSensorTypes: [] as number[],\r\n    leadTime: \"\",\r\n    collectionTime: \"\",\r\n    availableSensorTypes: [] as { sensorTypID: number, sensorType: string, chosen: boolean; }[]\r\n  };\r\n\r\n  setAvailableSensors() {\r\n    PubSub.subscribe('setAvailableSensors', (\r\n      data: { sensorTypID: number, sensorType: string, chosen: boolean; }[]\r\n    ) => {\r\n      this.setState({ availableSensorTypes: data });\r\n    });\r\n  }\r\n\r\n  changeLeadtime = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState(() => ({\r\n      leadTime: e.target.value,\r\n    }));\r\n  };\r\n  changeCollectionTime = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState(() => ({\r\n      collectionTime: e.target.value,\r\n    }));\r\n  };\r\n  changeSensors = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    this.setState(() => ({\r\n      chosenSensors: e.target.value,\r\n    }));\r\n  };\r\n  changeName = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState(() => ({\r\n      name: e.target.value,\r\n    }));\r\n  };\r\n\r\n  handleCheckBoxChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    let newAvailableSensorTypes = this.state.availableSensorTypes;\r\n    for (var i = 0; i < newAvailableSensorTypes.length; i++) {\r\n      if (newAvailableSensorTypes[i].sensorTypID == +e.target.value) {\r\n        newAvailableSensorTypes[i].chosen = !newAvailableSensorTypes[i].chosen;\r\n        this.setState({ availableSensorTypes: newAvailableSensorTypes, });\r\n        return;\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  submit = () => {\r\n    if (\r\n      parseInt(this.state.leadTime) <= 5 &&\r\n      parseInt(this.state.leadTime) >= 3 &&\r\n      parseInt(this.state.collectionTime) <= 10 &&\r\n      parseInt(this.state.collectionTime) >= 5\r\n    ) {\r\n      let availableSensorTypes = this.state.availableSensorTypes;\r\n      var usedSensorTypes: number[] = [];\r\n      for (var i = 0; i < availableSensorTypes.length; i++) {\r\n        if (availableSensorTypes[i].chosen == true) {\r\n          usedSensorTypes.push(availableSensorTypes[i].sensorTypID);\r\n        }\r\n      }\r\n      this.setState({ usedSensorTypes: usedSensorTypes });\r\n      PubSub.publish('settingsFinish', this.state);\r\n    } else {\r\n      alert(\"Deine Eingabe ist ungültig.\");\r\n    }\r\n  };\r\n\r\n  render() {\r\n    this.setAvailableSensors();\r\n    return (\r\n      <div className=\"input\">\r\n        <form>\r\n          Aufnahmeparameter einstellen\r\n          <br />\r\n          Vorlaufzeit:\r\n          <input\r\n            type=\"leadTime\"\r\n            value={this.state.leadTime}\r\n            onChange={this.changeLeadtime.bind(this)}\r\n          />\r\n          s<br />\r\n          Aufnahmedauer:\r\n          <input\r\n            type=\"collectionTime\"\r\n            value={this.state.collectionTime}\r\n            onChange={this.changeCollectionTime.bind(this)}\r\n          />\r\n          s<br />\r\n          Datenname:\r\n          <input\r\n            type=\"datenname\"\r\n            value={this.state.name}\r\n            onChange={this.changeName.bind(this)}\r\n          /><br />\r\n          Sensoren...\r\n          <ul className=\"todo-main\">\r\n            {\r\n              this.state.availableSensorTypes.map((type: { sensorTypID: number, sensorType: string, chosen: boolean; }) => {\r\n                return (<li key={type.sensorTypID}>\r\n                  <input\r\n                    type=\"checkbox\" value={type.sensorTypID} checked={type.chosen} onChange={(e) => this.handleCheckBoxChange(e)} />\r\n                  {type.sensorType}\r\n                </li>);\r\n              })\r\n            }\r\n          </ul>\r\n          <br />\r\n          <button type=\"button\" onClick={this.submit}>\r\n            Start\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\State.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Label.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DataRow.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\ImageList\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\FinishButton\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\ShowImage\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\DownloadButton\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\EmailList\\index.tsx",["338","339","340","341","342","343","344","345"],"import React, { Component } from 'react'\r\nimport { nanoid } from 'nanoid';\r\n\r\nexport default class EmailList extends Component {\r\n\tstate = {\r\n\t\tmouse: false,\r\n\t\taddButtonClick: false,\r\n\t\tinputempty: true,\r\n\t\tinputemail: {\r\n\t\t\tid: '',\r\n\t\t\taddress: '',\r\n\t\t\tchosen: false\r\n\t\t},\r\n\t\temails: [{\r\n\t\t\tid: 'example',\r\n\t\t\taddress: 'xxxxx@xxx.xx(Beispiel, nach erstmal Addieren automatisch gelöscht)',\r\n\t\t\tchosen: false\r\n\t\t}]\r\n\t}\r\n\r\n\thandleCreate = () => {\r\n\t\tthis.setState({ addButtonClick: true });\r\n\t};\r\n\r\n\tinputchange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\tif (e.target.value == '') {\r\n\t\t\tthis.setState({ inputempty: true })\r\n\t\t} else {\r\n\t\t\tthis.setState({ inputemail: { id: nanoid(), address: e.target.value, chosen: false }, inputempty: false })\r\n\t\t}\r\n\r\n\t}\r\n\thandleKeyUp = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n\t\tthis.deleteEmail('example')\r\n\t\tconst { keyCode } = e;\r\n\t\t//check ENTER-key\r\n\t\tif (keyCode !== 13) return;\r\n\t\t//cant add empty email\r\n\t\tconst { inputemail, inputempty, emails } = this.state\r\n\t\tif (inputempty) {\r\n\t\t\talert('Eingabe darf nicht leer sein!');\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet exist = false\r\n\t\temails.map((emailObj) => {\r\n\t\t\tif (emailObj.address == inputemail.address) exist = true\r\n\t\t})\r\n\t\tif (exist) {\r\n\t\t\talert('Es gibt schon Emailadresse in List!');\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar pattern = /^([A-Za-z0-9_\\-\\.])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z])+$/\r\n\t\tif (pattern.test(inputemail.address)) {\r\n\t\t\tthis.addEmail(inputemail);\r\n\t\t} else {\r\n\t\t\talert('Sie müssen eine Emailadresse eingeben!');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t//hide inputbox\r\n\t\tthis.setState({ addButtonClick: false });\r\n\t};\r\n\r\n\t//handle emailItem\r\n\thandleMouse = (flag: boolean) => {\r\n\t\treturn () => {\r\n\t\t\tthis.setState({ mouse: flag });\r\n\t\t};\r\n\t};\r\n\r\n\thandleCheck = (id: string, chosen: boolean) => {\r\n\t\tconst { emails } = this.state\r\n\t\tconst newEmails = emails.map((emailObj) => {\r\n\t\t\tif (emailObj.id == id) return { ...emailObj, chosen };\r\n\t\t\telse return emailObj;\r\n\t\t})\r\n\t\tthis.setState({ emails: newEmails })\r\n\t};\r\n\r\n\thandleDelete = (id: string) => {\r\n\t\tif (window.confirm('Sind Sie sicher, die gewählt Emailadresse zu löschen?')) {\r\n\t\t\tconst { emails } = this.state\r\n\t\t\tconst newEmails = emails.filter((emailObj) => {\r\n\t\t\t\treturn emailObj.id !== id;\r\n\t\t\t});\r\n\t\t\t//update emailList\r\n\t\t\tthis.setState({ emails: newEmails })\r\n\t\t}\r\n\t};\r\n\r\n\t//addEmail for add new Email\r\n\taddEmail = (emailObj: { id: string, address: string, chosen: boolean }) => {\r\n\t\t//add new one\r\n\t\tconst { emails } = this.state\r\n\t\tconst newEmails = [emailObj, ...emails];\r\n\t\t//update emailList\r\n\t\tthis.setState({ emails: newEmails })\r\n\t};\r\n\r\n\t//deleteEmail for delete emailObj\r\n\tdeleteEmail = (id: string) => {\r\n\t\t//get orignal emailList\r\n\t\t//delete emailObj with id\r\n\t\tconst { emails } = this.state\r\n\t\tconst newEmails = emails.filter((emailObj) => {\r\n\t\t\treturn emailObj.id !== id;\r\n\t\t});\r\n\t\t//update emailList\r\n\t\tthis.setState({ emails: newEmails })\r\n\t};\r\n\r\n\t//checkAllEmail for all chosen email\r\n\tchooseAllEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\t//get orignal emailList\r\n\t\tconst chosen = e.target.checked\r\n\t\tconst { emails } = this.state\r\n\t\tconst newEmails = emails.map((emailObj) => {\r\n\t\t\treturn { ...emailObj, chosen };\r\n\t\t});\r\n\t\t//update emailList\r\n\t\tthis.setState({ emails: newEmails })\r\n\t};\r\n\r\n\t//clearAllChosen for delete all emails\r\n\tclearAllChosen = () => {\r\n\t\tif (window.confirm('Sind Sie sicher, alle gewähte Emailadressen zu löschen?')) {\r\n\t\t\t//get orignal emailList\r\n\t\t\tconst { emails } = this.state;\r\n\t\t\t//filter datas\r\n\t\t\tconst newEmails = emails.filter((emailObj) => {\r\n\t\t\t\treturn !emailObj.chosen;\r\n\t\t\t});\r\n\t\t\t//update emailLists\r\n\t\t\tthis.setState({ emails: newEmails })\r\n\t\t}\r\n\t};\r\n\t//sendmethod\r\n\tdelivery = () => {\r\n\t\tconst { emails } = this.state;\r\n\t\tlet emailaddressList: string[] = []\r\n\t\temails.map((emailObj) => {\r\n\t\t\tif (emailObj.chosen) emailaddressList.push(emailObj.address)\r\n\t\t});\r\n\t\tconsole.log(emailaddressList)\r\n\t\tPubSub.publish('delivery', emailaddressList)\r\n\t}\r\n\trender() {\r\n\t\tconst { mouse, emails } = this.state\r\n\t\tconst chosenCount = emails.reduce((pre, email) => pre + (email.chosen ? 1 : 0), 0)\r\n\t\t//total amount\r\n\t\tconst total = emails.length\r\n\t\treturn (\r\n\t\t\t<div className=\"email-main\">\r\n\t\t\t\t<div className=\"addemailbutton\">\r\n\t\t\t\t\t<button onClick={() => this.handleCreate()} className=\"btn\" >Addieren eine neue Emailadresse!(Addieren Eingaben mit 'Enter'-Taste)</button>\r\n\t\t\t\t\t{this.state.addButtonClick ?\r\n\t\t\t\t\t\t<div className=\"inputbox\">\r\n\t\t\t\t\t\t\t<input onKeyUp={this.handleKeyUp} onChange={this.inputchange} type=\"text\" placeholder=\"input email address with ENTER-key\" />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t: null}\r\n\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{emails.map(emailObj => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<li style={{ backgroundColor: mouse ? '#ddd' : 'white' }} onMouseEnter={this.handleMouse(true)} onMouseLeave={this.handleMouse(false)}>\r\n\t\t\t\t\t\t\t<label>\r\n\t\t\t\t\t\t\t\t<input type=\"checkbox\" checked={emailObj.chosen} onChange={(e: React.ChangeEvent<HTMLInputElement>): void => this.handleCheck(emailObj.id, e.target.checked)} />\r\n\t\t\t\t\t\t\t\t<span>{emailObj.address}</span>\r\n\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t\t<button onClick={() => this.handleDelete(emailObj.id)} className=\"btn-item\" style={{ display: mouse ? 'block' : 'none' }}>Löschen</button>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t)\r\n\t\t\t\t})}\r\n\r\n\t\t\t\t<div className=\"handleallemail\">\r\n\t\t\t\t\t<label>\r\n\t\t\t\t\t\t<input type=\"checkbox\" onChange={this.chooseAllEmail} checked={chosenCount === total && total !== 0 ? true : false} />\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t<span>Gewählt: {chosenCount}</span> / Insegesamt: {total}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\t<button onClick={() => this.clearAllChosen()} className=\"btn-clear\">Löschen alle gewählte Emailadressen!</button>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"deliverybutton\">\r\n\t\t\t\t\t<button onClick={() => this.delivery()} className=\"btn\" >Liefern Aus!</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\State.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Diagram\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Countdown\\index.tsx",["346","347","348","349"],"import { Component, useState, useEffect, useRef } from 'react';\r\nimport PubSub from 'pubsub-js';\r\n\r\nexport default class Countdown extends Component {\r\n    state = { countdownNumber: 5, startCounting: false, chosenSensors: \"\" };\r\n\r\n    componentDidMount() {\r\n        PubSub.subscribe('startCounting', (leadTime: number) => {\r\n            this.setState({ countdownNumber: leadTime, startCounting: true });\r\n        }\r\n        );\r\n\r\n        setInterval(() => {\r\n            this.updateCounting();\r\n        }, 1000);\r\n    }\r\n\r\n    updateCounting() {\r\n        this.setState({ countdownNumber: this.state.countdownNumber - 1 });\r\n        if (this.state.countdownNumber == 0) {\r\n            this.setState({ startCounting: false });\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Bereit machen zur Aufnahme!</h2>\r\n                <h2>{this.state.startCounting ? this.state.countdownNumber : \"\"}</h2>\r\n                <h2>Verwendete Sensoren:<br />{this.state.chosenSensors}</h2>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Title\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\TimeSpan.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DataPoint.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\Train\\index.tsx",["350","351","352","353","354","355","356","357"],"import React, { Component } from 'react'\r\nimport PubSub from 'pubsub-js';\r\nimport NewWindow from 'react-new-window';\r\n\r\n\r\nexport default class Train extends Component {\r\n\tstate = {\r\n\t\tmouse: false,\r\n\t\topenNewWindow: false,\r\n\t\tvalue: '',\r\n\t\tdatabaseList: [] as { dataSetID: number, dataSetName: string, chosen: boolean }[],\r\n\t\tdatasets: [{\r\n\t\t\tdataSetID: 0,\r\n\t\t\tdataSetName: 'exampledataset',\r\n\t\t\tchosen: false\r\n\t\t}],\r\n\t\timputations: [\r\n\t\t\t{ name: \"Mittel\", checked: false, tag: 'MEAN' },\r\n\t\t\t{ name: \"Letzer Wert fortgeführt\", checked: false, tag: 'FORWARD' },\r\n\t\t\t{ name: \"Bewegter Durchschnitt\", checked: false, tag: 'MOVING' },\r\n\t\t\t{ name: \"Lineare Interpolation\", checked: false, tag: 'LINEAR' },\r\n\t\t\t{ name: \"Spline Interpolation\", checked: false, tag: 'SPLINE' }\r\n\t\t],\r\n\t\tscalers: [\r\n\t\t\t{ name: \"Standard Scaler\", checked: false, tag: 'STANDARD' },\r\n\t\t\t{ name: \"Robust Scaler\", checked: false, tag: 'ROBUST' },\r\n\t\t\t{ name: \"Min-Max Scaler\", checked: false, tag: 'MIN_MAX' },\r\n\t\t\t{ name: \"Normalizer\", checked: false, tag: 'NORMALIZER' },\r\n\t\t\t{ name: \"Anteilstrafo\", checked: false, tag: 'SHARE' }\r\n\t\t],\r\n\t\textractions: [\r\n\t\t\t{ name: \"Minimum\", checked: false, tag: 'MIN' },\r\n\t\t\t{ name: \"Maximum\", checked: false, tag: 'MAX' },\r\n\t\t\t{ name: \"Varianz\", checked: false, tag: 'VARIANCE' },\r\n\t\t\t{ name: \"Energie\", checked: false, tag: 'ENERGY' },\r\n\t\t\t{ name: \"Fourier-T\", checked: false, tag: 'FOURIER_TRANSFORM' },\r\n\t\t\t{ name: \"Mittelwert\", checked: false, tag: 'MEAN' },\r\n\t\t\t{ name: \"Autoregressiv\", checked: false, tag: 'AUTOREGRESSIVE' },\r\n\t\t\t{ name: \"Abweichung\", checked: false, tag: 'SKEWNESS' },\r\n\t\t\t{ name: \"Wölbung\", checked: false, tag: 'KURTOSIS' },\r\n\t\t\t{ name: \"IQR\", checked: false, tag: 'IQR' }\r\n\t\t],\r\n\t\tclassifiers: [\r\n\t\t\t{ name: \"MLPClassifier\", checked: false, tag: 'MLP' },\r\n\t\t\t{ name: \"RandomForestClassifier\", checked: false, tag: 'RANDOM_FOREST' },\r\n\t\t\t{ name: \"KNeighborsClassifier\", checked: false, tag: 'K_NEIGHOBORS' },\r\n\t\t\t{ name: \"Support Vector Machine\", checked: false, tag: 'SVM' }\r\n\t\t],\r\n\t\tchosenScaler: 0,\r\n\t\tchosenclassifier: 0\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tPubSub.subscribe('getlist', (_msg: any, data: { dataSetID: number, dataSetName: string }[]) => {\r\n\t\t\tlet i: number\r\n\t\t\tlet newDatabaseList: { dataSetID: number, dataSetName: string, chosen: boolean }[] = []\r\n\t\t\tfor (i = 0; i < data.length; i++) {\r\n\t\t\t\tnewDatabaseList[i] = { dataSetID: data[i].dataSetID, dataSetName: data[i].dataSetName, chosen: false }\r\n\t\t\t}\r\n\t\t\tthis.setState({ databaseList: newDatabaseList })\r\n\t\t})\r\n\t}\r\n\r\n\thandleMouse = (flag: boolean) => {\r\n\t\treturn () => {\r\n\t\t\tthis.setState({ mouse: flag });\r\n\t\t};\r\n\t};\r\n\r\n\thandleCheck = (id: number, chosen: boolean) => {\r\n\t\tconst { datasets } = this.state\r\n\t\tconst newDatasets = datasets.map((dataset) => {\r\n\t\t\tif (dataset.dataSetID == id) return { ...dataset, chosen };\r\n\t\t\telse return dataset;\r\n\t\t})\r\n\t\tthis.setState({ datasets: newDatasets })\r\n\t};\r\n\r\n\thandleDelete = (id: number) => {\r\n\t\tif (window.confirm('Sind Sie sicher, die gewählt Emailadresse zu löschen?')) {\r\n\t\t\tconst { datasets } = this.state\r\n\t\t\tconst newDatasets = datasets.filter((dataset) => {\r\n\t\t\t\treturn dataset.dataSetID !== id;\r\n\t\t\t});\r\n\t\t\t//update emailList\r\n\t\t\tthis.setState({ datasets: newDatasets })\r\n\t\t}\r\n\t};\r\n\r\n\t//addDataset for add new Dataset\r\n\taddDataset = (datasetObj: { dataSetID: number, dataSetName: string, chosen: boolean }) => {\r\n\t\t//get orignal datasetList\r\n\t\tconst { datasets } = this.state\r\n\t\t//add new one\r\n\t\tconst newDatasets = [datasetObj, ...datasets]\r\n\t\t//update datasetList\r\n\t\tthis.setState({ datasets: newDatasets })\r\n\t}\r\n\r\n\thandleCreate = () => {\r\n\t\t//if (this.state.databaseList == []) {\r\n\t\t//\t}\r\n\t\tconst flag = !this.state.openNewWindow\r\n\t\tthis.setState({ openNewWindow: flag })\r\n\t}\r\n\thandleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n\t\tthis.setState({\r\n\t\t\tvalue: e.target.value\r\n\t\t})\r\n\t}\r\n\r\n\r\n\thandleChoose = () => {\r\n\t\t/* wait to change load model*/\r\n\t\tthis.setState({ openNewWindow: false })\r\n\t\tif (this.state.value == '') {\r\n\t\t\talert('no choice')\r\n\t\t} else {\r\n\t\t\tconst { databaseList } = this.state\r\n\t\t\tconst newDatabaseList1 = databaseList.map((databaseObj) => {\r\n\t\t\t\tif (databaseObj.dataSetName == this.state.value) {\r\n\t\t\t\t\tdatabaseObj.chosen = true\r\n\t\t\t\t\tconst datasetObj = { dataSetID: databaseObj.dataSetID, dataSetName: databaseObj.dataSetName, chosen: false }\r\n\t\t\t\t\tthis.addDataset(datasetObj)\r\n\t\t\t\t}\r\n\t\t\t\treturn databaseObj\r\n\t\t\t}\r\n\t\t\t)\r\n\t\t\tconst newDatabaseList2 = newDatabaseList1.filter((databaseObj) => {\r\n\t\t\t\treturn databaseObj.chosen === false\r\n\t\t\t})\r\n\t\t\t//update emailList\r\n\t\t\tthis.setState({ databaseList: newDatabaseList2 })\r\n\t\t}\r\n\t}\r\n\r\n\toptions = () => {\r\n\t\tconst { databaseList } = this.state\r\n\t\t/*way to add new into list\r\n\t\tand wait to get databaseList\r\n\t\tconst newdatabase = {id:'003', name:'dataset3', chosen: false}\r\n\t\tdatabaseList.push(newdatabase)\r\n\t\t*/\r\n\t\treturn databaseList.map(dataset =>\r\n\t\t\t<option key={dataset.dataSetID} value={dataset.dataSetName}>{dataset.dataSetName}</option>);\r\n\t}\r\n\thandleImputation = (index: number) => {\r\n\t\tvar newList = [...this.state.imputations]\r\n\t\tnewList[index].checked = !newList[index].checked\r\n\t\tthis.setState({ imputations: newList })\r\n\t}\r\n\thandleScaler = (index: number) => {\r\n\r\n\t\tvar newList = [...this.state.scalers]\r\n\t\tvar newChosen = this.state.chosenScaler\r\n\t\tif (newList[index].checked) { newChosen-- }\r\n\t\telse { newChosen++ }\r\n\t\tif (newChosen <= 1) {\r\n\t\t\tnewList[index].checked = !newList[index].checked\r\n\t\t\tthis.setState({ chosenScaler: newChosen })\r\n\t\t\tthis.setState({ scalers: newList })\r\n\t\t} else {\r\n\t\t\talert('Darf nicht mehrer Skaler wählen!')\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t}\r\n\thandleExtraction = (index: number) => {\r\n\t\tvar newList = [...this.state.extractions]\r\n\t\tnewList[index].checked = !newList[index].checked\r\n\t\tthis.setState({ extractions: newList })\r\n\t}\r\n\thandleClassifier = (index: number) => {\r\n\t\tvar newList = [...this.state.classifiers]\r\n\t\tvar newChosen = this.state.chosenclassifier\r\n\t\tif (newList[index].checked) { newChosen-- }\r\n\t\telse { newChosen++ }\r\n\t\tif (newChosen <= 1) {\r\n\t\t\tnewList[index].checked = !newList[index].checked\r\n\t\t\tthis.setState({ chosenclassifier: newChosen })\r\n\t\t\tthis.setState({ classifiers: newList })\r\n\t\t} else {\r\n\t\t\talert('Darf nicht mehrer Classifier wählen!')\r\n\t\t\treturn\r\n\t\t}\r\n\t}\r\n\r\n\thandleTrain = () => {\r\n\t\tvar chosendataSets: number[] = [], chosenimputations: string[] = [], chosenclassifier = '', chosenscaler = '', chosenextractions: string[] = [];\r\n\t\tconst { datasets, imputations, classifiers, scalers, extractions } = this.state\r\n\t\tdatasets.map((dataset) => {\r\n\t\t\tif (dataset.chosen) chosendataSets.push(dataset.dataSetID)\r\n\t\t})\r\n\t\timputations.map((imputation) => {\r\n\t\t\tif (imputation.checked) chosenimputations.push(imputation.tag)\r\n\t\t})\r\n\t\tclassifiers.map((classifier) => {\r\n\t\t\tif (classifier.checked) chosenclassifier = classifier.tag\r\n\t\t})\r\n\t\tscalers.map((scaler) => {\r\n\t\t\tif (scaler.checked) chosenscaler = scaler.tag\r\n\t\t})\r\n\t\textractions.map((extraction) => {\r\n\t\t\tif (extraction.checked) chosenextractions.push(extraction.tag)\r\n\t\t})\r\n\t\t//console.log(chosendataSets, chosenimputations, chosenclassifier, chosenscaler, chosenextractions)\r\n\t\tPubSub.publish('train', { chosendataSets, chosenimputations, chosenclassifier, chosenscaler, chosenextractions })\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { mouse, datasets, imputations, scalers, extractions, classifiers } = this.state\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"train\">\r\n\t\t\t\t<h3>Datasets</h3>\r\n\t\t\t\t{datasets.map(dataset => {\r\n\t\t\t\t\treturn (\r\n\r\n\t\t\t\t\t\t<li style={{ backgroundColor: mouse ? '#ddd' : 'white' }} onMouseEnter={this.handleMouse(true)} onMouseLeave={this.handleMouse(false)}>\r\n\t\t\t\t\t\t\t<label>\r\n\t\t\t\t\t\t\t\t<input type=\"checkbox\" checked={dataset.chosen} onChange={(e: React.ChangeEvent<HTMLInputElement>): void => this.handleCheck(dataset.dataSetID, e.target.checked)} />\r\n\t\t\t\t\t\t\t\t<span>{dataset.dataSetName}</span>\r\n\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t\t<button onClick={() => this.handleDelete(dataset.dataSetID)} className=\"btn-item\" style={{ display: mouse ? 'block' : 'none' }}>Löschen</button>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t)\r\n\t\t\t\t})}\r\n\r\n\t\t\t\t<div className=\"adddatasetbutton\">\r\n\t\t\t\t\t{this.state.openNewWindow && (\r\n\t\t\t\t\t\t<NewWindow>\r\n\t\t\t\t\t\t\t<div className=\"login-window\">\r\n\t\t\t\t\t\t\t\t<h1>DatabaseList</h1>\r\n\t\t\t\t\t\t\t\t<select onChange={this.handleChange}>\r\n\t\t\t\t\t\t\t\t\t<option value=\"choose dataset\">choose dataset</option>\r\n\t\t\t\t\t\t\t\t\t{this.options()}\r\n\t\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t\t\t<button onClick={this.handleChoose} className=\"btn\" >Add!</button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</NewWindow>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t<button onClick={() => this.handleCreate()} className=\"btn\" >Add new Dataset</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<div className=\"imputationlist\">\r\n\t\t\t\t\t\t<h3>Imputation</h3>\r\n\t\t\t\t\t\t{imputations.map((imputation, index) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<div key={index}>\r\n\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" value={index} checked={imputation.checked} onChange={() => this.handleImputation(index)} /><span>{imputation.name}</span>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"scalerlist\">\r\n\t\t\t\t\t\t<h3>Normalisierung</h3>\r\n\t\t\t\t\t\t{scalers.map((scaler, index) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<div key={index}>\r\n\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" value={index} checked={scaler.checked} onChange={() => this.handleScaler(index)} /><span>{scaler.name}</span>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<div className=\"extractionlist\">\r\n\t\t\t\t\t\t<h3>Merkmalextraktion</h3>\r\n\t\t\t\t\t\t{extractions.map((extraction, index) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<div key={index}>\r\n\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" value={index} checked={extraction.checked} onChange={() => this.handleExtraction(index)} /><span>{extraction.name}</span>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"classifierlist\">\r\n\t\t\t\t\t\t<h3>Modell</h3>\r\n\t\t\t\t\t\t{classifiers.map((classifier, index) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<div key={index}>\r\n\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" value={index} checked={classifier.checked} onChange={() => this.handleClassifier(index)} /><span>{classifier.name}</span>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"trainbutton\">\r\n\t\t\t\t\t<button onClick={() => this.handleTrain()} className=\"btn\" >Train Start!</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\r\n\t\t)\r\n\t}\r\n\r\n}\r\n","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\QRImage\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LinkText\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ProjectList\\index.tsx",["358","359","360","361","362"],"import React, { Component } from 'react'\r\nimport ChangeToVisuBtn from '../ChangeToVisuBtn';\r\nimport ModelList from '../ModelList';\r\nimport QRImage from '../QRImage';\r\n\r\nexport default class ProjectList extends Component {\r\n    state = {\r\n        value: null,\r\n        click: false,\r\n        loadclick: false,\r\n        //hier Beispiel, in componentDidMount will projectData verändern\r\n        projectData: [{\r\n            projectID: 1,\r\n            projectName: 'Projekt1',\r\n            AIModelID: [1, 2]\r\n        }, {\r\n            projectID: 2,\r\n            projectName: 'Projekt2',\r\n            AIModelID: []\r\n        }]\r\n    }\r\n\r\n    componentDidMount() {\r\n        /** controller noch nicht gegeben*/\r\n        PubSub.subscribe('getprojectlist', (_msg: any, data: { projectID: number, projectName: string, AIModelID: number[]; }[]) => {\r\n            console.log('123')\r\n            this.setState({ projectData: data })\r\n        })\r\n\r\n    }\r\n\r\n    handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n        this.setState({\r\n            value: e.target.value\r\n        })\r\n    }\r\n    \r\n    handleChoose() {\r\n        /* wait to change load model*/\r\n        if (this.state.value == null) {\r\n            alert('Sie haben noch kein Projekt gewählt!')\r\n        } else {\r\n            this.state.projectData.map((projectObj) => {\r\n                if (this.state.value == projectObj.projectID) {\r\n                    if (projectObj.AIModelID.length != 0) {\r\n                        PubSub.publish('needmodellist', projectObj)\r\n                        this.setState({ click: true })\r\n                    } else {\r\n                        this.setState({ click: false })\r\n                        alert('Es gibt keine Model in diesem Projekt!')\r\n                    }\r\n                }\r\n            })\r\n        }\r\n\r\n    }\r\n    handleLoad() {\r\n\r\n        if (this.state.value == null) {\r\n            alert('Sie haben noch kein Projekt gewählt!')\r\n        } else {\r\n            this.state.projectData.map((projectObj) => {\r\n                if (this.state.value == projectObj.projectID) {\r\n                    PubSub.publish('loadproject', projectObj)\r\n                    this.setState({ loadclick: true })\r\n                }\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <section>\r\n                <label>ProjektList</label>\r\n                <select onChange={this.handleChange}>\r\n                    <option>Projekt Wählen</option>\r\n                    {this.state.projectData.map((projectObj) => {\r\n                        return <option value={projectObj.projectID}>{projectObj.projectName}</option>\r\n                    })}\r\n                </select>\r\n                <button onClick={() => this.handleChoose()} className=\"btn\" >Wählen Modell in diesem Projekt </button>\r\n                <button onClick={() => this.handleLoad()} className=\"btn\" >Laden das Projekt!</button>\r\n                {this.state.loadclick ? <div> <QRImage /><ChangeToVisuBtn /></div> : null}\r\n                {this.state.click ? <div> <ModelList /></div> : null}\r\n            </section>\r\n\r\n        )\r\n    }\r\n}\r\n","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ChangeToVisuBtn\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ModelList\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DeviceData.tsx",["363"],{"ruleId":"364","severity":1,"message":"365","line":1,"column":8,"nodeType":"366","messageId":"367","endLine":1,"endColumn":13},{"ruleId":"364","severity":1,"message":"368","line":2,"column":8,"nodeType":"366","messageId":"367","endLine":2,"endColumn":16},{"ruleId":"369","replacedBy":"370"},{"ruleId":"371","replacedBy":"372"},{"ruleId":"364","severity":1,"message":"373","line":4,"column":10,"nodeType":"366","messageId":"367","endLine":4,"endColumn":16},{"ruleId":"374","severity":1,"message":"375","line":71,"column":11,"nodeType":"366","messageId":"376","endLine":71,"endColumn":37},{"ruleId":"364","severity":1,"message":"377","line":8,"column":37,"nodeType":"366","messageId":"367","endLine":8,"endColumn":45},{"ruleId":"364","severity":1,"message":"378","line":8,"column":47,"nodeType":"366","messageId":"367","endLine":8,"endColumn":57},{"ruleId":"364","severity":1,"message":"379","line":8,"column":59,"nodeType":"366","messageId":"367","endLine":8,"endColumn":69},{"ruleId":"364","severity":1,"message":"380","line":8,"column":71,"nodeType":"366","messageId":"367","endLine":8,"endColumn":78},{"ruleId":"364","severity":1,"message":"381","line":9,"column":10,"nodeType":"366","messageId":"367","endLine":9,"endColumn":27},{"ruleId":"364","severity":1,"message":"382","line":10,"column":10,"nodeType":"366","messageId":"367","endLine":10,"endColumn":22},{"ruleId":"383","severity":1,"message":"384","line":50,"column":13,"nodeType":"385","messageId":"386","endLine":52,"endColumn":23},{"ruleId":"383","severity":1,"message":"384","line":62,"column":13,"nodeType":"385","messageId":"386","endLine":64,"endColumn":23},{"ruleId":"364","severity":1,"message":"387","line":4,"column":29,"nodeType":"366","messageId":"367","endLine":4,"endColumn":45},{"ruleId":"364","severity":1,"message":"388","line":7,"column":10,"nodeType":"366","messageId":"367","endLine":7,"endColumn":20},{"ruleId":"389","severity":1,"message":"390","line":302,"column":62,"nodeType":"391","messageId":"386","endLine":302,"endColumn":64},{"ruleId":"364","severity":1,"message":"392","line":7,"column":10,"nodeType":"366","messageId":"367","endLine":7,"endColumn":15},{"ruleId":"364","severity":1,"message":"393","line":49,"column":13,"nodeType":"366","messageId":"367","endLine":49,"endColumn":25},{"ruleId":"364","severity":1,"message":"394","line":51,"column":19,"nodeType":"366","messageId":"367","endLine":51,"endColumn":34},{"ruleId":"364","severity":1,"message":"395","line":1,"column":17,"nodeType":"366","messageId":"367","endLine":1,"endColumn":26},{"ruleId":"396","severity":1,"message":"397","line":67,"column":13,"nodeType":"398","endLine":67,"endColumn":23},{"ruleId":"396","severity":1,"message":"397","line":68,"column":13,"nodeType":"398","endLine":68,"endColumn":23},{"ruleId":"396","severity":1,"message":"397","line":80,"column":13,"nodeType":"398","endLine":80,"endColumn":23},{"ruleId":"396","severity":1,"message":"397","line":81,"column":13,"nodeType":"398","endLine":81,"endColumn":23},{"ruleId":"389","severity":1,"message":"390","line":88,"column":41,"nodeType":"391","messageId":"386","endLine":88,"endColumn":43},{"ruleId":"396","severity":1,"message":"397","line":101,"column":13,"nodeType":"398","endLine":101,"endColumn":23},{"ruleId":"396","severity":1,"message":"397","line":102,"column":13,"nodeType":"398","endLine":102,"endColumn":23},{"ruleId":"396","severity":1,"message":"397","line":121,"column":13,"nodeType":"398","endLine":121,"endColumn":23},{"ruleId":"396","severity":1,"message":"397","line":122,"column":13,"nodeType":"398","endLine":122,"endColumn":23},{"ruleId":"396","severity":1,"message":"397","line":133,"column":13,"nodeType":"398","endLine":133,"endColumn":23},{"ruleId":"396","severity":1,"message":"397","line":134,"column":13,"nodeType":"398","endLine":134,"endColumn":23},{"ruleId":"396","severity":1,"message":"397","line":141,"column":13,"nodeType":"398","endLine":141,"endColumn":23},{"ruleId":"396","severity":1,"message":"397","line":148,"column":13,"nodeType":"398","endLine":148,"endColumn":23},{"ruleId":"396","severity":1,"message":"397","line":149,"column":13,"nodeType":"398","endLine":149,"endColumn":23},{"ruleId":"364","severity":1,"message":"399","line":1,"column":10,"nodeType":"366","messageId":"367","endLine":1,"endColumn":34},{"ruleId":"389","severity":1,"message":"400","line":70,"column":32,"nodeType":"391","messageId":"386","endLine":70,"endColumn":34},{"ruleId":"389","severity":1,"message":"400","line":71,"column":32,"nodeType":"391","messageId":"386","endLine":71,"endColumn":34},{"ruleId":"364","severity":1,"message":"401","line":1,"column":10,"nodeType":"366","messageId":"367","endLine":1,"endColumn":24},{"ruleId":"364","severity":1,"message":"395","line":1,"column":17,"nodeType":"366","messageId":"367","endLine":1,"endColumn":26},{"ruleId":"396","severity":1,"message":"397","line":48,"column":13,"nodeType":"398","endLine":48,"endColumn":23},{"ruleId":"364","severity":1,"message":"402","line":5,"column":10,"nodeType":"366","messageId":"367","endLine":5,"endColumn":15},{"ruleId":"364","severity":1,"message":"395","line":1,"column":17,"nodeType":"366","messageId":"367","endLine":1,"endColumn":26},{"ruleId":"364","severity":1,"message":"403","line":4,"column":8,"nodeType":"366","messageId":"367","endLine":4,"endColumn":16},{"ruleId":"364","severity":1,"message":"401","line":9,"column":10,"nodeType":"366","messageId":"367","endLine":9,"endColumn":24},{"ruleId":"396","severity":1,"message":"397","line":61,"column":9,"nodeType":"398","endLine":61,"endColumn":19},{"ruleId":"396","severity":1,"message":"397","line":67,"column":13,"nodeType":"398","endLine":67,"endColumn":23},{"ruleId":"396","severity":1,"message":"397","line":73,"column":13,"nodeType":"398","endLine":73,"endColumn":23},{"ruleId":"364","severity":1,"message":"395","line":1,"column":17,"nodeType":"366","messageId":"367","endLine":1,"endColumn":26},{"ruleId":"396","severity":1,"message":"397","line":55,"column":4,"nodeType":"398","endLine":55,"endColumn":14},{"ruleId":"396","severity":1,"message":"397","line":56,"column":4,"nodeType":"398","endLine":56,"endColumn":14},{"ruleId":"396","severity":1,"message":"397","line":63,"column":4,"nodeType":"398","endLine":63,"endColumn":14},{"ruleId":"364","severity":1,"message":"404","line":3,"column":10,"nodeType":"366","messageId":"367","endLine":3,"endColumn":20},{"ruleId":"364","severity":1,"message":"405","line":3,"column":10,"nodeType":"366","messageId":"367","endLine":3,"endColumn":16},{"ruleId":"364","severity":1,"message":"406","line":3,"column":18,"nodeType":"366","messageId":"367","endLine":3,"endColumn":35},{"ruleId":"364","severity":1,"message":"377","line":3,"column":37,"nodeType":"366","messageId":"367","endLine":3,"endColumn":45},{"ruleId":"364","severity":1,"message":"378","line":3,"column":47,"nodeType":"366","messageId":"367","endLine":3,"endColumn":57},{"ruleId":"364","severity":1,"message":"379","line":3,"column":59,"nodeType":"366","messageId":"367","endLine":3,"endColumn":69},{"ruleId":"364","severity":1,"message":"380","line":3,"column":71,"nodeType":"366","messageId":"367","endLine":3,"endColumn":78},{"ruleId":"407","severity":1,"message":"408","line":16,"column":13,"nodeType":"409","messageId":"410","endLine":16,"endColumn":22,"fix":"411"},{"ruleId":"364","severity":1,"message":"402","line":1,"column":10,"nodeType":"366","messageId":"367","endLine":1,"endColumn":15},{"ruleId":"364","severity":1,"message":"395","line":1,"column":17,"nodeType":"366","messageId":"367","endLine":1,"endColumn":26},{"ruleId":"396","severity":1,"message":"397","line":54,"column":3,"nodeType":"398","endLine":54,"endColumn":13},{"ruleId":"396","severity":1,"message":"397","line":68,"column":4,"nodeType":"398","endLine":68,"endColumn":14},{"ruleId":"396","severity":1,"message":"397","line":69,"column":4,"nodeType":"398","endLine":69,"endColumn":14},{"ruleId":"364","severity":1,"message":"412","line":5,"column":10,"nodeType":"366","messageId":"367","endLine":5,"endColumn":18},{"ruleId":"396","severity":1,"message":"397","line":30,"column":7,"nodeType":"398","endLine":30,"endColumn":17},{"ruleId":"396","severity":1,"message":"397","line":8,"column":5,"nodeType":"398","endLine":8,"endColumn":15},{"ruleId":"396","severity":1,"message":"397","line":14,"column":7,"nodeType":"398","endLine":14,"endColumn":17},{"ruleId":"413","severity":1,"message":"414","line":36,"column":35,"nodeType":"415","messageId":"416","endLine":36,"endColumn":36,"suggestions":"417"},{"ruleId":"413","severity":1,"message":"418","line":36,"column":40,"nodeType":"415","messageId":"416","endLine":36,"endColumn":41,"suggestions":"419"},{"ruleId":"413","severity":1,"message":"414","line":36,"column":56,"nodeType":"415","messageId":"416","endLine":36,"endColumn":57,"suggestions":"420"},{"ruleId":"389","severity":1,"message":"400","line":45,"column":50,"nodeType":"391","messageId":"386","endLine":45,"endColumn":52},{"ruleId":"389","severity":1,"message":"400","line":64,"column":44,"nodeType":"391","messageId":"386","endLine":64,"endColumn":46},{"ruleId":"389","severity":1,"message":"400","line":26,"column":22,"nodeType":"391","messageId":"386","endLine":26,"endColumn":24},{"ruleId":"421","severity":1,"message":"422","line":45,"column":25,"nodeType":"423","messageId":"424","endLine":45,"endColumn":27},{"ruleId":"389","severity":1,"message":"400","line":46,"column":25,"nodeType":"391","messageId":"386","endLine":46,"endColumn":27},{"ruleId":"413","severity":1,"message":"414","line":52,"column":33,"nodeType":"415","messageId":"416","endLine":52,"endColumn":34,"suggestions":"425"},{"ruleId":"413","severity":1,"message":"418","line":52,"column":38,"nodeType":"415","messageId":"416","endLine":52,"endColumn":39,"suggestions":"426"},{"ruleId":"413","severity":1,"message":"414","line":52,"column":54,"nodeType":"415","messageId":"416","endLine":52,"endColumn":55,"suggestions":"427"},{"ruleId":"389","severity":1,"message":"400","line":74,"column":20,"nodeType":"391","messageId":"386","endLine":74,"endColumn":22},{"ruleId":"421","severity":1,"message":"422","line":141,"column":25,"nodeType":"423","messageId":"424","endLine":141,"endColumn":27},{"ruleId":"364","severity":1,"message":"412","line":1,"column":21,"nodeType":"366","messageId":"367","endLine":1,"endColumn":29},{"ruleId":"364","severity":1,"message":"428","line":1,"column":31,"nodeType":"366","messageId":"367","endLine":1,"endColumn":40},{"ruleId":"364","severity":1,"message":"429","line":1,"column":42,"nodeType":"366","messageId":"367","endLine":1,"endColumn":48},{"ruleId":"389","severity":1,"message":"400","line":20,"column":40,"nodeType":"391","messageId":"386","endLine":20,"endColumn":42},{"ruleId":"389","severity":1,"message":"400","line":73,"column":26,"nodeType":"391","messageId":"386","endLine":73,"endColumn":28},{"ruleId":"389","severity":1,"message":"400","line":116,"column":24,"nodeType":"391","messageId":"386","endLine":116,"endColumn":26},{"ruleId":"389","severity":1,"message":"400","line":121,"column":33,"nodeType":"391","messageId":"386","endLine":121,"endColumn":35},{"ruleId":"421","severity":1,"message":"422","line":191,"column":26,"nodeType":"423","messageId":"424","endLine":191,"endColumn":28},{"ruleId":"421","severity":1,"message":"422","line":194,"column":32,"nodeType":"423","messageId":"424","endLine":194,"endColumn":34},{"ruleId":"421","severity":1,"message":"422","line":197,"column":32,"nodeType":"423","messageId":"424","endLine":197,"endColumn":34},{"ruleId":"421","severity":1,"message":"422","line":200,"column":24,"nodeType":"423","messageId":"424","endLine":200,"endColumn":26},{"ruleId":"421","severity":1,"message":"422","line":203,"column":32,"nodeType":"423","messageId":"424","endLine":203,"endColumn":34},{"ruleId":"421","severity":1,"message":"422","line":43,"column":53,"nodeType":"423","messageId":"424","endLine":43,"endColumn":55},{"ruleId":"389","severity":1,"message":"400","line":44,"column":38,"nodeType":"391","messageId":"386","endLine":44,"endColumn":40},{"ruleId":"389","severity":1,"message":"390","line":45,"column":53,"nodeType":"391","messageId":"386","endLine":45,"endColumn":55},{"ruleId":"421","severity":1,"message":"422","line":62,"column":53,"nodeType":"423","messageId":"424","endLine":62,"endColumn":55},{"ruleId":"389","severity":1,"message":"400","line":63,"column":38,"nodeType":"391","messageId":"386","endLine":63,"endColumn":40},{"ruleId":"389","severity":1,"message":"400","line":28,"column":17,"nodeType":"391","messageId":"386","endLine":28,"endColumn":19},"@typescript-eslint/no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","'ReactDOM' is defined but never used.","no-native-reassign",["430"],"no-negated-in-lhs",["431"],"'IState' is defined but never used.","@typescript-eslint/no-redeclare","'controller' is already defined.","redeclared","'QRNumber' is defined but never used.","'QRAlphaNum' is defined but never used.","'QR8BitByte' is defined but never used.","'QRKanji' is defined but never used.","'ModelCreationPage' is defined but never used.","'DeliveryPage' is defined but never used.","no-duplicate-case","Duplicate case label.","SwitchCase","unexpected","'MagnetometerData' is defined but never used.","'DeviceData' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","'State' is defined but never used.","'text' is assigned a value but never used.","'element' is assigned a value but never used.","'Component' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'findAllByPlaceholderText' is defined but never used.","Expected '===' and instead saw '=='.","'MainController' is defined but never used.","'Admin' is defined but never used.","'eximage1' is defined but never used.","'FinishPage' is defined but never used.","'QRCode' is defined but never used.","'ErrorCorrectLevel' is defined but never used.","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"432","text":"433"},"'useState' is defined but never used.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["434","435"],"Unnecessary escape character: \\@.",["436","437"],["438","439"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["440","441"],["442","443"],["444","445"],"'useEffect' is defined but never used.","'useRef' is defined but never used.","no-global-assign","no-unsafe-negation",[634,634],"()",{"messageId":"446","fix":"447","desc":"448"},{"messageId":"449","fix":"450","desc":"451"},{"messageId":"446","fix":"452","desc":"448"},{"messageId":"449","fix":"453","desc":"451"},{"messageId":"446","fix":"454","desc":"448"},{"messageId":"449","fix":"455","desc":"451"},{"messageId":"446","fix":"456","desc":"448"},{"messageId":"449","fix":"457","desc":"451"},{"messageId":"446","fix":"458","desc":"448"},{"messageId":"449","fix":"459","desc":"451"},{"messageId":"446","fix":"460","desc":"448"},{"messageId":"449","fix":"461","desc":"451"},"removeEscape",{"range":"462","text":"463"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"464","text":"465"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"466","text":"463"},{"range":"467","text":"465"},{"range":"468","text":"463"},{"range":"469","text":"465"},{"range":"470","text":"463"},{"range":"471","text":"465"},{"range":"472","text":"463"},{"range":"473","text":"465"},{"range":"474","text":"463"},{"range":"475","text":"465"},[870,871],"",[870,870],"\\",[875,876],[875,875],[891,892],[891,891],[1336,1337],[1336,1336],[1341,1342],[1341,1341],[1357,1358],[1357,1357]]
