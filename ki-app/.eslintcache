[{"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\index.tsx":"1","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\reportWebVitals.ts":"2","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\MainController.tsx":"3","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\ReferringController.tsx":"4","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Facade.tsx":"5","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\StartController.tsx":"6","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\State.tsx":"7","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\VisualizationController.tsx":"8","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\DeliveryController.tsx":"9","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DatabaseConnector.tsx":"10","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\index.tsx":"11","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Language.tsx":"12","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\User.tsx":"13","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\AIBuilder.tsx":"14","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\AIDistributor.tsx":"15","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\SensorManager.tsx":"16","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\DataCollectionController.tsx":"17","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\index.tsx":"18","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\ModelCreationController.tsx":"19","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\State.tsx":"20","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\index.tsx":"21","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DeliveryFormat.tsx":"22","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DeviceData.tsx":"23","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Project.tsx":"24","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\index.tsx":"25","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\State.tsx":"26","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\FinishController.tsx":"27","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\index.tsx":"28","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ConstantsText\\index.tsx":"29","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\NewProjectButton\\index.tsx":"30","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoginWindow\\index.tsx":"31","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoadModelButton\\index.tsx":"32","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\SensorData.tsx":"33","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\AIModel.tsx":"34","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\State.tsx":"35","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DataSet.tsx":"36","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Session.tsx":"37","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\index.tsx":"38","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\State.tsx":"39","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Title\\index.tsx":"40","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Input\\index.tsx":"41","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\State.tsx":"42","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\EmailList\\index.tsx":"43","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\DownloadButton\\index.tsx":"44","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\FinishButton\\index.tsx":"45","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\State.tsx":"46","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DataRow.tsx":"47","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Label.tsx":"48","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\DiagramList\\index.jsx":"49","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Countdown\\index.tsx":"50","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Title\\index.tsx":"51","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\FinishPage\\index.tsx":"52","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Diagram\\index.jsx":"53","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\QRImage\\index.tsx":"54","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ChangeToVisuBtn\\index.tsx":"55","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LinkText\\index.tsx":"56","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ProjectList\\index.tsx":"57","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\Train\\index.tsx":"58","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DataPoint.tsx":"59","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\TimeSpan.tsx":"60","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\FinishPage\\State.tsx":"61","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Title\\index.tsx":"62","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Input\\Labelling\\index.tsx":"63","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Diagram\\index.jsx":"64","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ModelList\\index.tsx":"65"},{"size":419,"mtime":1613977999233,"results":"66","hashOfConfig":"67"},{"size":440,"mtime":1613146123200,"results":"68","hashOfConfig":"67"},{"size":3595,"mtime":1616080014518,"results":"69","hashOfConfig":"67"},{"size":7640,"mtime":1616080014518,"results":"70","hashOfConfig":"67"},{"size":17818,"mtime":1616080014530,"results":"71","hashOfConfig":"67"},{"size":3772,"mtime":1616080014521,"results":"72","hashOfConfig":"67"},{"size":4207,"mtime":1616080014595,"results":"73","hashOfConfig":"67"},{"size":3721,"mtime":1616080014525,"results":"74","hashOfConfig":"67"},{"size":2538,"mtime":1614783818422,"results":"75","hashOfConfig":"67"},{"size":11326,"mtime":1615529139367,"results":"76","hashOfConfig":"67"},{"size":6513,"mtime":1616080014590,"results":"77","hashOfConfig":"67"},{"size":1656,"mtime":1616080014535,"results":"78","hashOfConfig":"67"},{"size":14312,"mtime":1616395271647,"results":"79","hashOfConfig":"67"},{"size":4493,"mtime":1614786250117,"results":"80","hashOfConfig":"67"},{"size":2497,"mtime":1613978481034,"results":"81","hashOfConfig":"67"},{"size":10280,"mtime":1615713993737,"results":"82","hashOfConfig":"67"},{"size":2324,"mtime":1615295129161,"results":"83","hashOfConfig":"67"},{"size":2123,"mtime":1616080014593,"results":"84","hashOfConfig":"67"},{"size":2817,"mtime":1615569177061,"results":"85","hashOfConfig":"67"},{"size":731,"mtime":1616080014587,"results":"86","hashOfConfig":"67"},{"size":1772,"mtime":1614871105986,"results":"87","hashOfConfig":"67"},{"size":214,"mtime":1613280191746,"results":"88","hashOfConfig":"67"},{"size":2085,"mtime":1613978481015,"results":"89","hashOfConfig":"67"},{"size":7564,"mtime":1616509099410,"results":"90","hashOfConfig":"67"},{"size":3823,"mtime":1616080014598,"results":"91","hashOfConfig":"67"},{"size":584,"mtime":1615218187172,"results":"92","hashOfConfig":"67"},{"size":3939,"mtime":1615729121291,"results":"93","hashOfConfig":"67"},{"size":4712,"mtime":1615364670567,"results":"94","hashOfConfig":"67"},{"size":232,"mtime":1616080014558,"results":"95","hashOfConfig":"67"},{"size":1341,"mtime":1616080014571,"results":"96","hashOfConfig":"67"},{"size":3593,"mtime":1616080014566,"results":"97","hashOfConfig":"67"},{"size":737,"mtime":1616080014563,"results":"98","hashOfConfig":"67"},{"size":1631,"mtime":1616080014538,"results":"99","hashOfConfig":"67"},{"size":485,"mtime":1613280191739,"results":"100","hashOfConfig":"67"},{"size":276,"mtime":1613662337789,"results":"101","hashOfConfig":"67"},{"size":6362,"mtime":1616512960928,"results":"102","hashOfConfig":"67"},{"size":1574,"mtime":1613978657736,"results":"103","hashOfConfig":"67"},{"size":2045,"mtime":1615569177076,"results":"104","hashOfConfig":"67"},{"size":449,"mtime":1615714476257,"results":"105","hashOfConfig":"67"},{"size":1002,"mtime":1613146123233,"results":"106","hashOfConfig":"67"},{"size":4029,"mtime":1616080014581,"results":"107","hashOfConfig":"67"},{"size":540,"mtime":1615712590043,"results":"108","hashOfConfig":"67"},{"size":5962,"mtime":1614871105979,"results":"109","hashOfConfig":"67"},{"size":363,"mtime":1613662337782,"results":"110","hashOfConfig":"67"},{"size":366,"mtime":1613662337788,"results":"111","hashOfConfig":"67"},{"size":693,"mtime":1614783818432,"results":"112","hashOfConfig":"67"},{"size":3253,"mtime":1616395143531,"results":"113","hashOfConfig":"67"},{"size":1852,"mtime":1616080014533,"results":"114","hashOfConfig":"67"},{"size":5762,"mtime":1616080014584,"results":"115","hashOfConfig":"67"},{"size":1963,"mtime":1615296979407,"results":"116","hashOfConfig":"67"},{"size":1002,"mtime":1613280195763,"results":"117","hashOfConfig":"67"},{"size":3551,"mtime":1615458613251,"results":"118","hashOfConfig":"67"},{"size":4216,"mtime":1615715003317,"results":"119","hashOfConfig":"67"},{"size":551,"mtime":1616080014578,"results":"120","hashOfConfig":"67"},{"size":433,"mtime":1616080014555,"results":"121","hashOfConfig":"67"},{"size":699,"mtime":1616080014561,"results":"122","hashOfConfig":"67"},{"size":3411,"mtime":1616080014575,"results":"123","hashOfConfig":"67"},{"size":10841,"mtime":1615568948190,"results":"124","hashOfConfig":"67"},{"size":931,"mtime":1615729730372,"results":"125","hashOfConfig":"67"},{"size":1409,"mtime":1615731483884,"results":"126","hashOfConfig":"67"},{"size":517,"mtime":1615714476256,"results":"127","hashOfConfig":"67"},{"size":1000,"mtime":1613146123218,"results":"128","hashOfConfig":"67"},{"size":3744,"mtime":1615457739644,"results":"129","hashOfConfig":"67"},{"size":4096,"mtime":1615715003312,"results":"130","hashOfConfig":"67"},{"size":1855,"mtime":1616080014568,"results":"131","hashOfConfig":"67"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"fl9nei",{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"193"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"208","messages":"209","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"230","messages":"231","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"235","messages":"236","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"242","messages":"243","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":1,"source":"244"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"256","messages":"257","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"261","messages":"262","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"270","messages":"271","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\reportWebVitals.ts",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\MainController.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\ReferringController.tsx",["275","276","277","278"],"import { Page } from \"../view/pages/PageInterface\";\r\nimport { IState, States } from \"../view/pages/State\";\r\nimport { PageController } from \"./PageController\";\r\nimport { MainController } from \"./MainController\";\r\nimport { DeliveryController } from \"./DeliveryController\";\r\nimport { VisualizationController } from \"./VisualizationController\";\r\nimport { ReferringPage } from \"../view/pages/ReferringPage/index\";\r\nimport { QRCode, ErrorCorrectLevel, QRNumber, QRAlphaNum, QR8BitByte, QRKanji } from 'qrcode-generator-ts/js';\r\n\r\n\r\n/**\r\n* Controller für die Verweisseite\r\n*/\r\nexport class RefferingController implements PageController {\r\n    private page: Page;\r\n    private state: IState;\r\n\r\n    /**\r\n     * Konstruktor des Seitenverwalters. Registriert sich als Beobachter auf seiner Seite und setzt den Start Status. \r\n     */\r\n    constructor() {\r\n        this.page = new ReferringPage({});\r\n        //this.page = new StartPage({});\r\n        //this.page = new ModelCreationPage({});\r\n        // this.page = new VisualizationPage({});\r\n\r\n        this.page.attach(this);\r\n        this.state = this.page.getState();\r\n        this.update();\r\n    }\r\n\r\n    /**\r\n     * Die Update Methode des Seitenverwalters.\r\n     */\r\n    update() {\r\n        this.state = this.page.getState();\r\n        switch (this.state.currentState) {\r\n            case States.LoadProject:\r\n                this.loadProject();\r\n                break;\r\n            case States.Register:\r\n                this.register();\r\n                break;\r\n            case States.Login:\r\n                this.login();\r\n                break;\r\n            case States.NewProjekt:\r\n                this.createNewProject();\r\n                break;\r\n            case States.LoadModel:\r\n                this.loadModel();\r\n                break;\r\n            case States.SetLanguage:\r\n                this.page.setState(MainController.getInstance().setLanguage(this.state.languageCode));\r\n                break;\r\n            case States.NeedMessage:\r\n                this.page.setState(MainController.getInstance().getMessage(this.state.messages));\r\n                break;\r\n            case States.ChangeToVisual:\r\n                MainController.getInstance().changeTo(new VisualizationController(this.state.currentProject!));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Logt den Benutzer ein\r\n     */\r\n    login() {\r\n        let adminData: { name: string, email: string, password: string; } = this.state.adminData!;\r\n        let loginSucess: Promise<boolean> = MainController.getInstance().getFacade().loginAdmin(adminData.email, adminData.password);\r\n        this.state.wait! = loginSucess;\r\n        this.state.currentState = States.waitForDB;\r\n        this.page.setState(this.state);\r\n        loginSucess.then((value: boolean) => {\r\n            if (value) {\r\n                this.state.projectData! = [];\r\n                let projectData: Promise<{ projectID: number; projectName: string; AIModelID: number[]; }[]> = MainController.getInstance().getFacade().getProjectMetas();\r\n                projectData.then((data: { projectID: number; projectName: string; AIModelID: number[]; }[]) => {\r\n                    this.state.projectData! = data;\r\n                    this.page.setState(this.state);\r\n                });\r\n\r\n            } else {\r\n                this.state.currentState = States.LoginFail;\r\n            }\r\n            this.page.setState(this.state);\r\n        });\r\n        loginSucess.catch((value: boolean) => {\r\n            console.log(value);\r\n        });\r\n        //this.state.projectData! = [{ projectID: 1, projectName: \"string\", AIModelID: [1,2] }]\r\n        //this.page.setState(this.state)\r\n    }\r\n\r\n    /**\r\n     * Registriert den Benutzer\r\n     */\r\n    register() {\r\n        let adminData: { name: string, email: string, password: string; } = this.state.adminData!;\r\n        let loginSucess: Promise<boolean> = MainController.getInstance().getFacade().registerAdmin(adminData.name, adminData.email, adminData.password);\r\n        this.state.wait! = loginSucess;\r\n        this.state.currentState = States.waitForDB;\r\n        this.page.setState(this.state);\r\n        loginSucess.then((value: boolean) => {\r\n            if (!value) {\r\n                this.state.currentState = States.LoginFail;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Erstellt ein QRCode und übergibt in an die Seite\r\n     */\r\n    createQR() {\r\n        const url = new URL(document.URL);\r\n        url.searchParams.append(\"SessionID\", MainController.getInstance().getFacade().getSessionID().toString());\r\n        url.searchParams.append(\"isMiner\", \"true\");\r\n        let link: string = url.toString();\r\n        var qr = new QRCode();\r\n        qr.setTypeNumber(5);\r\n        qr.setErrorCorrectLevel(ErrorCorrectLevel.L);\r\n        qr.addData(link);\r\n        qr.make();\r\n        this.state.qr = qr.toDataURL();\r\n        this.state.currentState = States.SetQRC;\r\n        PubSub.publish('getlink', link);\r\n    }\r\n\r\n    /**\r\n     * Erstelle ein neues Projekt, welches auch als momentanes Projekt gesetzt wird.\r\n     */\r\n    createNewProject() {\r\n        let sucess: Promise<boolean> = MainController.getInstance().getFacade().createProject(this.state.currentProject!.projectName);\r\n        this.state.wait! = sucess;\r\n        this.state.currentState = States.waitForDB;\r\n        this.page.setState(this.state);\r\n        sucess.then((value: boolean) => {\r\n            if (value) {\r\n                this.createQR();\r\n                let projectData: Promise<{ projectID: number; projectName: string; AIModelID: number[]; }[]> = MainController.getInstance().getFacade().getProjectMetas();\r\n                projectData.then((data: { projectID: number; projectName: string; AIModelID: number[]; }[]) => {\r\n                    this.state.projectData! = data;\r\n                });\r\n                PubSub.publish('getqr', this.state.qr);\r\n\r\n            } else {\r\n\r\n                this.state.currentState = States.LoadError;\r\n            }\r\n            this.page.setState(this.state);\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Setzt ein Projekt als momentanes Projekt\r\n     */\r\n    loadProject() {\r\n        let projectId: number = this.state.currentProject!.projectID!;\r\n        let sucess: Promise<boolean> = MainController.getInstance().getFacade().loadProject(projectId);\r\n        this.state.wait! = sucess;\r\n        this.state.currentState = States.waitForDB;\r\n        this.page.setState(this.state);\r\n        sucess.then((value: boolean) => {\r\n            if (value) {\r\n                this.createQR();\r\n                PubSub.publish('getqr', this.state.qr);\r\n            } else {\r\n                this.state.currentState = States.LoadError;\r\n            }\r\n        });\r\n        this.page.setState(this.state);\r\n    }\r\n\r\n    /**\r\n     * Läde ein Modell und wechselt zur delivery Seite\r\n     */\r\n    loadModel() {\r\n        let projectId: number = this.state.currentProject!.projectID;\r\n        let sucess: Promise<boolean> = MainController.getInstance().getFacade().loadProject(projectId);\r\n        this.state.wait! = sucess;\r\n        this.state.currentState = States.waitForDB;\r\n        this.page.setState(this.state);\r\n        sucess.then((value: boolean) => {\r\n            if (value) {\r\n                let deliveryConroller: DeliveryController = new DeliveryController(this.state.currentProject!);\r\n                MainController.getInstance().changeTo(deliveryConroller);\r\n            } else {\r\n                this.state.currentState = States.LoadError;\r\n            }\r\n        });\r\n        this.page.setState(this.state);\r\n    }\r\n}","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Facade.tsx",["279","280"],"import { DeliveryFormat } from \"./DeliveryFormat\";\r\nimport { DatabaseConnector } from \"./DatabaseConnector\";\r\nimport { Language } from \"./Language\";\r\nimport { Admin, Dataminer, AIModelUser, User } from \"./User\";\r\nimport { AIBuilder } from \"./AIBuilder\";\r\nimport { AIDistributor } from \"./AIDistributor\";\r\nimport { AccelerometerData, GyroscopeData, SensorData } from \"./SensorData\";\r\nimport { isBreakStatement } from \"typescript\";\r\n\r\ninterface FacadeInterface {\r\n  createDataSet(sensorTypes: string[], dataSetName: string): boolean;\r\n  sendDataPoint(dataRowID: number, value: number[]): boolean;\r\n  readDataPoint(dataRowID: number): object;\r\n  loadProject(projectID: number): boolean;\r\n  getProjectMetas(): string[];\r\n  getDataSetMeta(): string[];\r\n  getSessionID(): number;\r\n  getDataRows(dataSetID: number): number[][][];\r\n  getCurrentDataRows(): { value: number, relativeTime: number; }[];\r\n  getMessage(messageID: number): string;\r\n  setLanguage(languageCode: string): boolean;\r\n  getLanguageMetas(): object[];\r\n  getEmail(): string;\r\n  deleteDataSet(dataSetID: number): boolean;\r\n  registerAdmin(adminName: string, email: string, password: string): boolean;\r\n  registerDataminer(dataminerName: string, sessionID: number): boolean;\r\n  registerAIModelUser(aiModelUserName: string): boolean;\r\n  loginAdmin(email: string, password: string): boolean;\r\n  logoutAdmin(): boolean;\r\n  createProject(projectName: string): boolean;\r\n  setLabel(labelID: number, start: number, end: number): boolean;\r\n  createLabel(): number; //labelid von datenbank\r\n  getLabels(): object[];\r\n  checkLogin(): boolean;\r\n  classify(aiId: number, dataSetId: number, callBack: Function): void;\r\n  getAIModel(format: DeliveryFormat): object;\r\n  applyModel(modeldata: object): void;\r\n} export type { FacadeInterface };\r\n\r\n/**\r\n * Die Facade stellt alle interaktionen mit dem Model zur Verfügung\r\n */\r\nexport class Facade {\r\n  private language?: Language; //Alle Nachrichten, in der geladenen Sprache\r\n  private dbCon: DatabaseConnector; //Die Verbindung zur Datenbank\r\n  private user?: User; //Der Benutzer, entweder Admin, Datenerfasser oder AIModelUser\r\n\r\n\r\n  /**\r\n   * Erstellt die Facade\r\n   * @param languageCode der Sprachcode von der Sprache, die geladen werden soll\r\n   */\r\n  constructor(languageCode: string) {\r\n    this.dbCon = new DatabaseConnector();\r\n    this.dbCon.loadLanguage({ languageCode }).then((language: string[]) => { this.language = new Language(language); });\r\n  }\r\n\r\n  /**\r\n   * Erstellt ein Datensatz\r\n   * @param sensorTypeID muss der Sensor Typ ID von einem Sensor des Gerätes übereinstimmen\r\n   * @param dataSetName Name des Datensatzes\r\n   * @returns true, wenn der Datensatz erstellt wurde. Dies ist der Fall, wenn ein Benutzer existiert welcher in einer Session ist und alle Sensortypen existieren.\r\n   */\r\n  async createDataSet(sensorTypeID: number[], dataSetName: string, datarowNames?: string[]): Promise<boolean> {\r\n    if (this.user != null) {\r\n      let sessionID: number = this.getSessionID();\r\n      if (sessionID >= 0) {\r\n        let projectID: number = this.user.getCurrentProjectID();\r\n        let userID: number = this.user.getID();\r\n        let dataRow: { sensorID: number, datarowName?: string; }[] = [];\r\n        for (let i = 0; i < sensorTypeID.length; i++) {\r\n          let sensorID = sensorTypeID[i];\r\n          if (datarowNames != null && datarowNames.length >= i) {\r\n            dataRow.push({ sensorID, datarowName: datarowNames[i] });\r\n          } else {\r\n            dataRow.push({ sensorID });\r\n          }\r\n        }\r\n        let dataSetID: number = await this.dbCon.createDataSet({ sessionID, projectID, userID, dataSetName, dataRow });\r\n        if (dataSetID >= 0) {\r\n          ///////////////////////////////DUMMY\r\n          var sensoren: SensorData[] = [];\r\n          for (let i = 0; i < sensorTypeID.length; i++) {\r\n            switch (sensorTypeID[i]) {\r\n              case 2:\r\n                sensoren.push(new AccelerometerData(-1, \"\", \"\"));\r\n                break;\r\n              case 3:\r\n                sensoren.push(new GyroscopeData(-1, \"\", \"\"));\r\n                break;\r\n            }\r\n          }\r\n          return this.user.createDataSet(sensoren, dataSetID, dataSetName);\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Sendet den Datenpunkt an die Datenbank ////////////////////////////////////////////////////////////////////////////////////////////Daten noch in Model speichern\r\n   * @param dataRowID die ID der aktuellen Datenreihe des eingelesenen Datenpunkts\r\n   * @param value der SensorWert\r\n   * @param relativeTime die relative Zeit zum Aufnahmestart in Millisekunden\r\n   * @return true, wenn der Datenpunkt erfolgreich an die Datenbank gesendet wurde\r\n   */\r\n  async sendDataPoint(dataRowID: number, datapoint: { value: number[], relativeTime: number; }): Promise<boolean> {\r\n    if (this.user != null) {\r\n      let sessionID: number = this.getSessionID();\r\n      let userID: number = this.user.getID();\r\n      let dataSetID: number = this.user.getCurrentDataSetID();\r\n      this.user.addDatapoint(dataRowID, datapoint);\r\n      return this.dbCon.sendDataPoint({ sessionID, userID, dataSetID, dataRowID, datapoint });\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Lädt aus der Datenbank das Projekt mit der übergebenen ID, hierfür muss der Admin angemeldet sein\r\n   * @param projectID die Projekt ID oder keine falls das aktuelle Projekt neu geladen werden soll\r\n   * @returns true, wenn das Projekt erfolgreich geladen wurde dies tritt nur ein, wenn eine Verbindung zur Datenbank besteht,\r\n   *          die Projekt ID existiert und der Admin dafür angemeldet ist\r\n   */\r\n  async loadProject(projectID?: number): Promise<boolean> {\r\n    if (this.user != null && this.user instanceof Admin) {\r\n      if (projectID == null) {\r\n        projectID = this.user?.getCurrentProjectID();\r\n      }\r\n      let adminEmail: string = this.user.getEmail();\r\n      let userID: number = this.user.getID();\r\n      return this.user.loadProject(await this.dbCon.loadProject({ userID, adminEmail, projectID }));\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Lädt vom aktuell angemeldeten Admin von seinen Projekten den Namen und die die Projekt ID\r\n   * @returns Von allen Projekten des Admins Projekt ID und Projektname\r\n   */\r\n  async getProjectMetas(): Promise<{ projectID: number, projectName: string, AIModelID: number[]; }[]> {\r\n    if (this.user != null) {\r\n      let userID: number = this.user.getID();\r\n      return await this.dbCon.getProjectMetas({ userID, adminEmail: this.getAdminEmail() });\r\n    }\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Gibt vom aktuellen Projekt von allen Datensätzen die Datensatz ID und der Datensatz Name zurück\r\n   */\r\n  getDataSetMetas(): { dataSetID: number, dataSetName: string; }[] {\r\n    if (this.user != null) {\r\n      return this.user.getDataSetMetas();\r\n    }\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Gibt die Session ID des aktuellen Projekts zurück, -1 falls kein aktuelles Projekt existiert\r\n   */\r\n  getSessionID(): number {\r\n    if (this.user != null) {\r\n      return this.user.getSessionID();\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Gibt vom aktuellen Projekt die Datenreihen der Datensatz ID zurück und setzt diesen Datensatz als aktuellen Datensatz\r\n   * @param dataSetID die Datensatz ID von der die Datenreihen gelesen werden sollen\r\n   * @returns die Sensordaten von der Datenreihe\r\n   */\r\n  getDataRows(dataSetID: number): { dataRows: { sensorType: number, datapoint: { value: number[], relativeTime: number; }[]; }[]; } {\r\n    if (this.user != null) {\r\n      return this.user.getDataRows(dataSetID);\r\n    }\r\n    return { dataRows: [] };\r\n  }\r\n\r\n  /**\r\n   * Gibt vom aktuellen Projekt die Datenreihen des aktuellen Datensatzes zurück\r\n   * @param dataSetID die Datensatz ID von der die Datenreihen gelesen werden sollen\r\n   * @returns die Sensordaten von der Datenreihe\r\n   */\r\n  getCurrentDataRows(): { dataRows: { sensorType: number, datapoint: { value: number[], relativeTime: number; }[]; }[]; } {\r\n    if (this.user != null) {\r\n      return this.user.getCurrentDataRows();\r\n    }\r\n    return { dataRows: [] };\r\n  }\r\n\r\n  /**\r\n   * Gibt aus der geladenen Sprache die Nachrichten die über die IDs angegeben werden\r\n   * @param messageID alle IDs, von denen die Sprachnachricht geladen werden soll\r\n   * @returns alle Nachrichten, in der gleichen Reihenfolge wie angefordert\r\n   */\r\n  getMessage(messageID: number[]): { messageID: number, message: string; }[] {\r\n    if (this.language != null) {\r\n      return this.language.getMessage(messageID);\r\n    }\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Gibt die auswählbaren Sensoren als ID mit ihrer Art in der Passenden Sprache zurück\r\n   */\r\n  getAvailableSensors(): { sensorTypID: number, sensorType: string; }[] {\r\n    if (this.user != null && this.language != null) {\r\n      var sensors: { sensorTypID: number, sensorType: string; }[] = [];\r\n      let message: { messageID: number, message: string; }[] = this.language.getMessage(this.user.getAvailableSensors());\r\n      for (let i = 0; i < message.length; i++) {\r\n        sensors.push({ sensorTypID: message[i].messageID, sensorType: message[i].message });\r\n      }\r\n      return sensors;\r\n    }\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Lädt die Sprache aus der Datenbank mit dem übergebenen Sprachcode\r\n   * @param languageCode Sprachcode\r\n   * @returns true, falls die Sprache erfolgreich geladen wurde\r\n   */\r\n  async setLanguage(languageCode: string): Promise<boolean> {\r\n    if (this.language != null && languageCode != this.language.getLanguageCode()) {\r\n      const language: string[] = await this.dbCon.loadLanguage({ languageCode });\r\n      return this.language.setLanguage(language);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Gibt von allen in der Datenbank verfügbaren Sprachen den Sprachcode sowie den Sprachennamen zurück\r\n   */\r\n  getLanguageMetas(): Promise<{ languageCode: number, languageName: string; }[]> {\r\n    return this.dbCon.getLanguageMetas();\r\n  };\r\n\r\n  /**\r\n   * Gibt die Email vom Admin zurück, diese kann leer sein falls kein Admin angemeldet ist\r\n   */\r\n  getAdminEmail(): string {\r\n    if (this.user instanceof Admin) {\r\n      return this.user.getEmail();\r\n    }\r\n    return \"\";\r\n  }\r\n\r\n  /**\r\n   * Löscht den Datensatz mit der übergebenen Datensatz ID\r\n   * @param dataSetID die Datensatz ID\r\n   * @returns true, wenn das löschen erfolgreich ist\r\n   */\r\n  async deleteDataSet(dataSetID: number): Promise<boolean> {\r\n    if (this.user != null) {\r\n      let projectID: number = this.user.deleteDataSet(dataSetID);\r\n      if (projectID >= 0) {\r\n        let adminEmail: string = this.getAdminEmail();\r\n        let userID = this.user.getID();\r\n        return this.dbCon.deleteDataSet({ userID, adminEmail, projectID, dataSetID });\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n\r\n  //wann Device erstellen ??? + constructor in User anpassen mit neuem Device parameter \r\n  async registerAdmin(adminName: string, adminEmail: string, password: string): Promise<boolean> {\r\n    //TODO Device\r\n    let device: { deviceID?: number, deviceName: string, deviceType: string, firmware: string, generation: string, MACADRESS: string, sensorInformation: { sensorTypeID: number, sensorName: string, sensorUniqueID: number; }[]; } = { deviceID: -1, deviceName: \"\", deviceType: \"\", firmware: \"\", generation: \"\", MACADRESS: \"\", sensorInformation: [] };\r\n    let IDs: { adminID: number, device: { deviceID: number, sensorID: number[]; }; } = await this.dbCon.registerAdmin({ adminName, adminEmail, password, device });\r\n    if (IDs.adminID >= 0) {\r\n      this.user = new Admin(IDs.adminID, IDs.device.deviceID, adminName, adminEmail);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  async registerDataminer(dataminerName: string, sessionID: number): Promise<boolean> {\r\n    //TODO Device\r\n    let device: { deviceID?: number, deviceName: string, deviceType: string, firmware: string, generation: string, MACADRESS: string, sensorInformation: { sensorTypeID: number, sensorName: string, sensorUniqueID: number; }[]; } = { deviceID: -1, deviceName: \"\", deviceType: \"\", firmware: \"\", generation: \"\", MACADRESS: \"\", sensorInformation: [] };\r\n    let dataminer: { dataminerID: number, device: { deviceID: number, sensorID: number[]; }, project: { projectID: number, projectName: string, sessionID: number; }; } = await this.dbCon.registerDataminer({ dataminerName, sessionID, device });\r\n    if (dataminer.dataminerID >= 0 && dataminer.device.deviceID >= 0) {\r\n      this.user = new Dataminer(dataminer.dataminerID, dataminer.device.deviceID, dataminerName);\r\n      this.user.loadProject(dataminer.project);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param aiModelUserName \r\n   */\r\n  async registerAIModelUser(aiModelUserName: string, modelID: number): Promise<boolean> {\r\n    //TODO Device\r\n    let device: { deviceID?: number, deviceName: string, deviceType: string, firmware: string, generation: string, MACADRESS: string, sensorInformation: { sensorTypeID: number, sensorName: string, sensorUniqueID: number; }[]; } = { deviceID: -1, deviceName: \"\", deviceType: \"\", firmware: \"\", generation: \"\", MACADRESS: \"\", sensorInformation: [] };\r\n    let aiModelUser: { aiModelUserID: number, device: { deviceID: number, sensorID: number[]; }, project: { projectID: number, projectName: string, sessionID: -1; }; } = await this.dbCon.registerAIModelUser({ aiModelUserName, modelID, device });\r\n    if (aiModelUser.aiModelUserID >= 0 && aiModelUser.device.deviceID >= 0) {\r\n      this.user = new AIModelUser(aiModelUser.aiModelUserID, aiModelUser.device.deviceID, aiModelUserName);\r\n      this.user.loadProject(aiModelUser.project);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  //TODO Device\r\n  async loginAdmin(adminEmail: string, password: string): Promise<boolean> {\r\n    if (this.user == null) {\r\n      let adminData: { admin: { adminID: number, deviceID: number, adminName: string, email: string, device: { deviceID?: number, deviceName: string, deviceType: string, firmware: string, generation: string, MACADRESS: string, sensorInformation: { sensorTypeID: number, sensorName: string, sensorUniqueID: number; }[]; }; }; } = await this.dbCon.loginAdmin({ adminEmail, password });\r\n      if (adminData.admin != null && adminData.admin.adminID !== -1) {\r\n        let admin = adminData.admin;\r\n        this.user = new Admin(admin.adminID, admin.deviceID, admin.adminName, admin.email, admin.device);\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /* eventuell implementieren\r\n    logoutAdmin(): boolean {\r\n      if (this.user != null) {\r\n        let logout = this.dbCon.logoutAdmin(this.getAdminEmail());\r\n        if (logout) {\r\n          delete this.user;\r\n        } else {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n    */\r\n\r\n  async createProject(projectName: string): Promise<boolean> {\r\n    if (this.user instanceof Admin) {\r\n      let userID = this.user.getID();\r\n      let adminEmail = this.getAdminEmail();\r\n      let project: { projectID: number, sessionID: number; } = await this.dbCon.createProject({ userID, adminEmail, projectName });\r\n      return this.user.createProject(project.projectID, project.sessionID, projectName);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  async createLabel(span: { start: number, end: number; }, labelName: string): Promise<number> {\r\n    if (this.user != null) {\r\n      let sessionID: number = this.getSessionID();\r\n      let userID: number = this.user.getID();\r\n      let datasetID: number = this.user.getCurrentDataSetID();\r\n      let labelID: number = await this.dbCon.createLabel({ sessionID, userID, datasetID, label: { span, labelName } });\r\n      if (labelID >= 0) {\r\n        let created: boolean = this.user.createLabel(labelID, span, labelName);\r\n        if (created) {\r\n          return labelID;\r\n        }\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  async setLabel(labelID: number, span: { start: number, end: number; }, labelName?: string): Promise<boolean> {\r\n    if (this.user != null) {\r\n      let setted: boolean = this.user.setLabel(labelID, span, labelName);\r\n      if (setted) {\r\n        let sessionID: number = this.getSessionID();\r\n        let userID: number = this.user.getID();\r\n        let datasetID: number = this.user.getCurrentDataSetID();\r\n        return this.dbCon.setLabel({ sessionID, userID, datasetID, label: { labelID, span, labelName } });\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  async deleteLabel(labelID: number): Promise<boolean> {\r\n    if (this.user != null) {\r\n      let deleted: boolean = this.user.deleteLabel(labelID);\r\n      if (deleted) {\r\n        let sessionID: number = this.getSessionID();\r\n        let userID: number = this.user.getID();\r\n        let dataSetID: number = this.user.getCurrentDataSetID();\r\n        return this.dbCon.deleteLabel({ sessionID, userID, dataSetID, labelID });\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n\r\n  getLabels(): { labels: { name: string, id: number, start: number, end: number; }[]; } {\r\n    if (this.user != null) {\r\n      return this.user.getLabels();\r\n    }\r\n    return { labels: [] };\r\n  }\r\n\r\n  classify(aiId: number, dataSetId: number, callBack: <R = unknown>(prediction: string | object) => R): void {\r\n    let aiBuilder = new AIBuilder(aiId);\r\n    aiBuilder.classify(dataSetId, callBack);\r\n  };\r\n\r\n  getAIModel(id: number, format: DeliveryFormat): object {\r\n    let aiDist = new AIDistributor(id, format);\r\n    return aiDist.getAIModel();\r\n  }\r\n\r\n  applyModel(trainingParameter: { dataSets: number[], imputator: string, classifier: string, scaler: string, features: string[], trainingDataPercentage?: number, slidingWindowSize?: number, slidingWindowStep?: number; }): void {\r\n    let aiBuilder = new AIBuilder(-1);\r\n    aiBuilder.applyModel(trainingParameter);\r\n  }\r\n\r\n}","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\StartController.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\State.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\VisualizationController.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\DeliveryController.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DatabaseConnector.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Language.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\User.tsx",["281","282"],"import { DeviceData } from \"./DeviceData\";\r\nimport { Project } from \"./Project\";\r\nimport { SensorData } from \"./SensorData\";\r\n\r\n/**\r\n * Die Vorlage für alle existierenden Benutzer\r\n */\r\nexport abstract class User {\r\n  protected id: number; //Die eindeutige User ID\r\n  protected name: string; //Der Name des Users\r\n  protected device: DeviceData; //Das Benutzergerät des Benutzers\r\n  protected currentProject?: Project;\r\n\r\n  /**\r\n   * Erstellt einen Benutzer\r\n   * @param id eindeutige Benutzer ID\r\n   * @param name Name des Benutzer\r\n   */\r\n  constructor(id: number, device: DeviceData, name?: string) {\r\n    this.id = id;\r\n    this.device = device;\r\n    if (name != null) {\r\n      this.name = name;\r\n    } else {\r\n      this.name = this.device.getName();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gibt vom aktuellen Projekt die aktuelle Datensatz ID zurück, falls diese nicht existiert wird -1 zurück gegeben.\r\n   */\r\n  getCurrentDataSetID(): number {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.getCurrentDataSetID();\r\n    } else {\r\n      return -1;\r\n    }\r\n  }\r\n\r\n  getCurrentProjectID(): number {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.getID();\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  addDatapoint(dataRowID: number, datapoint: { value: number[], relativeTime: number; }): boolean {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.addDatapoint(dataRowID, datapoint);\r\n    }\r\n    return false;\r\n\r\n  }\r\n\r\n  /**\r\n   * Gibt vom aktuellen Projekt die Datenreihen der Datensatz ID zurück und setzt diesen Datensatz als aktuellen Datensatz\r\n   * @param dataSetID die Datensatz ID von der die Datenreihen gelesen werden sollen\r\n   * @returns die Sensordaten von der Datenreihe\r\n   */\r\n  getDataRows(dataSetID: number): { dataRows: { sensorType: number, datapoint: { value: number[], relativeTime: number; }[]; }[]; } {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.getDataRows(dataSetID);\r\n    } else {\r\n      return { dataRows: [] };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gibt vom aktuellen Projekt die Datenreihen des aktuellen Datensatzes zurück\r\n   * @param dataSetID die Datensatz ID von der die Datenreihen gelesen werden sollen\r\n   * @returns die Sensordaten von der Datenreihe\r\n   */\r\n  getCurrentDataRows(): { dataRows: { sensorType: number, datapoint: { value: number[], relativeTime: number; }[]; }[]; } {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.getCurrentDataRows();\r\n    } else {\r\n      console.log(this.currentProject);\r\n      return { dataRows: [] };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gibt die Session ID des aktuellen Projekts zurück, -1 falls kein aktuelles Projekt existiert\r\n   */\r\n  getSessionID(): number {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.getSessionID();\r\n    } else {\r\n      return -1;\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Erstellt für das aktuelle Projekt einen neuen Datensatz und setzt diesen als aktuellen Datensatz.\r\n     * @param dataRowSensors die Sensoren, von denen die Daten ausgelesen werden\r\n     * @param dataSetID die eindeutige Datensatz ID\r\n     * @param dataSetName der Datensatznamen\r\n     * @param generateDate die Erstellungszeit von dem Datensatz\r\n     * @returns false, falls kein aktuelles Prokekt existiert\r\n     */\r\n  createDataSet(dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate?: number): boolean {\r\n    if (this.currentProject != null) {\r\n      this.currentProject.createDataSet(dataRowSensors, dataSetID, dataSetName, generateDate);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Löscht vom aktuellen Projekt den Datensatz, mit der übergebenen Datensatz ID\r\n   * @param dataSetID die Datensatz ID\r\n   * @returns false, falls der Datensatz mit der ID nicht existiert oder kein aktuelles Projekt existiert\r\n   */\r\n  deleteDataSet(dataSetID: number): number {\r\n    if (this.currentProject != null) {\r\n      let datasetExist: boolean = this.currentProject.deleteDataSet(dataSetID);\r\n      if (datasetExist) {\r\n        return this.currentProject.getID();\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Erstellt für das aktuelle Projekt und dem aktuellen Datensatz ein Label mit den übergebeben Parametern\r\n   * @param labelID Ist die eindeutige Label ID des Labels.\r\n   * @param start Ist die Startzeit des Labels.\r\n   * @param end Ist die Endzeit des Labels.\r\n   * @returns false, falls kein aktueller Datensatz existiert oder die LabelID für diesen Datensatz nicht eindeutig ist\r\n   */\r\n  createLabel(labelID: number, span: { start: number, end: number; }, labelName: string): boolean {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.createLabel(labelID, span, labelName);\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setzt beim aktuellen Datensatz dem Label mit der LabelID die neu übergebenen Daten\r\n   * @param labelID \r\n   * @param start startzeit des Labels in Millisekunden\r\n   * @param end endzeit des Labels in Millisekunden\r\n   */\r\n  setLabel(labelID: number, span: { start: number, end: number; }, labelName?: string): boolean {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.setLabel(labelID, span, labelName);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Löscht von dem aktuellen Projekt und dem aktuellen Datensatz das Label mit der Label ID\r\n   * @param labelID die Label ID\r\n   * @returns false, falls kein aktueller Datensatz existiert oder kein Label mit der Label ID existiert\r\n   */\r\n  deleteLabel(labelID: number): boolean {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.deleteLabel(labelID);\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gibt alle Daten von allen Labeln vom aktuellen Datensatz zurück.\r\n   * @returns leer, falls kein aktueller Datensatz existiert\r\n   */\r\n  getLabels(): { labels: { name: string, id: number, start: number, end: number; }[]; } {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.getLabels();\r\n    }\r\n    return { labels: [] };\r\n  }\r\n\r\n  /**\r\n  * Lädt ein bestehendes Projekt in das Model\r\n  * @param project die Projektdaten\r\n  * @returns false, falls die Projekt ID schon existiert\r\n  */\r\n  abstract loadProject(project: {\r\n    projectID: number, sessionID: number, projectName: string, projectData?: {\r\n      aiModelID?: number[],\r\n      dataSet?: {\r\n        dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate: number,\r\n        dataRows: {\r\n          dataRowID: number,\r\n          dataRow: { value: number[], relativeTime: number; }[];\r\n        }[],\r\n        label: { name: string, labelID: number, start: number, end: number; }[];\r\n      }[];\r\n    };\r\n  }): boolean;\r\n\r\n  /**\r\n   * Gibt alle Sensoren aus, die das Benutzergerät und das Programm unterstützt\r\n   */\r\n  getDeviceSensors(sensorTypeID: number[]): SensorData[] {\r\n    return this.device.getSensors(sensorTypeID);\r\n  }\r\n\r\n  /**\r\n   * Gibt die SensorTypID der auswählbaren Sensoren zurück\r\n   */\r\n  getAvailableSensors(): number[] {\r\n    return this.device.getAvailableSensors();\r\n  }\r\n\r\n  /**\r\n   * Gibt von allen Datensätzen vom aktuellen Projekt Informationen zurück\r\n   * @returns dataSetID ist die DatensatzID und dataSetName ist der Datensatzname\r\n   */\r\n  getDataSetMetas(): { dataSetID: number, dataSetName: string; }[] {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.getDataSetMetas();\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setzt einen neuen Benutzernamen\r\n   * @param name der neue Benutzername\r\n   */\r\n  setName(name: string): void {\r\n    this.name = name;\r\n  }\r\n\r\n  /**\r\n   * Gibt den Benutzernamen zurück\r\n   */\r\n  getName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  /**\r\n   * Setzt ein neues Benutzergerät\r\n   * @param device das Benutzergerät\r\n   */\r\n  setDevice(device: DeviceData) {\r\n    this.device = device;\r\n  }\r\n\r\n  /**\r\n   * Gibt falls ein Benutzergerät verfügbar ist dieses zurück\r\n   */\r\n  getDevice(): { device?: DeviceData; } {\r\n    return { device: this.device };\r\n  }\r\n\r\n  /**\r\n   * Gibt die Benutzer ID zurück\r\n   */\r\n  getID(): number {\r\n    return this.id;\r\n  }\r\n}\r\n\r\n/**\r\n * Die Klasse Admin dient für einen Benutzer mit einem Account\r\n */\r\nexport class Admin extends User {\r\n  private email: string; //Die eindeutige Admin Email\r\n  private project: Project[] = []; //Alle Projekte, die zu dem Admin gehören\r\n\r\n  /**\r\n   * Zum erstellen eines Admins\r\n   * @param adminID die Admin ID\r\n   * @param deviceID die Geräte ID des Admins\r\n   * @param adminName der Name des Admins\r\n   * @param email die Emailadresse des Admins\r\n   */\r\n  constructor(adminID: number, deviceID: number, adminName: string, email: string);\r\n\r\n  /**\r\n   * Für die Implementierung eines Bestehenden Admins\r\n   * @param adminID die Admin ID\r\n   * @param deviceID die Geräte ID\r\n   * @param adminName der Admin Name\r\n   * @param email die Emailadresse des Admins\r\n   * @param device das Gerät des Admins\r\n   */\r\n  constructor(adminID: number, deviceID: number, adminName: string, email: string,\r\n    device: { deviceID?: number, deviceName: string, deviceType: string, firmware: string, generation: string, MACADRESS: string, sensorInformation: { sensorTypeID: number, sensorName: string, sensorUniqueID: number; }[]; });\r\n  ////////////////////////////////////////TODO\r\n\r\n  constructor(adminID: number, deviceID: number, adminName: string, email: string,\r\n    device?: { MACADRESS: string, deviceName: string, firmware: string, generation: string, deviceType: string; }) {\r\n    super(adminID, DeviceData.loadDevice(deviceID, device), adminName);\r\n    this.email = email;\r\n  }\r\n\r\n  /**\r\n   * Implementiert die abstrakte Methode von User\r\n   */\r\n  loadProject(project: {\r\n    projectID: number, sessionID: number, projectName: string, projectData?: {\r\n      aiModelID?: number[],\r\n      dataSet: {\r\n        dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate: number,\r\n        dataRows: {\r\n          dataRowID: number,\r\n          dataRow: { value: number[], relativeTime: number; }[];\r\n        }[],\r\n        label: { name: string, labelID: number, start: number, end: number; }[];\r\n      }[];\r\n    };\r\n  }): boolean {\r\n    var id = this.existProject(project.projectID);\r\n    var newProject: Project = new Project(project.projectID, project.sessionID, project.projectName, project.projectData);\r\n    this.currentProject = newProject;\r\n    if (id == -1) {\r\n      this.project.push(newProject);\r\n    } else {\r\n      this.project[id] = newProject;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Fügt ein neues Projekt mit den übergebenen Parametern hinzu und setzt dieses Projekt als aktuelles Projekt\r\n   * @param projectID die Projekt ID, diese muss für den Admin eindeutig sein\r\n   * @param sessionID die Session ID, diese muss global eindeutig sein\r\n   * @param projectName der Name des Projektes\r\n   * @returns Bei angabe einer Project ID, die schon existiert wird false zurück gegeben\r\n   */\r\n  createProject(projectID: number, sessionID: number, projectName: string): boolean {\r\n    if (this.existProject(projectID) === -1) {\r\n      var newproject: Project = new Project(projectID, sessionID, projectName);\r\n      this.project.push(newproject);\r\n      this.currentProject = newproject;\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param projectID \r\n   * @returns -1 falls das Projekt nicht existiert oder die Array Position des Projekts\r\n   */\r\n  private existProject(projectID: number): number {\r\n    for (let i = 0; i < this.project.length; i++) {\r\n      if (this.project[i].getID() == projectID) {\r\n        return i;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Gibt die Admin Emailadresse zurück\r\n   */\r\n  getEmail(): string {\r\n    return this.email;\r\n  }\r\n\r\n  getProjects(): Project[] {\r\n    return this.project;\r\n  }\r\n}\r\n\r\n/**\r\n * Dataminer ist die Klasse, um Datensammler mit ihren Geräte Sensoren zu spreichern\r\n */\r\nexport class Dataminer extends User {\r\n  /**\r\n   * Erstellt einen Datensammler\r\n   * @param id die Benutzer ID\r\n   * @param name der Benutzername\r\n   * @param deviceID die Geräte ID\r\n   */\r\n  constructor(id: number, deviceID: number, name?: string) {\r\n    super(id, DeviceData.loadDevice(deviceID), name);\r\n  }\r\n\r\n  /**\r\n   * Implementiert die abstrakte Methode von User\r\n   */\r\n  loadProject(project: {\r\n    projectID: number, sessionID: number, projectName: string, projectData?: {\r\n      aiModelID?: number[],\r\n      dataSet: {\r\n        dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate: number,\r\n        dataRows: {\r\n          dataRowID: number,\r\n          dataRow: { value: number[], relativeTime: number; }[];\r\n        }[],\r\n        label: { name: string, labelID: number, start: number, end: number; }[];\r\n      }[];\r\n    };\r\n  }): boolean {\r\n\r\n    this.currentProject = new Project(project.projectID, project.sessionID, project.projectName, project.projectData);\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * AIModelUser ist die Klasse, um KI-Modell Benutzer zu speichern\r\n */\r\nexport class AIModelUser extends User {\r\n  /**\r\n   * Erstellt einen KI-Modell Benutzer, wenn Name \"\" gesetzt ist und eine Geräte ID gesetzt ist wird als Name der Geräte Name gewählt\r\n   * @param id die eindeutige Benutzer ID\r\n   * @param name der Benutzername\r\n   * @param deviceID die Geräte ID\r\n   */\r\n  constructor(id: number, deviceID: number, name?: string) {\r\n    super(id, DeviceData.loadDevice(deviceID), name);\r\n  }\r\n  /**\r\n   * Implementiert die abstrakte Methode von User\r\n   */\r\n  loadProject(project: {\r\n    projectID: number, sessionID: number, projectName: string, projectData?: {\r\n      aiModelID?: number[],\r\n      dataSet: {\r\n        dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate: number,\r\n        dataRows: {\r\n          dataRowID: number,\r\n          dataRow: { value: number[], relativeTime: number; }[];\r\n        }[],\r\n        label: { name: string, labelID: number, start: number, end: number; }[];\r\n      }[];\r\n    };\r\n  }): boolean {\r\n\r\n    this.currentProject = new Project(project.projectID, project.sessionID, project.projectName, project.projectData);\r\n    return true;\r\n  }\r\n}","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\AIBuilder.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\AIDistributor.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\SensorManager.tsx",["283"],"import { MainController } from \"./MainController\";\r\nimport { Page } from \"../view/pages/PageInterface\";\r\nimport { IState, States } from \"../view/pages/State\";\r\n\r\nexport class SensorManager {\r\n    private currentSensors: Sensor[] = [];\r\n    //private currentSensorIDs: number[] = [];\r\n    private facade = MainController.getInstance().getFacade();\r\n    private waitTime: number = 5;\r\n    private readTime = 10;\r\n    private startTime = 10;\r\n    private saving = true;\r\n    private sensorTypes: number[] = [];\r\n    private dataPoints: { rowId: number, sensorType: number, value: number[]; relativeTime: number; }[] = [];\r\n    private dataRows: { sensorType: number, datapoint: { value: number[]; relativeTime: number; }[]; }[] = [];\r\n\r\n    private readonly TO_SECOND = 1000;\r\n\r\n    /**\r\n    * Erzeugt eine neue Datenreihe und setzt diese damit als momentan benutzte Datenreihe. \r\n    * @param sensorTypes Die Angabe der zu benutzenden Sensoren. Die position im Array bestimmt die DataRow ID jedes Sensors.\r\n    * @returns Gibt true für ein erfolgreiches Erstellen eines Dataensatzes zurück, gibt sonst false zurück.\r\n    */\r\n    setUpDataRead(sensorTypes: number[], dataSetName: string, waitTime: number, readTime: number, saving: boolean) {\r\n        //this.currentSensorIDs = sensorTypes;\r\n        // this.waitTime = waitTime * this.TO_SECOND;\r\n        //this.readTime = readTime * this.TO_SECOND;\r\n        //this.startTime = readTime * this.TO_SECOND;\r\n        this.waitTime = waitTime;\r\n        this.readTime = readTime;\r\n        this.saving = saving;\r\n        this.sensorTypes = sensorTypes;\r\n        for (let index = 0; index < sensorTypes.length; index++) {\r\n            switch (sensorTypes[index]) {\r\n                case 2:\r\n                    let accSensor = new Accelerometer({ frequency: 60 });\r\n                    this.currentSensors.push(accSensor);\r\n                    accSensor.addEventListener('reading', e => {\r\n                        this.getData(accSensor, index, sensorTypes[index]);\r\n                    });\r\n                    accSensor.addEventListener('error', event => {\r\n                        console.log(event.error.name, event.error.message);\r\n                    });\r\n                    break;\r\n                case 3:\r\n                    let gyroSensor = new Gyroscope({ frequency: 60 });\r\n                    this.currentSensors.push(gyroSensor);\r\n                    gyroSensor.addEventListener('reading', e => {\r\n                        this.getData(gyroSensor, index, sensorTypes[index]);\r\n                    });\r\n                    gyroSensor.addEventListener('error', event => {\r\n                        console.log(event.error.name, event.error.message);\r\n                    });\r\n                    break;\r\n                case 4:\r\n                    let magSensor = new Magnetometer({ frequency: 60 });\r\n                    this.currentSensors.push(magSensor);\r\n                    magSensor.addEventListener('reading', e => {\r\n                        this.getData(magSensor, index, sensorTypes[index]);\r\n                    });\r\n                    magSensor.addEventListener('error', event => {\r\n                        console.log(event.error.name, event.error.message);\r\n                    });\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        return (this.facade.createDataSet(sensorTypes, dataSetName));\r\n    }\r\n\r\n    /**\r\n    * Erfasst für den momentanene Datensatz Daten und sendet diese an die Explorer Datenbank.\r\n    * Wartet zuerst für die angegebene Wartezeit und nimmt dann für die angegeben Lesezeit daten auf.\r\n    */\r\n    readData(page: Page) {\r\n        let state: IState = page.getState();\r\n        PubSub.publish('usedsensors', this.sensorTypes);\r\n        //Warte für waitTime und update dabei die Seite\r\n        let intervalId1 = setInterval(() => {\r\n            this.waitTime = this.waitTime - 1;\r\n            //state.recordingSettings!.waitTime = this.waitTime;\r\n            //state.currentState = States.SetWaitTime;\r\n            page.setState(state);\r\n            PubSub.publish('nextCount', this.waitTime);\r\n            if (this.waitTime === 0) {\r\n                clearInterval(intervalId1);\r\n                this.startTime = new Date().getTime();\r\n                for (let index = 0; index < this.currentSensors.length; index++) {\r\n                    this.currentSensors[index].start();\r\n                }\r\n                //Nimm Daten auf verteile sie an die Seite und das Modell. Erneuere dabei die aufnahmezeit auf der Seite\r\n                let intervalId2 = setInterval(() => {\r\n                    this.readTime = this.readTime - 1;\r\n                    while (this.dataPoints.length > 0) {\r\n                        let newDataPoint = this.dataPoints.shift()!;\r\n                        state.dataPoints!.push(newDataPoint);\r\n                        MainController.getInstance().getFacade().sendDataPoint(newDataPoint.rowId, { value: newDataPoint.value, relativeTime: newDataPoint.relativeTime });\r\n                        page.setState(state);\r\n                    }\r\n                    if (this.readTime === 0) {\r\n                        clearInterval(intervalId2);\r\n                        for (let index = 0; index < this.currentSensors.length; index++) {\r\n                            this.currentSensors[index].stop();\r\n                        }\r\n                    }\r\n                }, 1000);\r\n\r\n\r\n\r\n            }\r\n        }, 1000);\r\n        /**\r\n              if (this.waitTime === 0) {\r\n                  console.log(this.currentSensors)\r\n                  console.log(this.readTime)\r\n                  for (let index = 0; index < this.currentSensors.length; index++) {\r\n                      this.currentSensors[index].start();\r\n                  }\r\n                  console.log('xxx')\r\n                  //Nimm Daten auf verteile sie an die Seite und das Modell. Erneuere dabei die aufnahmezeit auf der Seite\r\n                  let intervalId2 = setInterval(() => {\r\n                      console.log(this.currentSensors)\r\n                      console.log(this.readTime)\r\n                      console.log(this.dataPoints)\r\n                      this.readTime = this.readTime - 1;\r\n                      while (this.dataPoints.length > 0) {\r\n                          let newDataPoint = this.dataPoints.shift()!;\r\n                          state.dataPoints!.push(newDataPoint);\r\n                          MainController.getInstance().getFacade().sendDataPoint(newDataPoint.rowId, { value: newDataPoint.value, relativeTime: newDataPoint.relativeTime });\r\n                          page.setState(state);\r\n                          console.log(this.readTime)\r\n                          console.log(state.dataPoints)\r\n                      }\r\n                      if (this.readTime === 0) clearInterval(intervalId2);\r\n                  }, 1000);\r\n  \r\n                  for (let index = 0; index < this.currentSensors.length; index++) {\r\n                      this.currentSensors[index].stop();\r\n                  }\r\n              }\r\n           */\r\n    }\r\n\r\n    private saveDatapointinRow(dataPoint: { rowId: number, sensorType: number, value: number[]; relativeTime: number; }) {\r\n        while (this.dataRows.length - 1 < dataPoint.rowId) {\r\n            this.dataRows.push({ sensorType: -1, datapoint: [] });\r\n        }\r\n        this.dataRows[dataPoint.rowId].sensorType = dataPoint.sensorType;\r\n        this.dataRows[dataPoint.rowId].datapoint.push({ value: dataPoint.value, relativeTime: dataPoint.relativeTime });\r\n        PubSub.publish('startDiagram', this.dataRows);\r\n        PubSub.publish('finishDiagram', this.dataRows);\r\n    }\r\n\r\n    /**\r\n     * @returns Gibt als Zahl die Zeit in Sekunden zurück, für welche vor der Aufnahme gewartet wird. \r\n     */\r\n    getWaitTime() {\r\n        return this.waitTime;\r\n    }\r\n\r\n    /**\r\n     * @returns Gibt als Zahl die Zeit in Sekunden zurück, für welche die Aufnahme läuft. \r\n     */\r\n    getReadTime() {\r\n        return this.readTime;\r\n    }\r\n\r\n    /**\r\n    * Holt die Sensordaten für einen Sensor\r\n    * @param sensor der Sensor von dem die Daten gelsen werden\r\n    * @param sensorType Die ID des Sensortypes\r\n    */\r\n    private getData(sensor: Magnetometer | Gyroscope | Accelerometer, rowId: number, sensorType: number) {\r\n        const point = { rowId, sensorType, value: [sensor.x!, sensor.y!, sensor.z!], relativeTime: (new Date().getTime() - this.startTime) / 1000 };\r\n        this.dataPoints.push(point);\r\n        this.saveDatapointinRow(point);\r\n    }\r\n\r\n    /**\r\n    * Prüft welche Sensoren verfügbar sind.\r\n    * @returns ein Array welches alle SensorTypeIDs enthält die verfügbar sind\r\n    */\r\n    async getAvailableSensors(): Promise<{ sensorTypID: number; sensorType: string; }[]> {\r\n        let sensors: { sensorTypID: number; sensorType: string; }[] = [];\r\n\r\n\r\n        // sensors.push({ sensorTypID: 2, sensorType: \"Accelerometer\" }); //Nur test\r\n        // return sensors;//Nur test\r\n\r\n\r\n        let accelerometer = new Accelerometer({ frequency: 60 });\r\n        let accelerometerExist = this.existSensor(accelerometer);\r\n        let gyroscope = new Gyroscope({ frequency: 60 });\r\n        let gyroscopeExist = this.existSensor(gyroscope);\r\n        /*let magnetometer = new Magnetometer();            Nicht definiert?\r\n        let magnetometerExist = this.test(magnetometer);*/\r\n\r\n        if (await accelerometerExist) {\r\n            sensors.push({ sensorTypID: 2, sensorType: \"Accelerometer\" });\r\n        }\r\n        if (await gyroscopeExist) {\r\n            sensors.push({ sensorTypID: 3, sensorType: \"Gyroscope\" });\r\n        }\r\n\r\n        /*if (await magnetometerExist) {\r\n            sensors.push({ sensorTypID: 4, sensorType: \"Magnetometer\" });\r\n        }*/\r\n        return sensors;\r\n    }\r\n\r\n    private async existSensor(sensor: Sensor): Promise<boolean> {\r\n        var finish = false;\r\n        sensor.addEventListener('reading', e => {\r\n            finish = true;\r\n            sensor.stop();\r\n        });\r\n        sensor.start();\r\n        await this.wait(1000);\r\n        sensor.stop();\r\n        return finish;\r\n    }\r\n    private async wait(ms: number) {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n}","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\DataCollectionController.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\index.tsx",["284","285","286"],"import React, { Component } from 'react';\r\nimport PubSub from 'pubsub-js';\r\nimport Title from '../../components/StartComponents/Title';\r\nimport Input from '../../components/StartComponents/Input';\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from 'react-dom';\r\nimport { States } from '../State';\r\n\r\ntype Props = {\r\n\r\n};\r\n\r\nexport class StartPage extends React.Component<Props, State> implements Page {\r\n    state = new State();\r\n    observers: PageController[] = [];\r\n    constructor(props: Props) {\r\n        super(props);\r\n        const VDOM = (\r\n            <div>\r\n                <Title />\r\n                <Input />\r\n            </div>\r\n        );\r\n        ReactDOM.render(VDOM, document.getElementById('root'));\r\n        this.changeSettings();\r\n    }\r\n\r\n    /**\r\n     * Prüft ob der Nutzer \"Start\" druckt und ändert den Zustand.\r\n     */\r\n    changeSettings() {\r\n        PubSub.subscribe('settingsFinish', (_msg: any, data: {\r\n            newDataSetName: string,\r\n            usedSensorTypes: number[],\r\n            waitTime: number,\r\n            readTime: number,\r\n            availableSensorTypes: { sensorTypID: number, sensorType: string, chosen: boolean; }[];\r\n        }) => {\r\n            this.state.recordingSettings = data;\r\n            this.state.currentState = States.ChangeToDataCollection;\r\n            this.notify();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Die Methoden für Beobachtermuster\r\n     * @param observer Beobachter,nähmlich Controller\r\n     */\r\n    attach(observer: PageController) {\r\n        this.observers.push(observer);\r\n    }\r\n\r\n    detach(observer: PageController) {\r\n        const index = this.observers.indexOf(observer, 0);\r\n        if (index > -1) {\r\n            this.observers.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    notify() {\r\n        for (let index = 0; index < this.observers.length; index++) {\r\n            const element = this.observers[index];\r\n            element.update();\r\n        }\r\n    }\r\n\r\n    getState() {\r\n        return this.state;\r\n    }\r\n}\r\n","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\ModelCreationController.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ReferringPage\\State.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DeliveryFormat.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DeviceData.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Project.tsx",["287","288","289"],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\StartPage\\State.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\controller\\FinishController.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\index.tsx",["290","291"],"import React from 'react';\r\nimport PubSub from 'pubsub-js';\r\nimport Title from '../../components/DataCollectionComponents/Title';\r\nimport Countdown from '../../components/DataCollectionComponents/Countdown';\r\nimport Diagram from '../../components/DataCollectionComponents/Diagram';\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from 'react-dom';\r\nimport { States } from '../State';\r\n\r\ntype Props = {\r\n};\r\n\r\nexport class DataCollectionPage extends React.Component<Props, State> implements Page {\r\n    state = new State;\r\n    observers: PageController[] = [];\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        const VDOM = (\r\n            <div>\r\n                <Title />\r\n                <Countdown />\r\n                <Diagram />\r\n            </div>\r\n        );\r\n        ReactDOM.render(VDOM, document.getElementById('root'));\r\n        this.finishCountdown();\r\n        this.showDiagram();\r\n        this.changeToFinish();\r\n    }\r\n\r\n\r\n    /**\r\n     * Prüft ob Countdown fertig ist und ändert den Zustand.\r\n     */\r\n    finishCountdown() {\r\n        PubSub.unsubscribe('finishCountdown');\r\n        PubSub.subscribe('finishCountdown', () => {\r\n            this.state.currentState = States.NeedInstantDiagram;\r\n            this.notify();\r\n        }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Diese Methode sollte während Datenerfassung jede Sekunde von Controller aufgerufen werden, um Bild zu updaten.\r\n     * @param countdownNumber Die Countdownzahl zu zeigen\r\n     */\r\n    showDiagram() {\r\n        // this.setState({ dataRows: dataRows });\r\n        //this.state.usedSensorNames = usedSensorNames;\r\n        // this.setState({ usedSensorNames: usedSensorNames });\r\n        //PubSub.publish('startDiagram', this.state.dataRows);\r\n        // PubSub.publish('giveLineLabels', this.state.usedSensorNames);\r\n\r\n\r\n        //Beispiel\r\n        /*var exdatarows = [];\r\n        var exdatapoints = [];\r\n        const allpoints = [{ rowId: 0, sensorType: 85124, value: [55, 66, 12], relativeTime: 0 },\r\n        { rowId: 0, sensorType: 85124, value: [26, 21, 2], relativeTime: 1 },\r\n        { rowId: 0, sensorType: 85124, value: [91, 83, 50], relativeTime: 2 },\r\n        { rowId: 0, sensorType: 85124, value: [22, 71, 23], relativeTime: 3 },\r\n        { rowId: 0, sensorType: 85124, value: [14, 8, 77], relativeTime: 4 },\r\n        { rowId: 1, sensorType: 45157, value: [83, 44, 1], relativeTime: 0 },\r\n        { rowId: 1, sensorType: 45157, value: [78, 55, 2], relativeTime: 1 },\r\n        { rowId: 1, sensorType: 45157, value: [51, 66, 3], relativeTime: 2 },\r\n        { rowId: 1, sensorType: 45157, value: [23, 81, 50], relativeTime: 3 },\r\n        { rowId: 1, sensorType: 45157, value: [13, 20, 5], relativeTime: 4 }\r\n        ];\r\n\r\n        //jede ein datapoints addieren, kann publish in for-schleife sein,\r\n        for (var i = 0; i < allpoints.length; i++) {\r\n            if (i === 0) {\r\n                exdatapoints.push({ sensorType: allpoints[i].sensorType, value: allpoints[i].value, relativeTime: allpoints[i].relativeTime });\r\n                continue;\r\n            }\r\n            if (allpoints[i].rowId === allpoints[i - 1].rowId) {\r\n                exdatapoints.push({ sensorType: allpoints[i].sensorType, value: allpoints[i].value, relativeTime: allpoints[i].relativeTime });\r\n            } else {\r\n                exdatarows.push(exdatapoints);\r\n                exdatapoints = [];\r\n                exdatapoints.push({ sensorType: allpoints[i].sensorType, value: allpoints[i].value, relativeTime: allpoints[i].relativeTime });\r\n            }\r\n        }\r\n        exdatarows.push(exdatapoints);\r\n\r\n\r\n        PubSub.publish('startDiagram', exdatarows);*/\r\n    }\r\n    changeToFinish() {\r\n        PubSub.unsubscribe('changeToFinish');\r\n        PubSub.subscribe('changeToFinish', (_msg: any) => {\r\n            // eslint-disable-next-line\r\n            this.state.currentState = States.ChangeToFinish;\r\n            this.notify();\r\n\r\n        });\r\n    }\r\n    /**\r\n     * Die Methoden für Beobachtermuster\r\n     * @param observer Beobachter,nähmlich Controller\r\n     */\r\n    attach(observer: PageController) {\r\n        this.observers.push(observer);\r\n    }\r\n\r\n    detach(observer: PageController) {\r\n        const index = this.observers.indexOf(observer, 0);\r\n        if (index > -1) {\r\n            this.observers.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    notify() {\r\n        for (let index = 0; index < this.observers.length; index++) {\r\n            const element = this.observers[index];\r\n            element.update();\r\n        }\r\n    }\r\n\r\n    getState() {\r\n        return this.state;\r\n    }\r\n\r\n}","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ConstantsText\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\NewProjectButton\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoginWindow\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LoadModelButton\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\SensorData.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\AIModel.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DeliveryPage\\State.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DataSet.tsx",["292"],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Session.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\VisualizationPage\\State.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Title\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\StartComponents\\Input\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\DataCollectionPage\\State.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\EmailList\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DeliveryComponents\\DownloadButton\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\FinishButton\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\ModelCreationPage\\State.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DataRow.tsx",["293","294"],"import { relative } from \"node:path\";\r\nimport { DataPoint } from \"./DataPoint\";\r\nimport { AccelerometerData, GyroscopeData, MagnetometerData } from \"./SensorData\";\r\n\r\n/**\r\n * Die Klasse DataRow beschreibt eine Reihe aufgenommener Daten eines Sensors.\r\n */\r\nexport class DataRow {\r\n  private id: number; //Dies ist die DataRow ID, diese ist eindeutig für Datensätze.\r\n  private datapoint: DataPoint[] = []; //Dies ist Datenreihe, eine Reihe von Datenpunkten.\r\n  private sensor: AccelerometerData | GyroscopeData | MagnetometerData; //Dies ist der Sensor von dem die Daten gelesen wurden.\r\n\r\n  /**\r\n   * Eine neue Datenreihe erstellen.\r\n   * @param sensor Sensor, von dem die Daten gelesen werden.\r\n   * @param dataRowID Eine eindeutige Datenreihen ID.\r\n   */\r\n  constructor(sensor: AccelerometerData | GyroscopeData | MagnetometerData, dataRowID: number);\r\n\r\n  /**\r\n   * Eine bereits existierende Datenreihe kann wie folgt in das Model geladen werden.\r\n   * @param sensor der Sensor von dem die Daten gelesen wurden\r\n   * @param dataRowID die ID, welche die Datenreihe bei der ersten Erstellung zugeteilt bekommen hat\r\n   * @param dataRow die aufgenommenen Daten\r\n   * @param dataRow.value der Sensor Messwert\r\n   * @param dataRow.relativeTime die relative Zeit zum Aufnahmestart\r\n   */\r\n  constructor(sensor: AccelerometerData | GyroscopeData | MagnetometerData, dataRowID: number, dataRow: { value: number[], relativeTime: number; }[]);\r\n  constructor(sensor: AccelerometerData | GyroscopeData | MagnetometerData, dataRowID: number, dataRow?: { value: number[], relativeTime: number; }[]) {\r\n    this.sensor = sensor;\r\n    this.id = dataRowID;\r\n    if (dataRow != null) {\r\n      for (let i = 0; i < dataRow.length; i++) {\r\n        this.datapoint.push(new DataPoint(dataRow[i].value, dataRow[i].relativeTime));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gibt die DataRow ID zurück.\r\n   */\r\n  public getID(): number {\r\n    return this.id;\r\n  }\r\n\r\n  /**\r\n   * Fügt den Datenpunkt der Datenreihe hinzu\r\n   * \r\n   */\r\n\r\n  /**\r\n   * Fügt den Datenpunkt der Datenreihe hinzu\r\n   * @param datapoint der Datenpunkt\r\n   * @returns false, falls datapoint.value leer ist oder datapoint.relativeTime < 0\r\n   */\r\n  public addDatapoint(datapoint: { value: number[], relativeTime: number; }): boolean {\r\n    if (datapoint.value.length == 0 || datapoint.relativeTime < 0) {\r\n      return false;\r\n    } else {\r\n      this.datapoint.push(new DataPoint(datapoint.value, datapoint.relativeTime));\r\n      return true;\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Gibt die Datenreihe zurück.\r\n   * @returns value ist der Messwert und relativeTime die relative Zeit in Millisekunden zum Aufnahmestart.\r\n   */\r\n  public getDataRow(): { sensorType: number, datapoint: { value: number[], relativeTime: number; }[]; } {\r\n    var dataRow: { sensorType: number, datapoint: { value: number[], relativeTime: number; }[]; };\r\n    var datapoint: { value: number[], relativeTime: number; }[] = [];\r\n    for (let i = 0; i < this.datapoint.length; i++) {\r\n      datapoint[i] = { value: this.datapoint[i].getValue(), relativeTime: this.datapoint[i].getRelativeTime() };\r\n    }\r\n    var sensorType: number = this.sensor.SensorTypeID;\r\n    dataRow = { sensorType, datapoint };\r\n    return dataRow;\r\n  }\r\n}","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\Label.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\VisualizationComponents\\DiagramList\\index.jsx",["295","296"],"import React, { Component } from 'react';\r\nimport PubSub from 'pubsub-js';\r\nexport default class DiagramList extends Component {\r\n    state = {\r\n        diagramList: [],\r\n        lineLabels: [],\r\n        dataSetID: -1000,\r\n        sensorRow: [],\r\n        datavalue: [],\r\n        time: [],\r\n        showDiagramIndex: 0,\r\n        /**  sensorRow: [85124, 45157],\r\n          datavalue: [\r\n              [55, 26, 91, 22, 14],\r\n              [66, 21, 83, 71, 8],\r\n              [12, 2, 50, 23, 77],\r\n              [83, 78, 51, 23, 13],\r\n              [44, 55, 66, 81, 20],\r\n              [1, 2, 3, 50, 5],\r\n          ],\r\n          time: [0, 1, 2, 3, 4],*/\r\n\r\n        color: ['rgba(46,190,87,1)', 'rgba(68,24,232,1)', 'rgba(238,173,14,1)', 'rgba(178,34,34,1)', 'rgba(238, 130, 238,1)', 'rgba(0, 0, 0,1)',\r\n            'rgba(106, 90, 205,1)', 'rgba(238, 118, 0,1)', 'rgba(105, 105, 105,1)'],\r\n        csscolor: ['2EBE57', 'CC00FF', 'EEAD0E', 'B22222', 'EE82EE', '000000',\r\n            '6A5ACD', 'EE7600', '696969'],\r\n        //grün,blau,gelb,rot,rosa,schwarz,lila,orange,grau\r\n    };\r\n\r\n    handleClick = (diagram, index) => {\r\n        this.setState({ showDiagramIndex: index });\r\n        //  PubSub.publish('getdiagram', diagram)\r\n    };\r\n\r\n    componentDidMount() {\r\n        PubSub.subscribe(\"visualizationDiagram\", (_msg, { dataSetID, dataRows }) => {\r\n            this.setState({\r\n                lineLabels: [],\r\n                dataSetID: -1,\r\n                sensorRow: [],\r\n                datavalue: [],\r\n                time: []\r\n            });\r\n            this.setState({ dataSetID });\r\n\r\n            //put each value Array in State\r\n            var datavalues = [];\r\n            for (var i = 0; i < dataRows.length; i++) {\r\n                this.state.sensorRow.push(dataRows[i].sensorType);\r\n                for (var dataCoordinate = 0; dataCoordinate < 3; dataCoordinate++) {\r\n                    for (var j = 0; j < dataRows[i].datapoint.length; j++) {\r\n                        datavalues.push(dataRows[i].datapoint[j].value[dataCoordinate]);\r\n                    }\r\n                    this.state.datavalue.push(datavalues);\r\n                    datavalues = [];\r\n                }\r\n            }\r\n            // eslint-disable-next-line\r\n            for (var j = 0; j < dataRows[0].datapoint.length; j++) {\r\n                this.state.time.push(dataRows[0].datapoint[j].relativeTime);\r\n            }\r\n\r\n            var newDatasets = [];\r\n            var lineLabels = [];\r\n            // eslint-disable-next-line\r\n            for (var i = 0; i < this.state.sensorRow.length * 3; i++) {\r\n                var coordinate = \".X\";\r\n                var sensor = this.state.sensorRow[parseInt(i / 3)];\r\n                // eslint-disable-next-line\r\n                if (i % 3 == 1) {\r\n                    coordinate = \".Y\";\r\n                }\r\n                // eslint-disable-next-line\r\n                if (i % 3 == 2) {\r\n                    coordinate = \".Z\";\r\n                }\r\n\r\n                lineLabels.push(<font color={this.state.csscolor[i]}>■{this.state.sensorRow[parseInt(i / 3)] + coordinate}<br /></font>);\r\n                // this.setState({ lineLabels: lineLabels })\r\n                newDatasets.push(\r\n                    {\r\n                        label: sensor + coordinate,\r\n                        strokeColor: this.state.color[i],\r\n                        borderWidth: 1,\r\n                        data: this.state.datavalue[i],\r\n                    }\r\n                );\r\n            }\r\n            const data = {\r\n                labels: this.state.time,\r\n                datasets: newDatasets\r\n            };\r\n            const options = {\r\n                datasetFill: false,\r\n                pointDotRadius: 2,\r\n                pointHitDetectionRadius: 1,\r\n                offsetGridLines: false,\r\n                pointDot: false\r\n            };\r\n            const newList = this.state.diagramList;\r\n            for (i = 0; i < newList.length; i++) {\r\n                if (newList[i].dataSetID == dataSetID) {\r\n                    newList[i] = { dataSetID, lineLabels, data, options };\r\n                    break;\r\n                }\r\n            }\r\n            if (i == newList.length) {\r\n                newList.push({ dataSetID, lineLabels, data, options });\r\n            }\r\n            this.setState({ diagramList: newList });\r\n        });\r\n\r\n    }\r\n\r\n    render() {\r\n        var LineChart = require(\"react-chartjs\").Line;\r\n        const { diagramList } = this.state;\r\n\r\n\r\n        return (\r\n            <div>\r\n                {diagramList.map((diagram, index) => {\r\n                    return (\r\n                        <div key={index}>\r\n                            {(this.state.showDiagramIndex === index) && (\r\n                                <div className=\"showImage\">\r\n                                    <h5>{diagram.dataSetID}</h5>\r\n                                    {diagram.lineLabels}\r\n                                    <LineChart data={diagram.data} options={diagram.options} width=\"500\" height=\"250\" />\r\n                                </div>)\r\n                            }\r\n\r\n                        </div>\r\n                    );\r\n                })\r\n                }\r\n\r\n                {diagramList.map((diagram, index) => {\r\n                    return (\r\n                        <div key={index}>\r\n                            <h5>{diagram.dataSetID}</h5>\r\n                            {diagram.lineLabels}\r\n                            <LineChart data={diagram.data} options={diagram.options} width=\"200\" height=\"100\" onClick={() => this.handleClick(diagram, index)} />\r\n                        </div>\r\n                    );\r\n                })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Countdown\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Title\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\FinishPage\\index.tsx",["297","298","299","300","301","302","303","304"],"import React, { Component } from \"react\";\r\nimport PubSub from 'pubsub-js';\r\nimport Title from \"../../components/FinishComponents/Title\";\r\nimport Body from \"../../components/FinishComponents/Diagram\";\r\nimport Labelling from \"../../components/FinishComponents/Input/Labelling\";\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { States } from \"../State\";\r\n\r\ntype IProps = {\r\n};\r\n\r\nexport class FinishPage extends React.Component<IProps, State> implements Page {\r\n  state = new State;\r\n  observers: PageController[] = [];\r\n\r\n  constructor(props: IProps) {\r\n    super(props);\r\n    const VDOM = (\r\n      <div>\r\n        <Title />\r\n        <Body />\r\n        <div className=\"label-container\">\r\n          <Labelling />\r\n        </div>\r\n      </div>\r\n    );\r\n    this.newLabel();\r\n    this.changeLabel();\r\n    this.deleteLabel();\r\n    ReactDOM.render(VDOM, document.getElementById(\"root\"));\r\n    //this.giveDiagram();\r\n  }\r\n\r\n  giveDiagram() {\r\n    //Beispiel\r\n    /*var exrows = []\r\n    exrows.push([{ sensorType: 85124, value: [55, 66, 12], relativeTime: 0 },\r\n    { sensorType: 85124, value: [26, 21, 2], relativeTime: 1 },\r\n    { sensorType: 85124, value: [91, 83, 50], relativeTime: 2 },\r\n    { sensorType: 85124, value: [22, 71, 23], relativeTime: 3 },\r\n    { sensorType: 85124, value: [14, 8, 77], relativeTime: 4 },\r\n    ])\r\n    exrows.push([{ sensorType: 45157, value: [83, 44, 1], relativeTime: 0 },\r\n    { sensorType: 45157, value: [78, 55, 2], relativeTime: 1 },\r\n    { sensorType: 45157, value: [51, 66, 3], relativeTime: 2 },\r\n    { sensorType: 45157, value: [23, 81, 50], relativeTime: 3 },\r\n    { sensorType: 45157, value: [13, 20, 5], relativeTime: 4 },\r\n    ])\r\n\r\n    PubSub.publish('finishDiagram', exrows)*/\r\n\r\n    //PubSub.publish('finishDiagram', this.state.dataRows);\r\n  }\r\n\r\n  newLabel() {\r\n    PubSub.unsubscribe('newLabel');\r\n    PubSub.subscribe('newLabel', (_msg: any, label: { labelID: number, start: number, end: number, name: string; }) => {\r\n      this.state.currentLabel = label;\r\n      this.state.currentState = States.NewLabel;\r\n      this.notify();\r\n    });\r\n  }\r\n\r\n  changeLabel() {\r\n    PubSub.unsubscribe('changeLabel');\r\n    PubSub.subscribe('changeLabel', (_msg: any, label: { labelID: number, start: number, end: number, name: string; }) => {\r\n      this.state.currentLabel = label;\r\n      this.state.currentState = States.ChangeLabel;\r\n      this.notify();\r\n\r\n    });\r\n  }\r\n\r\n  deleteLabel() {\r\n    PubSub.unsubscribe('deleteLabel');\r\n    PubSub.subscribe('deleteLabel', (_msg: any, label: { start: number, end: number, name: string, labelID: number; }) => {\r\n      var deleteLabel = { labelID: label.labelID, start: label.start, end: label.end, name: label.name };\r\n      this.state.currentLabel = deleteLabel;\r\n      this.state.currentState = States.DeleteLabel;\r\n      this.notify();\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * Die Methoden für Beobachtermuster\r\n   * @param observer Beobachter,nähmlich Controller\r\n  */\r\n  attach(observer: PageController) {\r\n    this.observers.push(observer);\r\n  }\r\n\r\n  detach(observer: PageController) {\r\n    const index = this.observers.indexOf(observer, 0);\r\n    if (index > -1) {\r\n      this.observers.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  notify() {\r\n    for (let index = 0; index < this.observers.length; index++) {\r\n      const element = this.observers[index];\r\n      element.update();\r\n    }\r\n  }\r\n\r\n  getState() {\r\n    return this.state;\r\n  }\r\n}","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\DataCollectionComponents\\Diagram\\index.jsx",["305"],"import React, { Component } from 'react';\r\nimport PubSub from 'pubsub-js';\r\n\r\nexport default class Diagram extends Component {\r\n    state = {\r\n        lineLabels: [],\r\n        sensorRow: [],\r\n        datavalue: [],\r\n        time: [],\r\n        showDiagram: false,\r\n        diagram: {},\r\n        diagramLineLabels: {},\r\n        diagramData: {},\r\n        diagramOptions: {},\r\n        color: ['rgba(46,190,87,1)', 'rgba(68,24,232,1)', 'rgba(238,173,14,1)', 'rgba(178,34,34,1)', 'rgba(238, 130, 238,1)', 'rgba(0, 0, 0,1)',\r\n            'rgba(106, 90, 205,1)', 'rgba(238, 118, 0,1)', 'rgba(105, 105, 105,1)'],\r\n        csscolor: ['2EBE57', 'CC00FF', 'EEAD0E', 'B22222', 'EE82EE', '000000',\r\n            '6A5ACD', 'EE7600', '696969'],\r\n    };\r\n    componentDidMount() {\r\n        //PubSub.unsubscribe(\"startDiagram\")\r\n        PubSub.subscribe(\"startDiagram\", (_msg, dataRows) => {\r\n            this.setState({\r\n                lineLabels: [],\r\n                sensorRow: [],\r\n                datavalue: [],\r\n                time: [],\r\n                showDiagram: true\r\n            });\r\n            //put each value Array in State\r\n            var datavalues = [];\r\n            for (var i = 0; i < dataRows.length; i++) {\r\n                this.state.sensorRow.push(dataRows[i].sensorType);\r\n                for (var dataCoordinate = 0; dataCoordinate < 3; dataCoordinate++) {\r\n                    for (var j = 0; j < dataRows[i].datapoint.length; j++) {\r\n                        datavalues.push(dataRows[i].datapoint[j].value[dataCoordinate]);\r\n                    }\r\n                    this.state.datavalue.push(datavalues);\r\n                    datavalues = [];\r\n                }\r\n            }\r\n            // eslint-disable-next-line\r\n            for (var j = 0; j < dataRows[0].datapoint.length; j++) {\r\n                this.state.time.push(dataRows[0].datapoint[j].relativeTime);\r\n            }\r\n\r\n            var newDatasets = [];\r\n            var lineLabels = [];\r\n            // eslint-disable-next-line\r\n            for (var i = 0; i < this.state.sensorRow.length * 3; i++) {\r\n                var coordinate = \".X\";\r\n                var sensor = this.state.sensorRow[parseInt(i / 3)];\r\n                // eslint-disable-next-line\r\n                if (i % 3 == 1) {\r\n                    coordinate = \".Y\";\r\n                }\r\n                // eslint-disable-next-line\r\n                if (i % 3 == 2) {\r\n                    coordinate = \".Z\";\r\n                }\r\n\r\n                lineLabels.push(<font color={this.state.csscolor[i]}>■{this.state.sensorRow[parseInt(i / 3)] + coordinate}<br /></font>);\r\n                //this.setState({ lineLabels: lineLabels })\r\n                newDatasets.push(\r\n                    {\r\n                        label: sensor + coordinate,\r\n                        strokeColor: this.state.color[i],\r\n                        borderWidth: 1,\r\n                        data: this.state.datavalue[i],\r\n                    }\r\n                );\r\n            }\r\n            const data = {\r\n                labels: this.state.time,\r\n                datasets: newDatasets\r\n            };\r\n            const options = {\r\n                datasetFill: false,\r\n                pointDotRadius: 2,\r\n                pointHitDetectionRadius: 1,\r\n                offsetGridLines: false,\r\n                pointDot: false\r\n            };\r\n            this.setState({ lineLabels: lineLabels });\r\n            //this.setState({ diagram: { lineLabels, data, options } })\r\n            //this.setState({ diagramLineLabels: lineLabels })\r\n            this.setState({ diagramData: data });\r\n            this.setState({ diagramOptions: options });\r\n        });\r\n\r\n    }\r\n\r\n    submit = () => {\r\n        PubSub.publish('changeToFinish');\r\n    };\r\n    render() {\r\n\r\n\r\n        var LineChart = require(\"react-chartjs\").Line;\r\n        const { lineLabels, diagramData, diagramOptions, diagram } = this.state;\r\n        return (\r\n            <div>\r\n                {lineLabels}\r\n                <LineChart data={diagramData} options={diagramOptions} width=\"400\" height=\"200\" redraw />\r\n                <button type=\"button\" onClick={this.submit}>ChangeToFinish</button>\r\n            </div>\r\n        );\r\n    }\r\n}","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\QRImage\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ChangeToVisuBtn\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\LinkText\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ProjectList\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ModelCreationComponents\\Train\\index.tsx",["306"],"import React, { Component } from 'react';\r\nimport PubSub from 'pubsub-js';\r\nimport NewWindow from 'react-new-window';\r\n\r\n\r\nexport default class Train extends Component {\r\n\tstate = {\r\n\t\tmouse: false,\r\n\t\topenNewWindow: false,\r\n\t\tvalue: '',\r\n\t\tdatabaseList: [] as { dataSetID: number, dataSetName: string, chosen: boolean; }[],\r\n\t\tdatasets: [] as { dataSetID: number, dataSetName: string, chosen: boolean; }[],\r\n\t\timputators: [\r\n\t\t\t{ name: \"Mittel\", checked: false, tag: 'MEAN' },\r\n\t\t\t{ name: \"Letzer Wert fortgeführt\", checked: false, tag: 'FORWARD' },\r\n\t\t\t{ name: \"Bewegter Durchschnitt\", checked: false, tag: 'MOVING' },\r\n\t\t\t{ name: \"Lineare Interpolation\", checked: false, tag: 'LINEAR' },\r\n\t\t\t{ name: \"Spline Interpolation\", checked: false, tag: 'SPLINE' }\r\n\t\t],\r\n\t\tscalers: [\r\n\t\t\t{ name: \"Standard Scaler\", checked: false, tag: 'STANDARD' },\r\n\t\t\t{ name: \"Robust Scaler\", checked: false, tag: 'ROBUST' },\r\n\t\t\t{ name: \"Min-Max Scaler\", checked: false, tag: 'MIN_MAX' },\r\n\t\t\t{ name: \"Normalizer\", checked: false, tag: 'NORMALIZER' },\r\n\t\t\t{ name: \"Anteilstrafo\", checked: false, tag: 'SHARE' }\r\n\t\t],\r\n\t\tmyfeatures: [\r\n\t\t\t{ name: \"Minimum\", checked: false, tag: 'MIN' },\r\n\t\t\t{ name: \"Maximum\", checked: false, tag: 'MAX' },\r\n\t\t\t{ name: \"Varianz\", checked: false, tag: 'VARIANCE' },\r\n\t\t\t{ name: \"Energie\", checked: false, tag: 'ENERGY' },\r\n\t\t\t{ name: \"Fourier-T\", checked: false, tag: 'FOURIER_TRANSFORM' },\r\n\t\t\t{ name: \"Mittelwert\", checked: false, tag: 'MEAN' },\r\n\t\t\t{ name: \"Autoregressiv\", checked: false, tag: 'AUTOREGRESSIVE' },\r\n\t\t\t{ name: \"Abweichung\", checked: false, tag: 'SKEWNESS' },\r\n\t\t\t{ name: \"Wölbung\", checked: false, tag: 'KURTOSIS' },\r\n\t\t\t{ name: \"IQR\", checked: false, tag: 'IQR' }\r\n\t\t],\r\n\t\tclassifiers: [\r\n\t\t\t{ name: \"MLPClassifier\", checked: false, tag: 'MLP' },\r\n\t\t\t{ name: \"RandomForestClassifier\", checked: false, tag: 'RANDOM_FOREST' },\r\n\t\t\t{ name: \"KNeighborsClassifier\", checked: false, tag: 'K_NEIGHOBORS' },\r\n\t\t\t{ name: \"Support Vector Machine\", checked: false, tag: 'SVM' }\r\n\t\t],\r\n\t\tchosenScaler: 0,\r\n\t\tchosenclassifier: 0,\r\n\t\tchosenImputator: 0\r\n\t};\r\n\r\n\tcomponentDidMount() {\r\n\t\tPubSub.unsubscribe('setlist');\r\n\t\tPubSub.subscribe('setlist', (_msg: any, data: { dataSetID: number, dataSetName: string; }[]) => {\r\n\t\t\tlet newDatabaseList: { dataSetID: number, dataSetName: string, chosen: boolean; }[] = [];\r\n\t\t\tfor (let i = 0; i < data.length; i++) {\r\n\t\t\t\tnewDatabaseList.push({ dataSetID: data[i].dataSetID, dataSetName: data[i].dataSetName, chosen: false });\r\n\t\t\t}\r\n\t\t\tthis.state.databaseList = newDatabaseList;\r\n\t\t\tthis.setState({ databaseList: newDatabaseList });\r\n\t\t});\r\n\t}\r\n\r\n\thandleMouse = (flag: boolean) => {\r\n\t\treturn () => {\r\n\t\t\tthis.setState({ mouse: flag });\r\n\t\t};\r\n\t};\r\n\r\n\thandleCheck = (id: number, chosen: boolean) => {\r\n\t\tconst { datasets } = this.state;\r\n\t\tconst newDatasets = datasets.map((dataset) => {\r\n\t\t\t// eslint-disable-next-line\r\n\t\t\tif (dataset.dataSetID == id) return { ...dataset, chosen };\r\n\t\t\telse return dataset;\r\n\t\t});\r\n\t\tthis.setState({ datasets: newDatasets });\r\n\t};\r\n\r\n\thandleDelete = (id: number) => {\r\n\t\tif (window.confirm('Sind Sie sicher, die gewählt Emailadresse zu löschen?')) {\r\n\t\t\tconst { datasets } = this.state;\r\n\t\t\tconst newDatasets = datasets.filter((dataset) => {\r\n\t\t\t\treturn dataset.dataSetID !== id;\r\n\t\t\t});\r\n\t\t\t//update emailList\r\n\t\t\tthis.setState({ datasets: newDatasets });\r\n\t\t}\r\n\t};\r\n\r\n\t//addDataset for add new Dataset\r\n\taddDataset = (datasetObj: { dataSetID: number, dataSetName: string, chosen: boolean; }) => {\r\n\t\t//get orignal datasetList\r\n\t\tconst { datasets } = this.state;\r\n\t\t//add new one\r\n\t\tconst newDatasets = [datasetObj, ...datasets];\r\n\t\t//update datasetList\r\n\t\tthis.setState({ datasets: newDatasets });\r\n\t};\r\n\r\n\thandleCreate = () => {\r\n\t\t//if (this.state.databaseList == []) {\r\n\t\t//\t}\r\n\t\tconst flag = !this.state.openNewWindow;\r\n\t\tthis.setState({ openNewWindow: flag });\r\n\t};\r\n\r\n\thandleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n\t\tthis.setState({\r\n\t\t\tvalue: e.target.value\r\n\t\t});\r\n\t};\r\n\r\n\thandleChoose = () => {\r\n\t\t/* wait to change load model*/\r\n\t\tthis.setState({ openNewWindow: false });\r\n\t\t// eslint-disable-next-line\r\n\t\tif (this.state.value == '') {\r\n\t\t\talert('no choice');\r\n\t\t} else {\r\n\t\t\tconst { databaseList } = this.state;\r\n\t\t\tconst newDatabaseList1 = databaseList.map((databaseObj) => {\r\n\t\t\t\t// eslint-disable-next-line\r\n\t\t\t\tif (databaseObj.dataSetName == this.state.value) {\r\n\t\t\t\t\tdatabaseObj.chosen = true;\r\n\t\t\t\t\tconst datasetObj = { dataSetID: databaseObj.dataSetID, dataSetName: databaseObj.dataSetName, chosen: false };\r\n\t\t\t\t\tthis.addDataset(datasetObj);\r\n\t\t\t\t}\r\n\t\t\t\treturn databaseObj;\r\n\t\t\t}\r\n\t\t\t);\r\n\t\t\tconst newDatabaseList2 = newDatabaseList1.filter((databaseObj) => {\r\n\t\t\t\t// eslint-disable-next-line\r\n\t\t\t\treturn databaseObj.chosen == false;\r\n\t\t\t});\r\n\t\t\t//update emailList\r\n\t\t\tthis.setState({ databaseList: newDatabaseList2 });\r\n\t\t}\r\n\t};\r\n\r\n\toptions = () => {\r\n\t\tconst { databaseList } = this.state;\r\n\t\t/*way to add new into list\r\n\t\tand wait to get databaseList\r\n\t\tconst newdatabase = {id:'003', name:'dataset3', chosen: false}\r\n\t\tdatabaseList.push(newdatabase)\r\n\t\t*/\r\n\t\treturn databaseList.map(dataset =>\r\n\t\t\t<option key={dataset.dataSetID} value={dataset.dataSetName}>{dataset.dataSetName}</option>);\r\n\t};\r\n\r\n\thandleImputation = (index: number) => {\r\n\t\tvar newList = [...this.state.imputators];\r\n\t\tvar newChosen = this.state.chosenImputator;\r\n\t\tif (newList[index].checked) { newChosen--; }\r\n\t\telse { newChosen++; }\r\n\t\tif (newChosen <= 1) {\r\n\t\t\tnewList[index].checked = !newList[index].checked;\r\n\t\t\tthis.setState({ chosenImputator: newChosen, imputators: newList });\r\n\t\t} else {\r\n\t\t\talert('Darf nicht mehrer Imputer wählen!');\r\n\t\t\treturn;\r\n\t\t}\r\n\t};\r\n\r\n\thandleScaler = (index: number) => {\r\n\r\n\t\tvar newList = [...this.state.scalers];\r\n\t\tvar newChosen = this.state.chosenScaler;\r\n\t\tif (newList[index].checked) { newChosen--; }\r\n\t\telse { newChosen++; }\r\n\t\tif (newChosen <= 1) {\r\n\t\t\tnewList[index].checked = !newList[index].checked;\r\n\t\t\tthis.setState({ chosenScaler: newChosen });\r\n\t\t\tthis.setState({ scalers: newList });\r\n\t\t} else {\r\n\t\t\talert('Darf nicht mehrer Scaler wählen!');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t};\r\n\r\n\thandleExtraction = (index: number) => {\r\n\t\tvar newList = [...this.state.myfeatures];\r\n\t\tnewList[index].checked = !newList[index].checked;\r\n\t\tthis.setState({ features: newList });\r\n\t};\r\n\r\n\thandleClassifier = (index: number) => {\r\n\t\tvar newList = [...this.state.classifiers];\r\n\t\tvar newChosen = this.state.chosenclassifier;\r\n\t\tif (newList[index].checked) { newChosen--; }\r\n\t\telse { newChosen++; }\r\n\t\tif (newChosen <= 1) {\r\n\t\t\tnewList[index].checked = !newList[index].checked;\r\n\t\t\tthis.setState({ chosenclassifier: newChosen });\r\n\t\t\tthis.setState({ classifiers: newList });\r\n\t\t} else {\r\n\t\t\talert('Darf nicht mehrer Classifier wählen!');\r\n\t\t\treturn;\r\n\t\t}\r\n\t};\r\n\r\n\thandleTrain = () => {\r\n\t\tvar dataSets: number[] = [], imputator = \"\", classifier = '', scaler = '', features: string[] = [];\r\n\t\tconst { datasets, imputators, classifiers, scalers, myfeatures } = this.state;\r\n\t\tdatasets.map((datasetObj) => {\r\n\t\t\tif (datasetObj.chosen) dataSets.push(datasetObj.dataSetID);\r\n\t\t\treturn datasetObj;\r\n\t\t});\r\n\t\timputators.map((imputatorObj) => {\r\n\t\t\tif (imputatorObj.checked) imputator = imputatorObj.tag;\r\n\t\t\treturn imputatorObj;\r\n\t\t});\r\n\t\tclassifiers.map((classifierObj) => {\r\n\t\t\tif (classifierObj.checked) classifier = classifierObj.tag;\r\n\t\t\treturn classifierObj;\r\n\t\t});\r\n\t\tscalers.map((scalerObj) => {\r\n\t\t\tif (scalerObj.checked) scaler = scalerObj.tag;\r\n\t\t\treturn scalerObj;\r\n\t\t});\r\n\t\tmyfeatures.map((featureObj) => {\r\n\t\t\tif (featureObj.checked) features.push(featureObj.tag);\r\n\t\t\treturn featureObj;\r\n\t\t});\r\n\t\t//console.log(chosendataSets, chosenImputator, chosenclassifier, chosenscaler, chosenFeatures)\r\n\t\tPubSub.publish('train', { dataSets, imputator, classifier, scaler, features });\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst { mouse, datasets, imputators, scalers, myfeatures, classifiers } = this.state;\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"train\">\r\n\t\t\t\t<h3>Datasets</h3>\r\n\t\t\t\t{datasets.map(dataset => {\r\n\t\t\t\t\treturn (\r\n\r\n\t\t\t\t\t\t<li style={{ backgroundColor: mouse ? '#ddd' : 'white' }} onMouseEnter={this.handleMouse(true)} onMouseLeave={this.handleMouse(false)}>\r\n\t\t\t\t\t\t\t<label>\r\n\t\t\t\t\t\t\t\t<input type=\"checkbox\" checked={dataset.chosen} onChange={(e: React.ChangeEvent<HTMLInputElement>): void => this.handleCheck(dataset.dataSetID, e.target.checked)} />\r\n\t\t\t\t\t\t\t\t<span>{dataset.dataSetName}</span>\r\n\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t\t<button onClick={() => this.handleDelete(dataset.dataSetID)} className=\"btn-item\" style={{ display: mouse ? 'block' : 'none' }}>Löschen</button>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\r\n\t\t\t\t<div className=\"adddatasetbutton\">\r\n\t\t\t\t\t{this.state.openNewWindow && (\r\n\t\t\t\t\t\t<NewWindow>\r\n\t\t\t\t\t\t\t<div className=\"login-window\">\r\n\t\t\t\t\t\t\t\t<h1>DatabaseList</h1>\r\n\t\t\t\t\t\t\t\t<select onChange={this.handleChange}>\r\n\t\t\t\t\t\t\t\t\t<option value=\"choose dataset\">choose dataset</option>\r\n\t\t\t\t\t\t\t\t\t{this.options()}\r\n\t\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t\t\t<button onClick={this.handleChoose} className=\"btn\" >Add!</button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</NewWindow>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t<button onClick={() => this.handleCreate()} className=\"btn\" >Add new Dataset</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<div className=\"imputationlist\">\r\n\t\t\t\t\t\t<h3>Imputation</h3>\r\n\t\t\t\t\t\t{imputators.map((imputator, index) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<div key={index}>\r\n\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" value={index} checked={imputator.checked} onChange={() => this.handleImputation(index)} /><span>{imputator.name}</span>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"scalerlist\">\r\n\t\t\t\t\t\t<h3>Normalisierung</h3>\r\n\t\t\t\t\t\t{scalers.map((scaler, index) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<div key={index}>\r\n\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" value={index} checked={scaler.checked} onChange={() => this.handleScaler(index)} /><span>{scaler.name}</span>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<div className=\"extractionlist\">\r\n\t\t\t\t\t\t<h3>Merkmalextraktion</h3>\r\n\t\t\t\t\t\t{myfeatures.map((extraction, index) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<div key={index}>\r\n\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" value={index} checked={extraction.checked} onChange={() => this.handleExtraction(index)} /><span>{extraction.name}</span>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"classifierlist\">\r\n\t\t\t\t\t\t<h3>Modell</h3>\r\n\t\t\t\t\t\t{classifiers.map((classifier, index) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<div key={index}>\r\n\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" value={index} checked={classifier.checked} onChange={() => this.handleClassifier(index)} /><span>{classifier.name}</span>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"trainbutton\">\r\n\t\t\t\t\t<button onClick={() => this.handleTrain()} className=\"btn\" >Train Start!</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\r\n\t\t);\r\n\t}\r\n\r\n}\r\n","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\DataPoint.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\model\\TimeSpan.tsx",["307"],"import { runInThisContext } from \"node:vm\";\r\n\r\n/**\r\n * Diese Klasse repräsentiert ein Zeitfenster.\r\n * Mit start als Anfang und end als Ende des Zeitfensters.\r\n */\r\nexport class TimeSpan {\r\n  private start: number; //Startpunkt des Zeitfensters in Sekunden.\r\n  private end: number; //Enpunkt des Zeitfensters in Sekunden.\r\n\r\n  /**\r\n   * Erstellt ein Zeitfenster.\r\n   * @param start Startpunkt in Sekunden (start >= 0)\r\n   * @param end Endpunkt in Sekunden (end >= start)\r\n   */\r\n  public constructor(start: number, end: number) {\r\n    if (start >= 0) {\r\n      this.start = start;\r\n    } else {\r\n      this.start = 0;\r\n    }\r\n    if (end >= this.start) {\r\n      this.end = end;\r\n    } else {\r\n      this.end = this.start;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setzt das übergebene Zeitfenster als Zeitfenster, wenn dies den Anforderungen entspricht. (0 <= start <= end)\r\n   * @returns false, falls das Zeitfenster nicht gesetzt wurde\r\n   */\r\n  public setTimeSpan(span: { start: number, end: number; }): boolean {\r\n    if (span.end >= span.start && span.start >= 0) {\r\n      this.start = span.start;\r\n      this.end = span.end;\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Gibt den Startpunkt in Sekunden zurück.\r\n   */\r\n  public getStart(): number {\r\n    return this.start;\r\n  }\r\n\r\n  /**\r\n   * Gibt den Enpunkt in Sekunden zurück.\r\n   */\r\n  public getEnd(): number {\r\n    return this.end;\r\n  }\r\n}","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\pages\\FinishPage\\State.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Title\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Input\\Labelling\\index.tsx",[],"C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\FinishComponents\\Diagram\\index.jsx",["308"],"import { Component } from 'react';\r\nimport PubSub from 'pubsub-js';\r\nimport diagram from './index.module.css';\r\n\r\nexport default class Diagram extends Component {\r\n    state = {\r\n        lineLabels: [],\r\n        sensorRow: [],\r\n        datavalue: [],\r\n        time: [],\r\n        showDiagram: false,\r\n        diagramLineLabels: {},\r\n        diagramData: {},\r\n        diagramOptions: {},\r\n        color: ['rgba(46,190,87,1)', 'rgba(68,24,232,1)', 'rgba(238,173,14,1)', 'rgba(178,34,34,1)', 'rgba(238, 130, 238,1)', 'rgba(0, 0, 0,1)',\r\n            'rgba(106, 90, 205,1)', 'rgba(238, 118, 0,1)', 'rgba(105, 105, 105,1)'],\r\n        csscolor: ['2EBE57', 'CC00FF', 'EEAD0E', 'B22222', 'EE82EE', '000000',\r\n            '6A5ACD', 'EE7600', '696969'],\r\n    };\r\n\r\n    componentDidMount() {//{ sensorType: number, datapoint:{value: number[], relativeTime: number; }[]}[]\r\n        PubSub.subscribe(\"finishDiagram\", (_msg, dataRows) => {\r\n            this.setState({\r\n                lineLabels: [],\r\n                sensorRow: [],\r\n                datavalue: [],\r\n                time: [],\r\n                showDiagram: true\r\n            });\r\n            //put each value Array in State\r\n            var datavalues = [];\r\n            for (var i = 0; i < dataRows.length; i++) {\r\n                this.state.sensorRow.push(dataRows[i].sensorType);\r\n                for (var dataCoordinate = 0; dataCoordinate < 3; dataCoordinate++) {\r\n                    for (var j = 0; j < dataRows[i].datapoint.length; j++) {\r\n                        datavalues.push(dataRows[i].datapoint[j].value[dataCoordinate]);\r\n                    }\r\n                    this.state.datavalue.push(datavalues);\r\n                    datavalues = [];\r\n                }\r\n            }\r\n            // eslint-disable-next-line\r\n            for (var j = 0; j < dataRows[0].datapoint.length; j++) {\r\n                this.state.time.push(dataRows[0].datapoint[j].relativeTime);\r\n            }\r\n\r\n            var newDatasets = [];\r\n            var lineLabels = [];\r\n            // eslint-disable-next-line\r\n            for (var i = 0; i < this.state.sensorRow.length * 3; i++) {\r\n                var coordinate = \".X\";\r\n                var sensor = this.state.sensorRow[parseInt(i / 3)];\r\n                // eslint-disable-next-line\r\n                if (i % 3 == 1) {\r\n                    coordinate = \".Y\";\r\n                }\r\n                // eslint-disable-next-line\r\n                if (i % 3 == 2) {\r\n                    coordinate = \".Z\";\r\n                }\r\n\r\n                lineLabels.push(<font color={this.state.csscolor[i]}>■{this.state.sensorRow[parseInt(i / 3)] + coordinate}<br /></font>);\r\n                //this.setState({ lineLabels: lineLabels })\r\n                newDatasets.push(\r\n                    {\r\n                        label: sensor + coordinate,\r\n                        strokeColor: this.state.color[i],\r\n                        borderWidth: 1,\r\n                        data: this.state.datavalue[i],\r\n                    }\r\n                );\r\n            }\r\n            const data = {\r\n                labels: this.state.time,\r\n                datasets: newDatasets\r\n            };\r\n            const options = {\r\n                datasetFill: false,\r\n                pointDotRadius: 2,\r\n                pointHitDetectionRadius: 1,\r\n                offsetGridLines: false,\r\n                pointDot: false\r\n            };\r\n            this.setState({ lineLabels: lineLabels });\r\n            //this.setState({ diagram: { lineLabels, data, options } })\r\n            //this.setState({ diagramLineLabels: lineLabels })\r\n            this.setState({ diagramData: data });\r\n            this.setState({ diagramOptions: options });\r\n        });\r\n\r\n    }\r\n\r\n    render() {\r\n        var LineChart = require(\"react-chartjs\").Line;\r\n        const { lineLabels, diagramData, diagramOptions } = this.state;\r\n        return (\r\n            <div>\r\n                {lineLabels}\r\n                <LineChart data={diagramData} options={diagramOptions} width=\"400\" height=\"200\" redraw />\r\n            </div>\r\n        );\r\n    }\r\n}","C:\\Users\\timi300399\\Documents\\GitHub\\Typescript-Frontend\\ki-app\\src\\view\\components\\ReferringComponents\\ModelList\\index.tsx",[],{"ruleId":"309","severity":1,"message":"310","line":8,"column":37,"nodeType":"311","messageId":"312","endLine":8,"endColumn":45},{"ruleId":"309","severity":1,"message":"313","line":8,"column":47,"nodeType":"311","messageId":"312","endLine":8,"endColumn":57},{"ruleId":"309","severity":1,"message":"314","line":8,"column":59,"nodeType":"311","messageId":"312","endLine":8,"endColumn":69},{"ruleId":"309","severity":1,"message":"315","line":8,"column":71,"nodeType":"311","messageId":"312","endLine":8,"endColumn":78},{"ruleId":"309","severity":1,"message":"316","line":8,"column":10,"nodeType":"311","messageId":"312","endLine":8,"endColumn":26},{"ruleId":"317","severity":1,"message":"318","line":225,"column":47,"nodeType":"319","messageId":"320","endLine":225,"endColumn":49},{"ruleId":"317","severity":1,"message":"321","line":313,"column":12,"nodeType":"319","messageId":"320","endLine":313,"endColumn":14},{"ruleId":"317","severity":1,"message":"321","line":346,"column":35,"nodeType":"319","messageId":"320","endLine":346,"endColumn":37},{"ruleId":"309","severity":1,"message":"322","line":3,"column":18,"nodeType":"311","messageId":"312","endLine":3,"endColumn":24},{"ruleId":"309","severity":1,"message":"323","line":1,"column":17,"nodeType":"311","messageId":"312","endLine":1,"endColumn":26},{"ruleId":"324","severity":1,"message":"325","line":41,"column":13,"nodeType":"326","endLine":41,"endColumn":23},{"ruleId":"324","severity":1,"message":"325","line":42,"column":13,"nodeType":"326","endLine":42,"endColumn":23},{"ruleId":"327","severity":1,"message":"328","line":94,"column":80,"nodeType":"329","messageId":"330","endLine":94,"endColumn":82},{"ruleId":"327","severity":1,"message":"328","line":94,"column":104,"nodeType":"329","messageId":"330","endLine":94,"endColumn":106},{"ruleId":"317","severity":1,"message":"321","line":98,"column":35,"nodeType":"319","messageId":"320","endLine":98,"endColumn":37},{"ruleId":"331","severity":1,"message":"332","line":16,"column":13,"nodeType":"333","messageId":"334","endLine":16,"endColumn":22,"fix":"335"},{"ruleId":"324","severity":1,"message":"325","line":41,"column":13,"nodeType":"326","endLine":41,"endColumn":23},{"ruleId":"317","severity":1,"message":"321","line":139,"column":33,"nodeType":"319","messageId":"320","endLine":139,"endColumn":35},{"ruleId":"309","severity":1,"message":"336","line":1,"column":10,"nodeType":"311","messageId":"312","endLine":1,"endColumn":18},{"ruleId":"317","severity":1,"message":"321","line":57,"column":32,"nodeType":"319","messageId":"320","endLine":57,"endColumn":34},{"ruleId":"317","severity":1,"message":"321","line":102,"column":42,"nodeType":"319","messageId":"320","endLine":102,"endColumn":44},{"ruleId":"317","severity":1,"message":"321","line":107,"column":19,"nodeType":"319","messageId":"320","endLine":107,"endColumn":21},{"ruleId":"309","severity":1,"message":"323","line":1,"column":17,"nodeType":"311","messageId":"312","endLine":1,"endColumn":26},{"ruleId":"331","severity":1,"message":"332","line":16,"column":11,"nodeType":"333","messageId":"334","endLine":16,"endColumn":20,"fix":"337"},{"ruleId":"324","severity":1,"message":"325","line":61,"column":7,"nodeType":"326","endLine":61,"endColumn":17},{"ruleId":"324","severity":1,"message":"325","line":62,"column":7,"nodeType":"326","endLine":62,"endColumn":17},{"ruleId":"324","severity":1,"message":"325","line":70,"column":7,"nodeType":"326","endLine":70,"endColumn":17},{"ruleId":"324","severity":1,"message":"325","line":71,"column":7,"nodeType":"326","endLine":71,"endColumn":17},{"ruleId":"324","severity":1,"message":"325","line":81,"column":7,"nodeType":"326","endLine":81,"endColumn":17},{"ruleId":"324","severity":1,"message":"325","line":82,"column":7,"nodeType":"326","endLine":82,"endColumn":17},{"ruleId":"338","severity":1,"message":"339","line":100,"column":58,"nodeType":"311","messageId":"312","endLine":100,"endColumn":65},{"ruleId":"324","severity":1,"message":"325","line":57,"column":4,"nodeType":"326","endLine":57,"endColumn":14},{"ruleId":"309","severity":1,"message":"340","line":1,"column":10,"nodeType":"311","messageId":"312","endLine":1,"endColumn":26},{"ruleId":"338","severity":1,"message":"341","line":3,"column":8,"nodeType":"311","messageId":"312","endLine":3,"endColumn":15},"@typescript-eslint/no-unused-vars","'QRNumber' is defined but never used.","Identifier","unusedVar","'QRAlphaNum' is defined but never used.","'QR8BitByte' is defined but never used.","'QRKanji' is defined but never used.","'isBreakStatement' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'States' is defined but never used.","'Component' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"342","text":"343"},"'relative' is defined but never used.",{"range":"344","text":"343"},"no-unused-vars","'diagram' is assigned a value but never used.","'runInThisContext' is defined but never used.","'diagram' is defined but never used.",[634,634],"()",[620,620]]